
AOA-Reader-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007938  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c70  08007c70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000074  08007cec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  08007cec  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2be  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a1  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00040c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  00042218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049a9  00000000  00000000  000436d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dc0  00000000  00000000  00048079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c778  00000000  00000000  00061e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e5b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006484  00000000  00000000  0016e604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b20 	.word	0x08007b20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08007b20 	.word	0x08007b20

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d013      	beq.n	8000624 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000600:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000604:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	e000      	b.n	8000610 <ITM_SendChar+0x2c>
    {
      __NOP();
 800060e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800061a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_write>:




int _write(int file, char *ptr, int len)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0;DataIdx<len;DataIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffc9 	bl	80005e4 <ITM_SendChar>
	for(DataIdx=0;DataIdx<len;DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x12>

	return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fc6f 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f828 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f918 	bl	80008ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f8e6 	bl	800084c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000680:	f000 f892 	bl	80007a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000684:	f003 fc1a 	bl	8003ebc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <main+0x44>)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0x48>)
 800068e:	f003 fc7f 	bl	8003f90 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <main+0x4c>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of Read_AoA */
  Read_AoAHandle = osThreadNew(task1_read_aoa, NULL, &Read_AoA_attributes);
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <main+0x50>)
 800069a:	2100      	movs	r1, #0
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <main+0x54>)
 800069e:	f003 fc77 	bl	8003f90 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <main+0x58>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f003 fc3c 	bl	8003f24 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_ADCEx_Calibration_Start(&hadc1);

  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x40>
 80006ae:	bf00      	nop
 80006b0:	08007b70 	.word	0x08007b70
 80006b4:	08000a75 	.word	0x08000a75
 80006b8:	20000160 	.word	0x20000160
 80006bc:	08007b94 	.word	0x08007b94
 80006c0:	08000a85 	.word	0x08000a85
 80006c4:	20000164 	.word	0x20000164

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fb19 	bl	8006d0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <SystemClock_Config+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <SystemClock_Config+0xd8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <SystemClock_Config+0xdc>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xdc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000738:	2360      	movs	r3, #96	; 0x60
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fb39 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9d0 	bl	8000afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075c:	f001 fae2 	bl	8001d24 <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000766:	f000 f9c9 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2103      	movs	r1, #3
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fdca 	bl	8002320 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000792:	f000 f9b3 	bl	8000afc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0x98>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_ADC1_Init+0xa0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC1_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC1_Init+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC1_Init+0x98>)
 800080a:	f000 fbcf 	bl	8000fac <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 f972 	bl	8000afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000818:	2303      	movs	r3, #3
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC1_Init+0x98>)
 800082a:	f000 fd69 	bl	8001300 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000834:	f000 f962 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000090 	.word	0x20000090
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f002 fea6 	bl	80035e0 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f92f 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000d8 	.word	0x200000d8
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a60      	ldr	r2, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b55      	ldr	r3, [pc, #340]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b4c      	ldr	r3, [pc, #304]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093a:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b46      	ldr	r3, [pc, #280]	; (8000a60 <MX_GPIO_Init+0x1b4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000958:	4842      	ldr	r0, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x1b8>)
 800095a:	f001 f9af 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4841      	ldr	r0, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x1bc>)
 8000964:	f001 f9aa 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	483b      	ldr	r0, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x1c0>)
 8000980:	f000 fff0 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4830      	ldr	r0, [pc, #192]	; (8000a64 <MX_GPIO_Init+0x1b8>)
 80009a2:	f000 ffdf 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009a6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4829      	ldr	r0, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x1b8>)
 80009c0:	f000 ffd0 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_GPIO_Init+0x1bc>)
 80009dc:	f000 ffc2 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x1bc>)
 80009f4:	f000 ffb6 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <MX_GPIO_Init+0x1c4>)
 8000a16:	f000 ffa5 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0x1c4>)
 8000a30:	f000 ff98 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0x1bc>)
 8000a52:	f000 ff87 	bl	8001964 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000

08000a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f003 fb2d 	bl	80040dc <osDelay>
 8000a82:	e7fb      	b.n	8000a7c <StartDefaultTask+0x8>

08000a84 <task1_read_aoa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_read_aoa */
void task1_read_aoa(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	// High Priority Task to read the aoa sensor (potentiometer)
	while(1)
		{
		  // While reading ... blue led blinks
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <task1_read_aoa+0x44>)
 8000a90:	f001 f92d 	bl	8001cee <HAL_GPIO_TogglePin>

		  // Read value from potentiometer 1 (AoA Sensor)
		  HAL_ADC_Start(&hadc1);
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <task1_read_aoa+0x48>)
 8000a96:	f000 facd 	bl	8001034 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <task1_read_aoa+0x48>)
 8000a9e:	f000 fb97 	bl	80011d0 <HAL_ADC_PollForConversion>
		  ADC1RES = HAL_ADC_GetValue(&hadc1);
 8000aa2:	480a      	ldr	r0, [pc, #40]	; (8000acc <task1_read_aoa+0x48>)
 8000aa4:	f000 fc1f 	bl	80012e6 <HAL_ADC_GetValue>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <task1_read_aoa+0x4c>)
 8000aae:	801a      	strh	r2, [r3, #0]

		  printf("Read=%d",ADC1RES);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <task1_read_aoa+0x4c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <task1_read_aoa+0x50>)
 8000ab8:	f006 f9c6 	bl	8006e48 <iprintf>
		  // do one read every seconds
		  osDelay(1000);
 8000abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac0:	f003 fb0c 	bl	80040dc <osDelay>
		{
 8000ac4:	e7e2      	b.n	8000a8c <task1_read_aoa+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	20000090 	.word	0x20000090
 8000ad0:	20000168 	.word	0x20000168
 8000ad4:	08007b50 	.word	0x08007b50

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fa3f 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 fee3 	bl	8001910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_ADC_MspInit+0x74>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d123      	bne.n	8000bc2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_ADC_MspInit+0x78>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000baa:	2308      	movs	r3, #8
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_ADC_MspInit+0x7c>)
 8000bbe:	f000 fed1 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ae      	sub	sp, #184	; 0xb8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2290      	movs	r2, #144	; 0x90
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 f888 	bl	8006d0e <memset>
  if(huart->Instance==USART3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d13c      	bne.n	8000c82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fdda 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c22:	f7ff ff6b 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_UART_MspInit+0xbc>)
 8000c7e:	f000 fe71 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	37b8      	adds	r7, #184	; 0xb8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40004800 	.word	0x40004800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_InitTick+0xe0>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <HAL_InitTick+0xe0>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_InitTick+0xe0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fd4e 	bl	800276c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cda:	f001 fd1f 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000cde:	6378      	str	r0, [r7, #52]	; 0x34
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce2:	f001 fd1b 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <HAL_InitTick+0xe4>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_InitTick+0xe8>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_InitTick+0xec>)
 8000cfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d08:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d22:	f002 f97d 	bl	8003020 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11b      	bne.n	8000d6c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <HAL_InitTick+0xe8>)
 8000d36:	f002 f9d5 	bl	80030e4 <HAL_TIM_Base_Start_IT>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d111      	bne.n	8000d6c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d48:	2036      	movs	r0, #54	; 0x36
 8000d4a:	f000 fdfd 	bl	8001948 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d808      	bhi.n	8000d66 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2036      	movs	r0, #54	; 0x36
 8000d5a:	f000 fdd9 	bl	8001910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_InitTick+0xf0>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e002      	b.n	8000d6c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	2000016c 	.word	0x2000016c
 8000d84:	40001000 	.word	0x40001000
 8000d88:	20000004 	.word	0x20000004

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM6_DAC_IRQHandler+0x10>)
 8000dbe:	f002 fa09 	bl	80031d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000016c 	.word	0x2000016c

08000dcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f005 fe04 	bl	8006aac <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20080000 	.word	0x20080000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200001b8 	.word	0x200001b8
 8000ed8:	20004bd8 	.word	0x20004bd8

08000edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f005 feb9 	bl	8006ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb9b 	bl	800066c <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f44:	08007c78 	.word	0x08007c78
  ldr r2, =_sbss
 8000f48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f4c:	20004bd8 	.word	0x20004bd8

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>

08000f52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 fccf 	bl	80018fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f7ff fe9b 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fdd1 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200001bc 	.word	0x200001bc

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200001bc 	.word	0x200001bc

08000fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e031      	b.n	8001026 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fdc4 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_ADC_Init+0x84>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	f043 0202 	orr.w	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fad6 	bl	80015ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	e001      	b.n	800101c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	ffffeefd 	.word	0xffffeefd

08001034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Start+0x1a>
 800104a:	2302      	movs	r3, #2
 800104c:	e0ad      	b.n	80011aa <HAL_ADC_Start+0x176>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d018      	beq.n	8001096 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001074:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <HAL_ADC_Start+0x184>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a50      	ldr	r2, [pc, #320]	; (80011bc <HAL_ADC_Start+0x188>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9a      	lsrs	r2, r3, #18
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001088:	e002      	b.n	8001090 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3b01      	subs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f9      	bne.n	800108a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d175      	bne.n	8001190 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <HAL_ADC_Start+0x18c>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010de:	d106      	bne.n	80010ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f023 0206 	bic.w	r2, r3, #6
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001104:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_ADC_Start+0x190>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d143      	bne.n	80011a8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e03a      	b.n	80011a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_ADC_Start+0x194>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d10e      	bne.n	800115a <HAL_ADC_Start+0x126>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d107      	bne.n	800115a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001158:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_ADC_Start+0x190>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d120      	bne.n	80011a8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_ADC_Start+0x198>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d11b      	bne.n	80011a8 <HAL_ADC_Start+0x174>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	e00b      	b.n	80011a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f043 0210 	orr.w	r2, r3, #16
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	fffff8fe 	.word	0xfffff8fe
 80011c4:	40012300 	.word	0x40012300
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40012200 	.word	0x40012200

080011d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d113      	bne.n	8001216 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d10b      	bne.n	8001216 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f043 0220 	orr.w	r2, r3, #32
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e063      	b.n	80012de <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001216:	f7ff febd 	bl	8000f94 <HAL_GetTick>
 800121a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800121c:	e021      	b.n	8001262 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d01d      	beq.n	8001262 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_ADC_PollForConversion+0x6c>
 800122c:	f7ff feb2 	bl	8000f94 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d212      	bcs.n	8001262 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b02      	cmp	r3, #2
 8001248:	d00b      	beq.n	8001262 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f043 0204 	orr.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e03d      	b.n	80012de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b02      	cmp	r3, #2
 800126e:	d1d6      	bne.n	800121e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f06f 0212 	mvn.w	r2, #18
 8001278:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d123      	bne.n	80012dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11f      	bne.n	80012dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d111      	bne.n	80012dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1c>
 8001318:	2302      	movs	r3, #2
 800131a:	e136      	b.n	800158a <HAL_ADC_ConfigChannel+0x28a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d93a      	bls.n	80013a2 <HAL_ADC_ConfigChannel+0xa2>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001334:	d035      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68d9      	ldr	r1, [r3, #12]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3b1e      	subs	r3, #30
 800134c:	2207      	movs	r2, #7
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	400a      	ands	r2, r1
 800135a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a8d      	ldr	r2, [pc, #564]	; (8001598 <HAL_ADC_ConfigChannel+0x298>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10a      	bne.n	800137c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68d9      	ldr	r1, [r3, #12]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	061a      	lsls	r2, r3, #24
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800137a:	e035      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68d9      	ldr	r1, [r3, #12]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4403      	add	r3, r0
 8001394:	3b1e      	subs	r3, #30
 8001396:	409a      	lsls	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a0:	e022      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6919      	ldr	r1, [r3, #16]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	2207      	movs	r2, #7
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43da      	mvns	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6919      	ldr	r1, [r3, #16]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	4603      	mov	r3, r0
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4403      	add	r3, r0
 80013de:	409a      	lsls	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	d824      	bhi.n	800143a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b05      	subs	r3, #5
 8001402:	221f      	movs	r2, #31
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43da      	mvns	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3b05      	subs	r3, #5
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
 8001438:	e04c      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d824      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b23      	subs	r3, #35	; 0x23
 8001454:	221f      	movs	r2, #31
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b23      	subs	r3, #35	; 0x23
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
 800148a:	e023      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3b41      	subs	r3, #65	; 0x41
 800149e:	221f      	movs	r2, #31
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43da      	mvns	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	400a      	ands	r2, r1
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b41      	subs	r3, #65	; 0x41
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a30      	ldr	r2, [pc, #192]	; (800159c <HAL_ADC_ConfigChannel+0x29c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10a      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1f4>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014e6:	d105      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a2c      	ldr	r2, [pc, #176]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80014ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <HAL_ADC_ConfigChannel+0x29c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d10f      	bne.n	800151e <HAL_ADC_ConfigChannel+0x21e>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b12      	cmp	r3, #18
 8001504:	d10b      	bne.n	800151e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a25      	ldr	r2, [pc, #148]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800150c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001510:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_ADC_ConfigChannel+0x29c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d12b      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x280>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <HAL_ADC_ConfigChannel+0x298>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_ADC_ConfigChannel+0x23a>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b11      	cmp	r3, #17
 8001538:	d122      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001540:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001544:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800154c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001550:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_ADC_ConfigChannel+0x298>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9a      	lsrs	r2, r3, #18
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001572:	e002      	b.n	800157a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f9      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	10000012 	.word	0x10000012
 800159c:	40012000 	.word	0x40012000
 80015a0:	40012300 	.word	0x40012300
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015b4:	4b78      	ldr	r3, [pc, #480]	; (8001798 <ADC_Init+0x1ec>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a77      	ldr	r2, [pc, #476]	; (8001798 <ADC_Init+0x1ec>)
 80015ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <ADC_Init+0x1ec>)
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4973      	ldr	r1, [pc, #460]	; (8001798 <ADC_Init+0x1ec>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	4a58      	ldr	r2, [pc, #352]	; (800179c <ADC_Init+0x1f0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d022      	beq.n	8001686 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800164e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6899      	ldr	r1, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e00f      	b.n	80016a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0202 	bic.w	r2, r2, #2
 80016b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6899      	ldr	r1, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	005a      	lsls	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01b      	beq.n	800170c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	3b01      	subs	r3, #1
 8001700:	035a      	lsls	r2, r3, #13
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	e007      	b.n	800171c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	3b01      	subs	r3, #1
 8001738:	051a      	lsls	r2, r3, #20
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800175e:	025a      	lsls	r2, r3, #9
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	029a      	lsls	r2, r3, #10
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40012300 	.word	0x40012300
 800179c:	0f000001 	.word	0x0f000001

080017a0 <__NVIC_SetPriorityGrouping>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00
 80017e4:	05fa0000 	.word	0x05fa0000

080017e8 <__NVIC_GetPriorityGrouping>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff4c 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001922:	f7ff ff61 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff ffb1 	bl	8001894 <NVIC_EncodePriority>
 8001932:	4602      	mov	r2, r0
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff80 	bl	8001840 <__NVIC_SetPriority>
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff54 	bl	8001804 <__NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e175      	b.n	8001c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8164 	bne.w	8001c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x56>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80be 	beq.w	8001c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d037      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	e012      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	e010      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae86 	bls.w	8001984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d00:	887a      	ldrh	r2, [r7, #2]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	041a      	lsls	r2, r3, #16
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	400b      	ands	r3, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d52:	f7ff f91f 	bl	8000f94 <HAL_GetTick>
 8001d56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d58:	e009      	b.n	8001d6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d5a:	f7ff f91b 	bl	8000f94 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d68:	d901      	bls.n	8001d6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e022      	b.n	8001db4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d88:	f7ff f904 	bl	8000f94 <HAL_GetTick>
 8001d8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d8e:	e009      	b.n	8001da4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d90:	f7ff f900 	bl	8000f94 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d9e:	d901      	bls.n	8001da4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e007      	b.n	8001db4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001db0:	d1ee      	bne.n	8001d90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e29b      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df4:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62>
 8001e00:	4b90      	ldr	r3, [pc, #576]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x130>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d168      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e275      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x7a>
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a83      	ldr	r2, [pc, #524]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e02e      	b.n	8001e9c <HAL_RCC_OscConfig+0xd8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x9c>
 8001e46:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7e      	ldr	r2, [pc, #504]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xd8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b73      	ldr	r3, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a72      	ldr	r2, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xd8>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f876 	bl	8000f94 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f872 	bl	8000f94 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e229      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f862 	bl	8000f94 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f85e 	bl	8000f94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e215      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x110>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d069      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f02:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x190>
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1e9      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	493d      	ldr	r1, [pc, #244]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e040      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a38      	ldr	r2, [pc, #224]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f814 	bl	8000f94 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff f810 	bl	8000f94 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1c7      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4929      	ldr	r1, [pc, #164]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fff0 	bl	8000f94 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ffec 	bl	8000f94 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1a3      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d038      	beq.n	8002054 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe ffcd 	bl	8000f94 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7fe ffc9 	bl	8000f94 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e180      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x23a>
 800201c:	e01a      	b.n	8002054 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x280>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7fe ffb3 	bl	8000f94 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002032:	f7fe ffaf 	bl	8000f94 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d903      	bls.n	8002048 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e166      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
 8002044:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a4 	beq.w	80021aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a88      	ldr	r2, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b86      	ldr	r3, [pc, #536]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208a:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002096:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe ff77 	bl	8000f94 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7fe ff73 	bl	8000f94 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e12a      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x31a>
 80020d0:	4b70      	ldr	r3, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a6f      	ldr	r2, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	e02d      	b.n	800213a <HAL_RCC_OscConfig+0x376>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x33c>
 80020e6:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x376>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x35e>
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a61      	ldr	r2, [pc, #388]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a5e      	ldr	r2, [pc, #376]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x376>
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a5b      	ldr	r2, [pc, #364]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe ff27 	bl	8000f94 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe ff23 	bl	8000f94 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0d8      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x386>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe ff11 	bl	8000f94 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe ff0d 	bl	8000f94 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0c2      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80ae 	beq.w	8002310 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d06d      	beq.n	800229c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d14b      	bne.n	8002260 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fede 	bl	8000f94 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe feda 	bl	8000f94 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e091      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	071b      	lsls	r3, r3, #28
 8002226:	491b      	ldr	r1, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe feac 	bl	8000f94 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fea8 	bl	8000f94 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e05f      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x47c>
 800225e:	e057      	b.n	8002310 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fe92 	bl	8000f94 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fe8e 	bl	8000f94 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e045      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x4b0>
 8002292:	e03d      	b.n	8002310 <HAL_RCC_OscConfig+0x54c>
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x558>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d030      	beq.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d129      	bne.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d122      	bne.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d119      	bne.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d10f      	bne.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 020f 	bic.w	r2, r3, #15
 800234e:	4965      	ldr	r1, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7fe fdbe 	bl	8000f94 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7fe fdba 	bl	8000f94 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 020f 	bic.w	r2, r3, #15
 800245a:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fbe0 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08007bb8 	.word	0x08007bb8
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b094      	sub	sp, #80	; 0x50
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	647b      	str	r3, [r7, #68]	; 0x44
 8002504:	2300      	movs	r3, #0
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002508:	2300      	movs	r3, #0
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d00d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x40>
 800251c:	2b08      	cmp	r3, #8
 800251e:	f200 80e1 	bhi.w	80026e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x3a>
 800252a:	e0db      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002530:	e0db      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_GetSysClockFreq+0x208>)
 8002534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002536:	e0d8      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002542:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
 8002558:	63fa      	str	r2, [r7, #60]	; 0x3c
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
 8002566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800256a:	4622      	mov	r2, r4
 800256c:	462b      	mov	r3, r5
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	0159      	lsls	r1, r3, #5
 8002578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257c:	0150      	lsls	r0, r2, #5
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4621      	mov	r1, r4
 8002584:	1a51      	subs	r1, r2, r1
 8002586:	6139      	str	r1, [r7, #16]
 8002588:	4629      	mov	r1, r5
 800258a:	eb63 0301 	sbc.w	r3, r3, r1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800259c:	4659      	mov	r1, fp
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a6:	4651      	mov	r1, sl
 80025a8:	018a      	lsls	r2, r1, #6
 80025aa:	4651      	mov	r1, sl
 80025ac:	ebb2 0801 	subs.w	r8, r2, r1
 80025b0:	4659      	mov	r1, fp
 80025b2:	eb63 0901 	sbc.w	r9, r3, r1
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ca:	4690      	mov	r8, r2
 80025cc:	4699      	mov	r9, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	eb18 0303 	adds.w	r3, r8, r3
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	462b      	mov	r3, r5
 80025d8:	eb49 0303 	adc.w	r3, r9, r3
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ea:	4629      	mov	r1, r5
 80025ec:	024b      	lsls	r3, r1, #9
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f4:	4621      	mov	r1, r4
 80025f6:	024a      	lsls	r2, r1, #9
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fe:	2200      	movs	r2, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
 8002602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002608:	f7fd fe6a 	bl	80002e0 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4613      	mov	r3, r2
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002614:	e058      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	2200      	movs	r2, #0
 800261e:	4618      	mov	r0, r3
 8002620:	4611      	mov	r1, r2
 8002622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
 800262c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	f04f 0000 	mov.w	r0, #0
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	0159      	lsls	r1, r3, #5
 800263e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002642:	0150      	lsls	r0, r2, #5
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4641      	mov	r1, r8
 800264a:	ebb2 0a01 	subs.w	sl, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb63 0b01 	sbc.w	fp, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002668:	ebb2 040a 	subs.w	r4, r2, sl
 800266c:	eb63 050b 	sbc.w	r5, r3, fp
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	00eb      	lsls	r3, r5, #3
 800267a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	4643      	mov	r3, r8
 8002686:	18e3      	adds	r3, r4, r3
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	464b      	mov	r3, r9
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269e:	4629      	mov	r1, r5
 80026a0:	028b      	lsls	r3, r1, #10
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a8:	4621      	mov	r1, r4
 80026aa:	028a      	lsls	r2, r1, #10
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b2:	2200      	movs	r2, #0
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	61fa      	str	r2, [r7, #28]
 80026b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026bc:	f7fd fe10 	bl	80002e0 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4613      	mov	r3, r2
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetSysClockFreq+0x204>)
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3750      	adds	r7, #80	; 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	08007bc8 	.word	0x08007bc8

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffdc 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08007bc8 	.word	0x08007bc8

0800276c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	220f      	movs	r2, #15
 800277a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_GetClockConfig+0x5c>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_RCC_GetClockConfig+0x5c>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCC_GetClockConfig+0x60>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027f8:	4b69      	ldr	r3, [pc, #420]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a68      	ldr	r2, [pc, #416]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002802:	6093      	str	r3, [r2, #8]
 8002804:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	4964      	ldr	r1, [pc, #400]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	4959      	ldr	r1, [pc, #356]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d017      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002866:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800286c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	494a      	ldr	r1, [pc, #296]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002884:	d101      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 808b 	beq.w	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028cc:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe fb5c 	bl	8000f94 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fb58 	bl	8000f94 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e38f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d035      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d02e      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002924:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d114      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fb20 	bl	8000f94 <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fb1c 	bl	8000f94 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e351      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002986:	d111      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002996:	400b      	ands	r3, r1
 8002998:	4901      	ldr	r1, [pc, #4]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
 800299e:	e00b      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000
 80029a8:	0ffffcff 	.word	0x0ffffcff
 80029ac:	4bac      	ldr	r3, [pc, #688]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4aab      	ldr	r2, [pc, #684]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029b6:	6093      	str	r3, [r2, #8]
 80029b8:	4ba9      	ldr	r3, [pc, #676]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	49a6      	ldr	r1, [pc, #664]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029d6:	4ba2      	ldr	r3, [pc, #648]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029dc:	4aa0      	ldr	r2, [pc, #640]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029e6:	4b9e      	ldr	r3, [pc, #632]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	499b      	ldr	r1, [pc, #620]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a12:	4993      	ldr	r1, [pc, #588]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a26:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	498a      	ldr	r1, [pc, #552]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a48:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a56:	4982      	ldr	r1, [pc, #520]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4979      	ldr	r1, [pc, #484]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a8c:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4971      	ldr	r1, [pc, #452]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aae:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f023 020c 	bic.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abc:	4968      	ldr	r1, [pc, #416]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ad0:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4960      	ldr	r1, [pc, #384]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	4957      	ldr	r1, [pc, #348]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b14:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	494f      	ldr	r1, [pc, #316]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	4946      	ldr	r1, [pc, #280]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	493e      	ldr	r1, [pc, #248]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b88:	4935      	ldr	r1, [pc, #212]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002baa:	492d      	ldr	r1, [pc, #180]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d011      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bcc:	4924      	ldr	r1, [pc, #144]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	4914      	ldr	r1, [pc, #80]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c30:	490b      	ldr	r1, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c54:	4902      	ldr	r1, [pc, #8]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c70:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	4986      	ldr	r1, [pc, #536]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c94:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	497d      	ldr	r1, [pc, #500]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d006      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80d6 	beq.w	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc0:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a75      	ldr	r2, [pc, #468]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe f962 	bl	8000f94 <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cd4:	f7fe f95e 	bl	8000f94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e195      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d021      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11d      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1a:	0e1b      	lsrs	r3, r3, #24
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	019a      	lsls	r2, r3, #6
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	071b      	lsls	r3, r3, #28
 8002d3a:	4958      	ldr	r1, [pc, #352]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02e      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6c:	d129      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d6e:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	0f1b      	lsrs	r3, r3, #28
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	019a      	lsls	r2, r3, #6
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	071b      	lsls	r3, r3, #28
 8002da2:	493e      	ldr	r1, [pc, #248]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002daa:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db0:	f023 021f 	bic.w	r2, r3, #31
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	3b01      	subs	r3, #1
 8002dba:	4938      	ldr	r1, [pc, #224]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	0f1b      	lsrs	r3, r3, #28
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	019a      	lsls	r2, r3, #6
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	071b      	lsls	r3, r3, #28
 8002e02:	4926      	ldr	r1, [pc, #152]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d011      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e46:	f7fe f8a5 	bl	8000f94 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e4e:	f7fe f8a1 	bl	8000f94 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0d8      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	f040 80ce 	bne.w	8003010 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe f888 	bl	8000f94 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e88:	f7fe f884 	bl	8000f94 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d904      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0bb      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d0ec      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d02e      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12a      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ed6:	4b51      	ldr	r3, [pc, #324]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	0f1b      	lsrs	r3, r3, #28
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	019a      	lsls	r2, r3, #6
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	071b      	lsls	r3, r3, #28
 8002f0a:	4944      	ldr	r1, [pc, #272]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f12:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	3b01      	subs	r3, #1
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	493d      	ldr	r1, [pc, #244]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f40:	d11d      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	0e1b      	lsrs	r3, r3, #24
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	0f1b      	lsrs	r3, r3, #28
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	019a      	lsls	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	4929      	ldr	r1, [pc, #164]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d028      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f98:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	019a      	lsls	r2, r3, #6
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4911      	ldr	r1, [pc, #68]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fd ffd4 	bl	8000f94 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ff0:	f7fd ffd0 	bl	8000f94 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e007      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800300a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300e:	d1ef      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e049      	b.n	80030c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f841 	bl	80030ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 fa00 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e054      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d01d      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIM_Base_Start_IT+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d115      	bne.n	8003190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_TIM_Base_Start_IT+0xec>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d015      	beq.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d011      	beq.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	e008      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40010400 	.word	0x40010400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40001800 	.word	0x40001800
 80031d0:	00010007 	.word	0x00010007

080031d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0202 	mvn.w	r2, #2
 8003200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f905 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8f7 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f908 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0204 	mvn.w	r2, #4
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8db 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8cd 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8de 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0208 	mvn.w	r2, #8
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8b1 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8a3 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8b4 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d122      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d11b      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2208      	movs	r2, #8
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f887 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f879 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f88a 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0201 	mvn.w	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fbc0 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f91a 	bl	80035b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f90d 	bl	80035cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d10e      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d107      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f838 	bl	800344e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d10e      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d107      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f06f 0220 	mvn.w	r2, #32
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8cd 	bl	80035a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a40      	ldr	r2, [pc, #256]	; (8003578 <TIM_Base_SetConfig+0x114>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d00f      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3d      	ldr	r2, [pc, #244]	; (800357c <TIM_Base_SetConfig+0x118>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00b      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <TIM_Base_SetConfig+0x11c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <TIM_Base_SetConfig+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <TIM_Base_SetConfig+0x124>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <TIM_Base_SetConfig+0x114>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02b      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d027      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	; (800357c <TIM_Base_SetConfig+0x118>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d023      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <TIM_Base_SetConfig+0x11c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01f      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <TIM_Base_SetConfig+0x120>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01b      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a29      	ldr	r2, [pc, #164]	; (8003588 <TIM_Base_SetConfig+0x124>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d017      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <TIM_Base_SetConfig+0x128>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <TIM_Base_SetConfig+0x12c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0x130>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0x134>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a24      	ldr	r2, [pc, #144]	; (800359c <TIM_Base_SetConfig+0x138>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <TIM_Base_SetConfig+0x13c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <TIM_Base_SetConfig+0x114>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0xf8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <TIM_Base_SetConfig+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40010400 	.word	0x40010400
 800358c:	40014000 	.word	0x40014000
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800
 8003598:	40001800 	.word	0x40001800
 800359c:	40001c00 	.word	0x40001c00
 80035a0:	40002000 	.word	0x40002000

080035a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e040      	b.n	8003674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fae8 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f82c 	bl	800367c <UART_SetConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e022      	b.n	8003674 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa84 	bl	8003b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb0b 	bl	8003c88 <UART_CheckIdleState>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4ba6      	ldr	r3, [pc, #664]	; (8003940 <UART_SetConfig+0x2c4>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	6979      	ldr	r1, [r7, #20]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a94      	ldr	r2, [pc, #592]	; (8003944 <UART_SetConfig+0x2c8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d120      	bne.n	800373a <UART_SetConfig+0xbe>
 80036f8:	4b93      	ldr	r3, [pc, #588]	; (8003948 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b03      	cmp	r3, #3
 8003704:	d816      	bhi.n	8003734 <UART_SetConfig+0xb8>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x90>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003729 	.word	0x08003729
 8003714:	08003723 	.word	0x08003723
 8003718:	0800372f 	.word	0x0800372f
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e150      	b.n	80039c4 <UART_SetConfig+0x348>
 8003722:	2302      	movs	r3, #2
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e14d      	b.n	80039c4 <UART_SetConfig+0x348>
 8003728:	2304      	movs	r3, #4
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e14a      	b.n	80039c4 <UART_SetConfig+0x348>
 800372e:	2308      	movs	r3, #8
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e147      	b.n	80039c4 <UART_SetConfig+0x348>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e144      	b.n	80039c4 <UART_SetConfig+0x348>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a83      	ldr	r2, [pc, #524]	; (800394c <UART_SetConfig+0x2d0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d132      	bne.n	80037aa <UART_SetConfig+0x12e>
 8003744:	4b80      	ldr	r3, [pc, #512]	; (8003948 <UART_SetConfig+0x2cc>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d828      	bhi.n	80037a4 <UART_SetConfig+0x128>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0xdc>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	0800378d 	.word	0x0800378d
 800375c:	080037a5 	.word	0x080037a5
 8003760:	080037a5 	.word	0x080037a5
 8003764:	080037a5 	.word	0x080037a5
 8003768:	08003799 	.word	0x08003799
 800376c:	080037a5 	.word	0x080037a5
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080037a5 	.word	0x080037a5
 8003778:	08003793 	.word	0x08003793
 800377c:	080037a5 	.word	0x080037a5
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037a5 	.word	0x080037a5
 8003788:	0800379f 	.word	0x0800379f
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e118      	b.n	80039c4 <UART_SetConfig+0x348>
 8003792:	2302      	movs	r3, #2
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e115      	b.n	80039c4 <UART_SetConfig+0x348>
 8003798:	2304      	movs	r3, #4
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e112      	b.n	80039c4 <UART_SetConfig+0x348>
 800379e:	2308      	movs	r3, #8
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e10f      	b.n	80039c4 <UART_SetConfig+0x348>
 80037a4:	2310      	movs	r3, #16
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e10c      	b.n	80039c4 <UART_SetConfig+0x348>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a68      	ldr	r2, [pc, #416]	; (8003950 <UART_SetConfig+0x2d4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d120      	bne.n	80037f6 <UART_SetConfig+0x17a>
 80037b4:	4b64      	ldr	r3, [pc, #400]	; (8003948 <UART_SetConfig+0x2cc>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037be:	2b30      	cmp	r3, #48	; 0x30
 80037c0:	d013      	beq.n	80037ea <UART_SetConfig+0x16e>
 80037c2:	2b30      	cmp	r3, #48	; 0x30
 80037c4:	d814      	bhi.n	80037f0 <UART_SetConfig+0x174>
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d009      	beq.n	80037de <UART_SetConfig+0x162>
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d810      	bhi.n	80037f0 <UART_SetConfig+0x174>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <UART_SetConfig+0x15c>
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d006      	beq.n	80037e4 <UART_SetConfig+0x168>
 80037d6:	e00b      	b.n	80037f0 <UART_SetConfig+0x174>
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e0f2      	b.n	80039c4 <UART_SetConfig+0x348>
 80037de:	2302      	movs	r3, #2
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e0ef      	b.n	80039c4 <UART_SetConfig+0x348>
 80037e4:	2304      	movs	r3, #4
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e0ec      	b.n	80039c4 <UART_SetConfig+0x348>
 80037ea:	2308      	movs	r3, #8
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e0e9      	b.n	80039c4 <UART_SetConfig+0x348>
 80037f0:	2310      	movs	r3, #16
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e0e6      	b.n	80039c4 <UART_SetConfig+0x348>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a56      	ldr	r2, [pc, #344]	; (8003954 <UART_SetConfig+0x2d8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d120      	bne.n	8003842 <UART_SetConfig+0x1c6>
 8003800:	4b51      	ldr	r3, [pc, #324]	; (8003948 <UART_SetConfig+0x2cc>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800380a:	2bc0      	cmp	r3, #192	; 0xc0
 800380c:	d013      	beq.n	8003836 <UART_SetConfig+0x1ba>
 800380e:	2bc0      	cmp	r3, #192	; 0xc0
 8003810:	d814      	bhi.n	800383c <UART_SetConfig+0x1c0>
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d009      	beq.n	800382a <UART_SetConfig+0x1ae>
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d810      	bhi.n	800383c <UART_SetConfig+0x1c0>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0x1a8>
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d006      	beq.n	8003830 <UART_SetConfig+0x1b4>
 8003822:	e00b      	b.n	800383c <UART_SetConfig+0x1c0>
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e0cc      	b.n	80039c4 <UART_SetConfig+0x348>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e0c9      	b.n	80039c4 <UART_SetConfig+0x348>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e0c6      	b.n	80039c4 <UART_SetConfig+0x348>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e0c3      	b.n	80039c4 <UART_SetConfig+0x348>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e0c0      	b.n	80039c4 <UART_SetConfig+0x348>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a44      	ldr	r2, [pc, #272]	; (8003958 <UART_SetConfig+0x2dc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d125      	bne.n	8003898 <UART_SetConfig+0x21c>
 800384c:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <UART_SetConfig+0x2cc>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385a:	d017      	beq.n	800388c <UART_SetConfig+0x210>
 800385c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003860:	d817      	bhi.n	8003892 <UART_SetConfig+0x216>
 8003862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003866:	d00b      	beq.n	8003880 <UART_SetConfig+0x204>
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d811      	bhi.n	8003892 <UART_SetConfig+0x216>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <UART_SetConfig+0x1fe>
 8003872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003876:	d006      	beq.n	8003886 <UART_SetConfig+0x20a>
 8003878:	e00b      	b.n	8003892 <UART_SetConfig+0x216>
 800387a:	2300      	movs	r3, #0
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e0a1      	b.n	80039c4 <UART_SetConfig+0x348>
 8003880:	2302      	movs	r3, #2
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e09e      	b.n	80039c4 <UART_SetConfig+0x348>
 8003886:	2304      	movs	r3, #4
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e09b      	b.n	80039c4 <UART_SetConfig+0x348>
 800388c:	2308      	movs	r3, #8
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e098      	b.n	80039c4 <UART_SetConfig+0x348>
 8003892:	2310      	movs	r3, #16
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e095      	b.n	80039c4 <UART_SetConfig+0x348>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2f      	ldr	r2, [pc, #188]	; (800395c <UART_SetConfig+0x2e0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d125      	bne.n	80038ee <UART_SetConfig+0x272>
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <UART_SetConfig+0x2cc>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b0:	d017      	beq.n	80038e2 <UART_SetConfig+0x266>
 80038b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b6:	d817      	bhi.n	80038e8 <UART_SetConfig+0x26c>
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d00b      	beq.n	80038d6 <UART_SetConfig+0x25a>
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c2:	d811      	bhi.n	80038e8 <UART_SetConfig+0x26c>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x254>
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d006      	beq.n	80038dc <UART_SetConfig+0x260>
 80038ce:	e00b      	b.n	80038e8 <UART_SetConfig+0x26c>
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e076      	b.n	80039c4 <UART_SetConfig+0x348>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e073      	b.n	80039c4 <UART_SetConfig+0x348>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e070      	b.n	80039c4 <UART_SetConfig+0x348>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e06d      	b.n	80039c4 <UART_SetConfig+0x348>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e06a      	b.n	80039c4 <UART_SetConfig+0x348>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <UART_SetConfig+0x2e4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d138      	bne.n	800396a <UART_SetConfig+0x2ee>
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <UART_SetConfig+0x2cc>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003906:	d017      	beq.n	8003938 <UART_SetConfig+0x2bc>
 8003908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390c:	d82a      	bhi.n	8003964 <UART_SetConfig+0x2e8>
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	d00b      	beq.n	800392c <UART_SetConfig+0x2b0>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d824      	bhi.n	8003964 <UART_SetConfig+0x2e8>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <UART_SetConfig+0x2aa>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	d006      	beq.n	8003932 <UART_SetConfig+0x2b6>
 8003924:	e01e      	b.n	8003964 <UART_SetConfig+0x2e8>
 8003926:	2300      	movs	r3, #0
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e04b      	b.n	80039c4 <UART_SetConfig+0x348>
 800392c:	2302      	movs	r3, #2
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e048      	b.n	80039c4 <UART_SetConfig+0x348>
 8003932:	2304      	movs	r3, #4
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e045      	b.n	80039c4 <UART_SetConfig+0x348>
 8003938:	2308      	movs	r3, #8
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e042      	b.n	80039c4 <UART_SetConfig+0x348>
 800393e:	bf00      	nop
 8003940:	efff69f3 	.word	0xefff69f3
 8003944:	40011000 	.word	0x40011000
 8003948:	40023800 	.word	0x40023800
 800394c:	40004400 	.word	0x40004400
 8003950:	40004800 	.word	0x40004800
 8003954:	40004c00 	.word	0x40004c00
 8003958:	40005000 	.word	0x40005000
 800395c:	40011400 	.word	0x40011400
 8003960:	40007800 	.word	0x40007800
 8003964:	2310      	movs	r3, #16
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e02c      	b.n	80039c4 <UART_SetConfig+0x348>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <UART_SetConfig+0x4bc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d125      	bne.n	80039c0 <UART_SetConfig+0x344>
 8003974:	4b71      	ldr	r3, [pc, #452]	; (8003b3c <UART_SetConfig+0x4c0>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800397e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003982:	d017      	beq.n	80039b4 <UART_SetConfig+0x338>
 8003984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003988:	d817      	bhi.n	80039ba <UART_SetConfig+0x33e>
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	d00b      	beq.n	80039a8 <UART_SetConfig+0x32c>
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003994:	d811      	bhi.n	80039ba <UART_SetConfig+0x33e>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <UART_SetConfig+0x326>
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d006      	beq.n	80039ae <UART_SetConfig+0x332>
 80039a0:	e00b      	b.n	80039ba <UART_SetConfig+0x33e>
 80039a2:	2300      	movs	r3, #0
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e00d      	b.n	80039c4 <UART_SetConfig+0x348>
 80039a8:	2302      	movs	r3, #2
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e00a      	b.n	80039c4 <UART_SetConfig+0x348>
 80039ae:	2304      	movs	r3, #4
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e007      	b.n	80039c4 <UART_SetConfig+0x348>
 80039b4:	2308      	movs	r3, #8
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e004      	b.n	80039c4 <UART_SetConfig+0x348>
 80039ba:	2310      	movs	r3, #16
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e001      	b.n	80039c4 <UART_SetConfig+0x348>
 80039c0:	2310      	movs	r3, #16
 80039c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039cc:	d15b      	bne.n	8003a86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039ce:	7ffb      	ldrb	r3, [r7, #31]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d828      	bhi.n	8003a26 <UART_SetConfig+0x3aa>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x360>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a1f 	.word	0x08003a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7fe fe8c 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003a04:	61b8      	str	r0, [r7, #24]
        break;
 8003a06:	e013      	b.n	8003a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7fe fe9c 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e00f      	b.n	8003a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <UART_SetConfig+0x4c4>)
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e00c      	b.n	8003a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7fe fd6f 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003a1a:	61b8      	str	r0, [r7, #24]
        break;
 8003a1c:	e008      	b.n	8003a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	61bb      	str	r3, [r7, #24]
        break;
 8003a24:	e004      	b.n	8003a30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d074      	beq.n	8003b20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d916      	bls.n	8003a80 <UART_SetConfig+0x404>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d212      	bcs.n	8003a80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f023 030f 	bic.w	r3, r3, #15
 8003a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	89fb      	ldrh	r3, [r7, #14]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	89fa      	ldrh	r2, [r7, #14]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	e04f      	b.n	8003b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77bb      	strb	r3, [r7, #30]
 8003a84:	e04c      	b.n	8003b20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d828      	bhi.n	8003ade <UART_SetConfig+0x462>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0x418>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ac1 	.word	0x08003ac1
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003adf 	.word	0x08003adf
 8003aa4:	08003acf 	.word	0x08003acf
 8003aa8:	08003adf 	.word	0x08003adf
 8003aac:	08003adf 	.word	0x08003adf
 8003ab0:	08003adf 	.word	0x08003adf
 8003ab4:	08003ad7 	.word	0x08003ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7fe fe30 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003abc:	61b8      	str	r0, [r7, #24]
        break;
 8003abe:	e013      	b.n	8003ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f7fe fe40 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003ac4:	61b8      	str	r0, [r7, #24]
        break;
 8003ac6:	e00f      	b.n	8003ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <UART_SetConfig+0x4c4>)
 8003aca:	61bb      	str	r3, [r7, #24]
        break;
 8003acc:	e00c      	b.n	8003ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ace:	f7fe fd13 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003ad2:	61b8      	str	r0, [r7, #24]
        break;
 8003ad4:	e008      	b.n	8003ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ada:	61bb      	str	r3, [r7, #24]
        break;
 8003adc:	e004      	b.n	8003ae8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085a      	lsrs	r2, r3, #1
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d909      	bls.n	8003b1c <UART_SetConfig+0x4a0>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d205      	bcs.n	8003b1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e001      	b.n	8003b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40007c00 	.word	0x40007c00
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	00f42400 	.word	0x00f42400

08003b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c42:	d10a      	bne.n	8003c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c98:	f7fd f97c 	bl	8000f94 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d10e      	bne.n	8003cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f831 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e027      	b.n	8003d1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d10e      	bne.n	8003cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f81b 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e011      	b.n	8003d1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b09c      	sub	sp, #112	; 0x70
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e0a7      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	f000 80a3 	beq.w	8003e84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd f929 	bl	8000f94 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d13f      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d68:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e6      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e068      	b.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d050      	beq.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df0:	d148      	bne.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e4e:	623a      	str	r2, [r7, #32]
 8003e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	69f9      	ldr	r1, [r7, #28]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e010      	b.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	f43f af48 	beq.w	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3770      	adds	r7, #112	; 0x70
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec2:	f3ef 8305 	mrs	r3, IPSR
 8003ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eda:	f3ef 8311 	mrs	r3, BASEPRI
 8003ede:	603b      	str	r3, [r7, #0]
  return(result);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <osKernelInitialize+0x3a>
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <osKernelInitialize+0x64>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d103      	bne.n	8003ef6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003eee:	f06f 0305 	mvn.w	r3, #5
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e00c      	b.n	8003f10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <osKernelInitialize+0x64>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <osKernelInitialize+0x64>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e002      	b.n	8003f10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f10:	68fb      	ldr	r3, [r7, #12]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200001c0 	.word	0x200001c0

08003f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2a:	f3ef 8305 	mrs	r3, IPSR
 8003f2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f42:	f3ef 8311 	mrs	r3, BASEPRI
 8003f46:	603b      	str	r3, [r7, #0]
  return(result);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <osKernelStart+0x3a>
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <osKernelStart+0x68>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d103      	bne.n	8003f5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f56:	f06f 0305 	mvn.w	r3, #5
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e010      	b.n	8003f80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <osKernelStart+0x68>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d109      	bne.n	8003f7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f66:	f7ff ffa2 	bl	8003eae <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <osKernelStart+0x68>)
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f70:	f001 f8ca 	bl	8005108 <vTaskStartScheduler>
      stat = osOK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e002      	b.n	8003f80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200001c0 	.word	0x200001c0

08003f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b090      	sub	sp, #64	; 0x40
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa0:	f3ef 8305 	mrs	r3, IPSR
 8003fa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fa6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 808f 	bne.w	80040cc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fba:	f3ef 8311 	mrs	r3, BASEPRI
 8003fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <osThreadNew+0x3e>
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <osThreadNew+0x148>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d07e      	beq.n	80040cc <osThreadNew+0x13c>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d07b      	beq.n	80040cc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003fd8:	2318      	movs	r3, #24
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d045      	beq.n	8004078 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <osThreadNew+0x6a>
        name = attr->name;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <osThreadNew+0x90>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2b38      	cmp	r3, #56	; 0x38
 8004012:	d805      	bhi.n	8004020 <osThreadNew+0x90>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <osThreadNew+0x94>
        return (NULL);
 8004020:	2300      	movs	r3, #0
 8004022:	e054      	b.n	80040ce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <osThreadNew+0xca>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2bbb      	cmp	r3, #187	; 0xbb
 8004042:	d90a      	bls.n	800405a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <osThreadNew+0xca>
        mem = 1;
 8004054:	2301      	movs	r3, #1
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	e010      	b.n	800407c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <osThreadNew+0xec>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <osThreadNew+0xec>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <osThreadNew+0xec>
          mem = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	e001      	b.n	800407c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d110      	bne.n	80040a4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800408a:	9202      	str	r2, [sp, #8]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fe3f 	bl	8004d1c <xTaskCreateStatic>
 800409e:	4603      	mov	r3, r0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e013      	b.n	80040cc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d110      	bne.n	80040cc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f107 0310 	add.w	r3, r7, #16
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fe90 	bl	8004de2 <xTaskCreate>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d001      	beq.n	80040cc <osThreadNew+0x13c>
          hTask = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040cc:	693b      	ldr	r3, [r7, #16]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3730      	adds	r7, #48	; 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200001c0 	.word	0x200001c0

080040dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e4:	f3ef 8305 	mrs	r3, IPSR
 80040e8:	613b      	str	r3, [r7, #16]
  return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10f      	bne.n	8004110 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f0:	f3ef 8310 	mrs	r3, PRIMASK
 80040f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004100:	60bb      	str	r3, [r7, #8]
  return(result);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <osDelay+0x3c>
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <osDelay+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d103      	bne.n	8004118 <osDelay+0x3c>
    stat = osErrorISR;
 8004110:	f06f 0305 	mvn.w	r3, #5
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e007      	b.n	8004128 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 ffba 	bl	800509c <vTaskDelay>
    }
  }

  return (stat);
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200001c0 	.word	0x200001c0

08004138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <vApplicationGetIdleTaskMemory+0x2c>)
 8004148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4a06      	ldr	r2, [pc, #24]	; (8004168 <vApplicationGetIdleTaskMemory+0x30>)
 800414e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	200001c4 	.word	0x200001c4
 8004168:	20000280 	.word	0x20000280

0800416c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <vApplicationGetTimerTaskMemory+0x2c>)
 800417c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4a06      	ldr	r2, [pc, #24]	; (800419c <vApplicationGetTimerTaskMemory+0x30>)
 8004182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	20000480 	.word	0x20000480
 800419c:	2000053c 	.word	0x2000053c

080041a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0208 	add.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f103 0208 	add.w	r2, r3, #8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f103 0208 	add.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d103      	bne.n	8004262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e00c      	b.n	800427c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3308      	adds	r3, #8
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e002      	b.n	8004270 <vListInsert+0x2e>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	d2f6      	bcs.n	800426a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6852      	ldr	r2, [r2, #4]
 80042d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d103      	bne.n	80042e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1e5a      	subs	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	b672      	cpsid	i
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	b662      	cpsie	i
 8004330:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004336:	f002 f8a9 	bl	800648c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	3b01      	subs	r3, #1
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d114      	bne.n	80043b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3310      	adds	r3, #16
 8004398:	4618      	mov	r0, r3
 800439a:	f001 f95d 	bl	8005658 <xTaskRemoveFromEventList>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <xQueueGenericReset+0xd0>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	e009      	b.n	80043ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3310      	adds	r3, #16
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fef0 	bl	80041a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff feeb 	bl	80041a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043ca:	f002 f893 	bl	80064f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043ce:	2301      	movs	r3, #1
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10c      	bne.n	800440a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	b672      	cpsid	i
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	b662      	cpsie	i
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10c      	bne.n	800442a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	b672      	cpsid	i
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	b662      	cpsie	i
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <xQueueGenericCreateStatic+0x5a>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <xQueueGenericCreateStatic+0x5e>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueGenericCreateStatic+0x60>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	b672      	cpsid	i
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	b662      	cpsie	i
 8004454:	623b      	str	r3, [r7, #32]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <xQueueGenericCreateStatic+0x8a>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xQueueGenericCreateStatic+0x8e>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueGenericCreateStatic+0x90>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	b672      	cpsid	i
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	b662      	cpsie	i
 8004484:	61fb      	str	r3, [r7, #28]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800448a:	2350      	movs	r3, #80	; 0x50
 800448c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d00c      	beq.n	80044ae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	61bb      	str	r3, [r7, #24]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f805 	bl	80044e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	3730      	adds	r7, #48	; 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e002      	b.n	8004502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800450e:	2101      	movs	r1, #1
 8004510:	69b8      	ldr	r0, [r7, #24]
 8004512:	f7ff fef9 	bl	8004308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <xQueueGenericSend+0x36>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	b672      	cpsid	i
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	b662      	cpsie	i
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <xQueueGenericSend+0x44>
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <xQueueGenericSend+0x48>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <xQueueGenericSend+0x4a>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <xQueueGenericSend+0x68>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	b672      	cpsid	i
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	b662      	cpsie	i
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x76>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x7a>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x7c>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <xQueueGenericSend+0x9a>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	623b      	str	r3, [r7, #32]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045c2:	f001 fa13 	bl	80059ec <xTaskGetSchedulerState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <xQueueGenericSend+0xaa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xQueueGenericSend+0xae>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueGenericSend+0xb0>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10c      	bne.n	80045f6 <xQueueGenericSend+0xce>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	b672      	cpsid	i
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	b662      	cpsie	i
 80045f0:	61fb      	str	r3, [r7, #28]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045f6:	f001 ff49 	bl	800648c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <xQueueGenericSend+0xe4>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d129      	bne.n	8004660 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004612:	f000 fa15 	bl	8004a40 <prvCopyDataToQueue>
 8004616:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d010      	beq.n	8004642 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	3324      	adds	r3, #36	; 0x24
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f817 	bl	8005658 <xTaskRemoveFromEventList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004630:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <xQueueGenericSend+0x208>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	e00a      	b.n	8004658 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <xQueueGenericSend+0x208>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004658:	f001 ff4c 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 800465c:	2301      	movs	r3, #1
 800465e:	e063      	b.n	8004728 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004666:	f001 ff45 	bl	80064f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800466a:	2300      	movs	r3, #0
 800466c:	e05c      	b.n	8004728 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f853 	bl	8005724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004682:	f001 ff37 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004686:	f000 fdb3 	bl	80051f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800468a:	f001 feff 	bl	800648c <vPortEnterCritical>
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004694:	b25b      	sxtb	r3, r3
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d103      	bne.n	80046a4 <xQueueGenericSend+0x17c>
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x192>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ba:	f001 ff1b 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046be:	1d3a      	adds	r2, r7, #4
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f842 	bl	8005750 <xTaskCheckForTimeOut>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d124      	bne.n	800471c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d4:	f000 faac 	bl	8004c30 <prvIsQueueFull>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	3310      	adds	r3, #16
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 ff62 	bl	80055b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ee:	f000 fa37 	bl	8004b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046f2:	f000 fd8b 	bl	800520c <xTaskResumeAll>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f47f af7c 	bne.w	80045f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <xQueueGenericSend+0x208>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	e772      	b.n	80045f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004712:	f000 fa25 	bl	8004b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004716:	f000 fd79 	bl	800520c <xTaskResumeAll>
 800471a:	e76c      	b.n	80045f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800471c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800471e:	f000 fa1f 	bl	8004b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004722:	f000 fd73 	bl	800520c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004728:	4618      	mov	r0, r3
 800472a:	3738      	adds	r7, #56	; 0x38
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08e      	sub	sp, #56	; 0x38
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10c      	bne.n	8004766 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	b672      	cpsid	i
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	b662      	cpsie	i
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <xQueueGenericSendFromISR+0x40>
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <xQueueGenericSendFromISR+0x44>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <xQueueGenericSendFromISR+0x46>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10c      	bne.n	8004798 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	b672      	cpsid	i
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	b662      	cpsie	i
 8004792:	623b      	str	r3, [r7, #32]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSendFromISR+0x72>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSendFromISR+0x76>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSendFromISR+0x78>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10c      	bne.n	80047ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	61fb      	str	r3, [r7, #28]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ca:	f001 ff47 	bl	800665c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ce:	f3ef 8211 	mrs	r2, BASEPRI
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	61ba      	str	r2, [r7, #24]
 80047e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <xQueueGenericSendFromISR+0xcc>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d12c      	bne.n	800485a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004810:	f000 f916 	bl	8004a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004814:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d112      	bne.n	8004844 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	3324      	adds	r3, #36	; 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 ff14 	bl	8005658 <xTaskRemoveFromEventList>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00e      	beq.n	8004854 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e007      	b.n	8004854 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004848:	3301      	adds	r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	b25a      	sxtb	r2, r3
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004854:	2301      	movs	r3, #1
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004858:	e001      	b.n	800485e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004868:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800486c:	4618      	mov	r0, r3
 800486e:	3738      	adds	r7, #56	; 0x38
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	; 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <xQueueReceive+0x34>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	b672      	cpsid	i
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	b662      	cpsie	i
 80048a2:	623b      	str	r3, [r7, #32]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <xQueueReceive+0x42>
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueReceive+0x46>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueReceive+0x48>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10c      	bne.n	80048da <xQueueReceive+0x66>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048da:	f001 f887 	bl	80059ec <xTaskGetSchedulerState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <xQueueReceive+0x76>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <xQueueReceive+0x7a>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueReceive+0x7c>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10c      	bne.n	800490e <xQueueReceive+0x9a>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	b672      	cpsid	i
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	b662      	cpsie	i
 8004908:	61bb      	str	r3, [r7, #24]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800490e:	f001 fdbd 	bl	800648c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01f      	beq.n	800495e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 f8f7 	bl	8004b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00f      	beq.n	8004956 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	3310      	adds	r3, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fe8c 	bl	8005658 <xTaskRemoveFromEventList>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <xQueueReceive+0x1c8>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004956:	f001 fdcd 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 800495a:	2301      	movs	r3, #1
 800495c:	e069      	b.n	8004a32 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004964:	f001 fdc6 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004968:	2300      	movs	r3, #0
 800496a:	e062      	b.n	8004a32 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004972:	f107 0310 	add.w	r3, r7, #16
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fed4 	bl	8005724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004980:	f001 fdb8 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004984:	f000 fc34 	bl	80051f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004988:	f001 fd80 	bl	800648c <vPortEnterCritical>
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004992:	b25b      	sxtb	r3, r3
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d103      	bne.n	80049a2 <xQueueReceive+0x12e>
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d103      	bne.n	80049b8 <xQueueReceive+0x144>
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b8:	f001 fd9c 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049bc:	1d3a      	adds	r2, r7, #4
 80049be:	f107 0310 	add.w	r3, r7, #16
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fec3 	bl	8005750 <xTaskCheckForTimeOut>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d123      	bne.n	8004a18 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d2:	f000 f917 	bl	8004c04 <prvIsQueueEmpty>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d017      	beq.n	8004a0c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	3324      	adds	r3, #36	; 0x24
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fde3 	bl	80055b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ec:	f000 f8b8 	bl	8004b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049f0:	f000 fc0c 	bl	800520c <xTaskResumeAll>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d189      	bne.n	800490e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <xQueueReceive+0x1c8>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	e780      	b.n	800490e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f000 f8a7 	bl	8004b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a12:	f000 fbfb 	bl	800520c <xTaskResumeAll>
 8004a16:	e77a      	b.n	800490e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1a:	f000 f8a1 	bl	8004b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a1e:	f000 fbf5 	bl	800520c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a24:	f000 f8ee 	bl	8004c04 <prvIsQueueEmpty>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f43f af6f 	beq.w	800490e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d14d      	bne.n	8004b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 ffdc 	bl	8005a28 <xTaskPriorityDisinherit>
 8004a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	e043      	b.n	8004b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d119      	bne.n	8004ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6858      	ldr	r0, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	f002 f931 	bl	8006cf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d32b      	bcc.n	8004b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	e026      	b.n	8004b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68d8      	ldr	r0, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	461a      	mov	r2, r3
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	f002 f917 	bl	8006cf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	425b      	negs	r3, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d207      	bcs.n	8004af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	425b      	negs	r3, r3
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d105      	bne.n	8004b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b0a:	697b      	ldr	r3, [r7, #20]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	441a      	add	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d303      	bcc.n	8004b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	461a      	mov	r2, r3
 8004b52:	6838      	ldr	r0, [r7, #0]
 8004b54:	f002 f8cd 	bl	8006cf2 <memcpy>
	}
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b68:	f001 fc90 	bl	800648c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b74:	e011      	b.n	8004b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd68 	bl	8005658 <xTaskRemoveFromEventList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b8e:	f000 fe45 	bl	800581c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dce9      	bgt.n	8004b76 <prvUnlockQueue+0x16>
 8004ba2:	e000      	b.n	8004ba6 <prvUnlockQueue+0x46>
					break;
 8004ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	22ff      	movs	r2, #255	; 0xff
 8004baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bae:	f001 fca1 	bl	80064f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bb2:	f001 fc6b 	bl	800648c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bbe:	e011      	b.n	8004be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3310      	adds	r3, #16
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fd43 	bl	8005658 <xTaskRemoveFromEventList>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bd8:	f000 fe20 	bl	800581c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bdc:	7bbb      	ldrb	r3, [r7, #14]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dce9      	bgt.n	8004bc0 <prvUnlockQueue+0x60>
 8004bec:	e000      	b.n	8004bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bf8:	f001 fc7c 	bl	80064f4 <vPortExitCritical>
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c0c:	f001 fc3e 	bl	800648c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e001      	b.n	8004c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c22:	f001 fc67 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004c26:	68fb      	ldr	r3, [r7, #12]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c38:	f001 fc28 	bl	800648c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d102      	bne.n	8004c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e001      	b.n	8004c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f001 fc4f 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e014      	b.n	8004c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c70:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <vQueueAddToRegistry+0x50>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c7c:	490c      	ldr	r1, [pc, #48]	; (8004cb0 <vQueueAddToRegistry+0x50>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <vQueueAddToRegistry+0x50>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c92:	e006      	b.n	8004ca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b07      	cmp	r3, #7
 8004c9e:	d9e7      	bls.n	8004c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000093c 	.word	0x2000093c

08004cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cc4:	f001 fbe2 	bl	800648c <vPortEnterCritical>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d103      	bne.n	8004cde <vQueueWaitForMessageRestricted+0x2a>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <vQueueWaitForMessageRestricted+0x40>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	f001 fbfe 	bl	80064f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3324      	adds	r3, #36	; 0x24
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fc77 	bl	80055fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff ff26 	bl	8004b60 <prvUnlockQueue>
	}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <xTaskCreateStatic+0x2e>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	b672      	cpsid	i
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	b662      	cpsie	i
 8004d44:	623b      	str	r3, [r7, #32]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <xTaskCreateStatic+0x4e>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	b672      	cpsid	i
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	b662      	cpsie	i
 8004d64:	61fb      	str	r3, [r7, #28]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d6a:	23bc      	movs	r3, #188	; 0xbc
 8004d6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2bbc      	cmp	r3, #188	; 0xbc
 8004d72:	d00c      	beq.n	8004d8e <xTaskCreateStatic+0x72>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	b672      	cpsid	i
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	b662      	cpsie	i
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <xTaskCreateStatic+0xb8>
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dae:	2300      	movs	r3, #0
 8004db0:	9303      	str	r3, [sp, #12]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	9302      	str	r3, [sp, #8]
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f850 	bl	8004e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dce:	f000 f8f5 	bl	8004fbc <prvAddNewTaskToReadyList>
 8004dd2:	e001      	b.n	8004dd8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dd8:	697b      	ldr	r3, [r7, #20]
	}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08c      	sub	sp, #48	; 0x30
 8004de6:	af04      	add	r7, sp, #16
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fc74 	bl	80066e4 <pvPortMalloc>
 8004dfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e04:	20bc      	movs	r0, #188	; 0xbc
 8004e06:	f001 fc6d 	bl	80066e4 <pvPortMalloc>
 8004e0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
 8004e18:	e005      	b.n	8004e26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f001 fd2c 	bl	8006878 <vPortFree>
 8004e20:	e001      	b.n	8004e26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f80e 	bl	8004e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e50:	69f8      	ldr	r0, [r7, #28]
 8004e52:	f000 f8b3 	bl	8004fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e002      	b.n	8004e62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e62:	69bb      	ldr	r3, [r7, #24]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	461a      	mov	r2, r3
 8004e84:	21a5      	movs	r1, #165	; 0xa5
 8004e86:	f001 ff42 	bl	8006d0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e94:	440b      	add	r3, r1
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	b672      	cpsid	i
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	b662      	cpsie	i
 8004ec2:	617b      	str	r3, [r7, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01f      	beq.n	8004f0e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e012      	b.n	8004efa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	7819      	ldrb	r1, [r3, #0]
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3334      	adds	r3, #52	; 0x34
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d9e9      	bls.n	8004ed4 <prvInitialiseNewTask+0x68>
 8004f00:	e000      	b.n	8004f04 <prvInitialiseNewTask+0x98>
			{
				break;
 8004f02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f0c:	e003      	b.n	8004f16 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2b37      	cmp	r3, #55	; 0x37
 8004f1a:	d901      	bls.n	8004f20 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f1c:	2337      	movs	r3, #55	; 0x37
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	2200      	movs	r2, #0
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	3304      	adds	r3, #4
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f952 	bl	80041e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	3318      	adds	r3, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff f94d 	bl	80041e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	3354      	adds	r3, #84	; 0x54
 8004f70:	2260      	movs	r2, #96	; 0x60
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 feca 	bl	8006d0e <memset>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <prvInitialiseNewTask+0x144>)
 8004f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <prvInitialiseNewTask+0x148>)
 8004f84:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <prvInitialiseNewTask+0x14c>)
 8004f8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	69b8      	ldr	r0, [r7, #24]
 8004f92:	f001 f96b 	bl	800626c <pxPortInitialiseStack>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08007bf0 	.word	0x08007bf0
 8004fb4:	08007c10 	.word	0x08007c10
 8004fb8:	08007bd0 	.word	0x08007bd0

08004fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f001 fa62 	bl	800648c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fda:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fe8:	f000 fc3c 	bl	8005864 <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <prvAddNewTaskToReadyList+0x74>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <prvAddNewTaskToReadyList+0xd8>)
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7ff f8d7 	bl	80041fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800504c:	f001 fa52 	bl	80064f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d207      	bcs.n	8005076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <prvAddNewTaskToReadyList+0xdc>)
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000e50 	.word	0x20000e50
 8005084:	2000097c 	.word	0x2000097c
 8005088:	20000e5c 	.word	0x20000e5c
 800508c:	20000e6c 	.word	0x20000e6c
 8005090:	20000e58 	.word	0x20000e58
 8005094:	20000980 	.word	0x20000980
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d019      	beq.n	80050e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <vTaskDelay+0x64>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <vTaskDelay+0x34>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	b672      	cpsid	i
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	b662      	cpsie	i
 80050ca:	60bb      	str	r3, [r7, #8]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80050d0:	f000 f88e 	bl	80051f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050d4:	2100      	movs	r1, #0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fd18 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050dc:	f000 f896 	bl	800520c <xTaskResumeAll>
 80050e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <vTaskDelay+0x68>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000e78 	.word	0x20000e78
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005116:	463a      	mov	r2, r7
 8005118:	1d39      	adds	r1, r7, #4
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff f80a 	bl	8004138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	9202      	str	r2, [sp, #8]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	2300      	movs	r3, #0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	460a      	mov	r2, r1
 8005136:	4926      	ldr	r1, [pc, #152]	; (80051d0 <vTaskStartScheduler+0xc8>)
 8005138:	4826      	ldr	r0, [pc, #152]	; (80051d4 <vTaskStartScheduler+0xcc>)
 800513a:	f7ff fdef 	bl	8004d1c <xTaskCreateStatic>
 800513e:	4603      	mov	r3, r0
 8005140:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <vTaskStartScheduler+0xd0>)
 8005142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <vTaskStartScheduler+0xd0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800514c:	2301      	movs	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e001      	b.n	8005156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800515c:	f000 fd2a 	bl	8005bb4 <xTimerCreateTimerTask>
 8005160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d11d      	bne.n	80051a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	b672      	cpsid	i
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	b662      	cpsie	i
 800517c:	613b      	str	r3, [r7, #16]
}
 800517e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005180:	4b16      	ldr	r3, [pc, #88]	; (80051dc <vTaskStartScheduler+0xd4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3354      	adds	r3, #84	; 0x54
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <vTaskStartScheduler+0xd8>)
 8005188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <vTaskStartScheduler+0xdc>)
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <vTaskStartScheduler+0xe0>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <vTaskStartScheduler+0xe4>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800519e:	f001 f8f7 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051a2:	e010      	b.n	80051c6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d10c      	bne.n	80051c6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	b672      	cpsid	i
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	b662      	cpsie	i
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <vTaskStartScheduler+0xbc>
}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	08007b58 	.word	0x08007b58
 80051d4:	08005835 	.word	0x08005835
 80051d8:	20000e74 	.word	0x20000e74
 80051dc:	2000097c 	.word	0x2000097c
 80051e0:	20000010 	.word	0x20000010
 80051e4:	20000e70 	.word	0x20000e70
 80051e8:	20000e5c 	.word	0x20000e5c
 80051ec:	20000e54 	.word	0x20000e54

080051f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <vTaskSuspendAll+0x18>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	4a03      	ldr	r2, [pc, #12]	; (8005208 <vTaskSuspendAll+0x18>)
 80051fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000e78 	.word	0x20000e78

0800520c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800521a:	4b43      	ldr	r3, [pc, #268]	; (8005328 <xTaskResumeAll+0x11c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <xTaskResumeAll+0x30>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	603b      	str	r3, [r7, #0]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800523c:	f001 f926 	bl	800648c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <xTaskResumeAll+0x11c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <xTaskResumeAll+0x11c>)
 8005248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <xTaskResumeAll+0x11c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d162      	bne.n	8005318 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005252:	4b36      	ldr	r3, [pc, #216]	; (800532c <xTaskResumeAll+0x120>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d05e      	beq.n	8005318 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525a:	e02f      	b.n	80052bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <xTaskResumeAll+0x124>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3318      	adds	r3, #24
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff f823 	bl	80042b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff f81e 	bl	80042b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <xTaskResumeAll+0x128>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d903      	bls.n	800528c <xTaskResumeAll+0x80>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <xTaskResumeAll+0x128>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <xTaskResumeAll+0x12c>)
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe ffa9 	bl	80041fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <xTaskResumeAll+0x130>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <xTaskResumeAll+0x134>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <xTaskResumeAll+0x124>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1cb      	bne.n	800525c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ca:	f000 fb6f 	bl	80059ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <xTaskResumeAll+0x138>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052da:	f000 f847 	bl	800536c <xTaskIncrementTick>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <xTaskResumeAll+0x134>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f1      	bne.n	80052da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <xTaskResumeAll+0x138>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xTaskResumeAll+0x134>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <xTaskResumeAll+0x13c>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005318:	f001 f8ec 	bl	80064f4 <vPortExitCritical>

	return xAlreadyYielded;
 800531c:	68bb      	ldr	r3, [r7, #8]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000e78 	.word	0x20000e78
 800532c:	20000e50 	.word	0x20000e50
 8005330:	20000e10 	.word	0x20000e10
 8005334:	20000e58 	.word	0x20000e58
 8005338:	20000980 	.word	0x20000980
 800533c:	2000097c 	.word	0x2000097c
 8005340:	20000e64 	.word	0x20000e64
 8005344:	20000e60 	.word	0x20000e60
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <xTaskGetTickCount+0x1c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005358:	687b      	ldr	r3, [r7, #4]
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000e54 	.word	0x20000e54

0800536c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005376:	4b50      	ldr	r3, [pc, #320]	; (80054b8 <xTaskIncrementTick+0x14c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 808b 	bne.w	8005496 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005380:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <xTaskIncrementTick+0x150>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005388:	4a4c      	ldr	r2, [pc, #304]	; (80054bc <xTaskIncrementTick+0x150>)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d122      	bne.n	80053da <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005394:	4b4a      	ldr	r3, [pc, #296]	; (80054c0 <xTaskIncrementTick+0x154>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00c      	beq.n	80053b8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	b672      	cpsid	i
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	b662      	cpsie	i
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskIncrementTick+0x4a>
 80053b8:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <xTaskIncrementTick+0x158>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <xTaskIncrementTick+0x158>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <xTaskIncrementTick+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <xTaskIncrementTick+0x15c>)
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f000 fae9 	bl	80059ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <xTaskIncrementTick+0x160>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d349      	bcc.n	8005478 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e4:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <xTaskIncrementTick+0x160>)
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	601a      	str	r2, [r3, #0]
					break;
 80053f6:	e03f      	b.n	8005478 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xTaskIncrementTick+0x154>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d203      	bcs.n	8005418 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <xTaskIncrementTick+0x160>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005416:	e02f      	b.n	8005478 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe ff49 	bl	80042b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3318      	adds	r3, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ff40 	bl	80042b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <xTaskIncrementTick+0x164>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <xTaskIncrementTick+0xdc>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <xTaskIncrementTick+0x164>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <xTaskIncrementTick+0x168>)
 8005456:	441a      	add	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fecb 	bl	80041fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <xTaskIncrementTick+0x16c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	429a      	cmp	r2, r3
 8005470:	d3b8      	bcc.n	80053e4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005476:	e7b5      	b.n	80053e4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005478:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <xTaskIncrementTick+0x16c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <xTaskIncrementTick+0x168>)
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d907      	bls.n	80054a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e004      	b.n	80054a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <xTaskIncrementTick+0x170>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <xTaskIncrementTick+0x170>)
 800549e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <xTaskIncrementTick+0x174>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054ac:	697b      	ldr	r3, [r7, #20]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000e78 	.word	0x20000e78
 80054bc:	20000e54 	.word	0x20000e54
 80054c0:	20000e08 	.word	0x20000e08
 80054c4:	20000e0c 	.word	0x20000e0c
 80054c8:	20000e68 	.word	0x20000e68
 80054cc:	20000e70 	.word	0x20000e70
 80054d0:	20000e58 	.word	0x20000e58
 80054d4:	20000980 	.word	0x20000980
 80054d8:	2000097c 	.word	0x2000097c
 80054dc:	20000e60 	.word	0x20000e60
 80054e0:	20000e64 	.word	0x20000e64

080054e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ea:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <vTaskSwitchContext+0xb4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <vTaskSwitchContext+0xb8>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054f8:	e048      	b.n	800558c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80054fa:	4b28      	ldr	r3, [pc, #160]	; (800559c <vTaskSwitchContext+0xb8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005500:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <vTaskSwitchContext+0xbc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e012      	b.n	800552e <vTaskSwitchContext+0x4a>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10c      	bne.n	8005528 <vTaskSwitchContext+0x44>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	b672      	cpsid	i
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	b662      	cpsie	i
 8005522:	607b      	str	r3, [r7, #4]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <vTaskSwitchContext+0x42>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3b01      	subs	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	491d      	ldr	r1, [pc, #116]	; (80055a4 <vTaskSwitchContext+0xc0>)
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0e2      	beq.n	8005508 <vTaskSwitchContext+0x24>
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <vTaskSwitchContext+0xc0>)
 800554e:	4413      	add	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	3308      	adds	r3, #8
 8005564:	429a      	cmp	r2, r3
 8005566:	d104      	bne.n	8005572 <vTaskSwitchContext+0x8e>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <vTaskSwitchContext+0xc4>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <vTaskSwitchContext+0xbc>)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <vTaskSwitchContext+0xc4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3354      	adds	r3, #84	; 0x54
 8005588:	4a08      	ldr	r2, [pc, #32]	; (80055ac <vTaskSwitchContext+0xc8>)
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20000e78 	.word	0x20000e78
 800559c:	20000e64 	.word	0x20000e64
 80055a0:	20000e58 	.word	0x20000e58
 80055a4:	20000980 	.word	0x20000980
 80055a8:	2000097c 	.word	0x2000097c
 80055ac:	20000010 	.word	0x20000010

080055b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10c      	bne.n	80055da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	60fb      	str	r3, [r7, #12]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <vTaskPlaceOnEventList+0x48>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3318      	adds	r3, #24
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fe fe2d 	bl	8004242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055e8:	2101      	movs	r1, #1
 80055ea:	6838      	ldr	r0, [r7, #0]
 80055ec:	f000 fa8e 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2000097c 	.word	0x2000097c

080055fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	b672      	cpsid	i
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	b662      	cpsie	i
 8005622:	617b      	str	r3, [r7, #20]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <vTaskPlaceOnEventListRestricted+0x58>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3318      	adds	r3, #24
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7fe fde2 	bl	80041fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
 8005640:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	68b8      	ldr	r0, [r7, #8]
 8005646:	f000 fa61 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
	}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000097c 	.word	0x2000097c

08005658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	b672      	cpsid	i
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	b662      	cpsie	i
 8005682:	60fb      	str	r3, [r7, #12]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	3318      	adds	r3, #24
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe fe11 	bl	80042b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005692:	4b1e      	ldr	r3, [pc, #120]	; (800570c <xTaskRemoveFromEventList+0xb4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11d      	bne.n	80056d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	3304      	adds	r3, #4
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fe08 	bl	80042b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <xTaskRemoveFromEventList+0xb8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d903      	bls.n	80056b8 <xTaskRemoveFromEventList+0x60>
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <xTaskRemoveFromEventList+0xb8>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <xTaskRemoveFromEventList+0xbc>)
 80056c6:	441a      	add	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f7fe fd93 	bl	80041fa <vListInsertEnd>
 80056d4:	e005      	b.n	80056e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	3318      	adds	r3, #24
 80056da:	4619      	mov	r1, r3
 80056dc:	480e      	ldr	r0, [pc, #56]	; (8005718 <xTaskRemoveFromEventList+0xc0>)
 80056de:	f7fe fd8c 	bl	80041fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <xTaskRemoveFromEventList+0xc4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d905      	bls.n	80056fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <xTaskRemoveFromEventList+0xc8>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e001      	b.n	8005700 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005700:	697b      	ldr	r3, [r7, #20]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000e78 	.word	0x20000e78
 8005710:	20000e58 	.word	0x20000e58
 8005714:	20000980 	.word	0x20000980
 8005718:	20000e10 	.word	0x20000e10
 800571c:	2000097c 	.word	0x2000097c
 8005720:	20000e64 	.word	0x20000e64

08005724 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <vTaskInternalSetTimeOutState+0x24>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <vTaskInternalSetTimeOutState+0x28>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	605a      	str	r2, [r3, #4]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000e68 	.word	0x20000e68
 800574c:	20000e54 	.word	0x20000e54

08005750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	b672      	cpsid	i
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	b662      	cpsie	i
 8005774:	613b      	str	r3, [r7, #16]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10c      	bne.n	800579a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	b672      	cpsid	i
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	b662      	cpsie	i
 8005794:	60fb      	str	r3, [r7, #12]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800579a:	f000 fe77 	bl	800648c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800579e:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <xTaskCheckForTimeOut+0xc4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d102      	bne.n	80057be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e023      	b.n	8005806 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <xTaskCheckForTimeOut+0xc8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d007      	beq.n	80057da <xTaskCheckForTimeOut+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e015      	b.n	8005806 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d20b      	bcs.n	80057fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff97 	bl	8005724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e004      	b.n	8005806 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005806:	f000 fe75 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000e54 	.word	0x20000e54
 8005818:	20000e68 	.word	0x20000e68

0800581c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <vTaskMissedYield+0x14>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000e64 	.word	0x20000e64

08005834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800583c:	f000 f852 	bl	80058e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <prvIdleTask+0x28>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d9f9      	bls.n	800583c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <prvIdleTask+0x2c>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005858:	e7f0      	b.n	800583c <prvIdleTask+0x8>
 800585a:	bf00      	nop
 800585c:	20000980 	.word	0x20000980
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	e00c      	b.n	800588a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <prvInitialiseTaskLists+0x60>)
 800587c:	4413      	add	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fc8e 	bl	80041a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3301      	adds	r3, #1
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b37      	cmp	r3, #55	; 0x37
 800588e:	d9ef      	bls.n	8005870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005890:	480d      	ldr	r0, [pc, #52]	; (80058c8 <prvInitialiseTaskLists+0x64>)
 8005892:	f7fe fc85 	bl	80041a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005896:	480d      	ldr	r0, [pc, #52]	; (80058cc <prvInitialiseTaskLists+0x68>)
 8005898:	f7fe fc82 	bl	80041a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800589c:	480c      	ldr	r0, [pc, #48]	; (80058d0 <prvInitialiseTaskLists+0x6c>)
 800589e:	f7fe fc7f 	bl	80041a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058a2:	480c      	ldr	r0, [pc, #48]	; (80058d4 <prvInitialiseTaskLists+0x70>)
 80058a4:	f7fe fc7c 	bl	80041a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058a8:	480b      	ldr	r0, [pc, #44]	; (80058d8 <prvInitialiseTaskLists+0x74>)
 80058aa:	f7fe fc79 	bl	80041a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <prvInitialiseTaskLists+0x78>)
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <prvInitialiseTaskLists+0x64>)
 80058b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <prvInitialiseTaskLists+0x7c>)
 80058b6:	4a05      	ldr	r2, [pc, #20]	; (80058cc <prvInitialiseTaskLists+0x68>)
 80058b8:	601a      	str	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000980 	.word	0x20000980
 80058c8:	20000de0 	.word	0x20000de0
 80058cc:	20000df4 	.word	0x20000df4
 80058d0:	20000e10 	.word	0x20000e10
 80058d4:	20000e24 	.word	0x20000e24
 80058d8:	20000e3c 	.word	0x20000e3c
 80058dc:	20000e08 	.word	0x20000e08
 80058e0:	20000e0c 	.word	0x20000e0c

080058e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ea:	e019      	b.n	8005920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058ec:	f000 fdce 	bl	800648c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <prvCheckTasksWaitingTermination+0x50>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fcd9 	bl	80042b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <prvCheckTasksWaitingTermination+0x54>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	4a0b      	ldr	r2, [pc, #44]	; (8005938 <prvCheckTasksWaitingTermination+0x54>)
 800590a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 8005914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005916:	f000 fded 	bl	80064f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f810 	bl	8005940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e1      	bne.n	80058ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000e24 	.word	0x20000e24
 8005938:	20000e50 	.word	0x20000e50
 800593c:	20000e38 	.word	0x20000e38

08005940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3354      	adds	r3, #84	; 0x54
 800594c:	4618      	mov	r0, r3
 800594e:	f001 faa1 	bl	8006e94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4618      	mov	r0, r3
 8005962:	f000 ff89 	bl	8006878 <vPortFree>
				vPortFree( pxTCB );
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 ff86 	bl	8006878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800596c:	e01a      	b.n	80059a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005974:	2b01      	cmp	r3, #1
 8005976:	d103      	bne.n	8005980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 ff7d 	bl	8006878 <vPortFree>
	}
 800597e:	e011      	b.n	80059a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005986:	2b02      	cmp	r3, #2
 8005988:	d00c      	beq.n	80059a4 <prvDeleteTCB+0x64>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	b672      	cpsid	i
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	b662      	cpsie	i
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <prvDeleteTCB+0x62>
	}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvResetNextTaskUnblockTime+0x38>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvResetNextTaskUnblockTime+0x3c>)
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059c4:	e008      	b.n	80059d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <prvResetNextTaskUnblockTime+0x38>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <prvResetNextTaskUnblockTime+0x3c>)
 80059d6:	6013      	str	r3, [r2, #0]
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20000e08 	.word	0x20000e08
 80059e8:	20000e70 	.word	0x20000e70

080059ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <xTaskGetSchedulerState+0x34>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059fa:	2301      	movs	r3, #1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	e008      	b.n	8005a12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <xTaskGetSchedulerState+0x38>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	e001      	b.n	8005a12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a12:	687b      	ldr	r3, [r7, #4]
	}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000e5c 	.word	0x20000e5c
 8005a24:	20000e78 	.word	0x20000e78

08005a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d05a      	beq.n	8005af4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a3e:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <xTaskPriorityDisinherit+0xd8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d00c      	beq.n	8005a62 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	b672      	cpsid	i
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	b662      	cpsie	i
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	b672      	cpsid	i
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	b662      	cpsie	i
 8005a7e:	60bb      	str	r3, [r7, #8]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d02c      	beq.n	8005af4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d128      	bne.n	8005af4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fc04 	bl	80042b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <xTaskPriorityDisinherit+0xdc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d903      	bls.n	8005ad4 <xTaskPriorityDisinherit+0xac>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <xTaskPriorityDisinherit+0xdc>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <xTaskPriorityDisinherit+0xe0>)
 8005ae2:	441a      	add	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7fe fb85 	bl	80041fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af4:	697b      	ldr	r3, [r7, #20]
	}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000097c 	.word	0x2000097c
 8005b04:	20000e58 	.word	0x20000e58
 8005b08:	20000980 	.word	0x20000980

08005b0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b16:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fbc6 	bl	80042b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d10a      	bne.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4819      	ldr	r0, [pc, #100]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b40:	f7fe fb5b 	bl	80041fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b44:	e026      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d209      	bcs.n	8005b72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7fe fb69 	bl	8004242 <vListInsert>
}
 8005b70:	e010      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fb5f 	bl	8004242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d202      	bcs.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000e54 	.word	0x20000e54
 8005ba0:	2000097c 	.word	0x2000097c
 8005ba4:	20000e3c 	.word	0x20000e3c
 8005ba8:	20000e0c 	.word	0x20000e0c
 8005bac:	20000e08 	.word	0x20000e08
 8005bb0:	20000e70 	.word	0x20000e70

08005bb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bbe:	f000 fb15 	bl	80061ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <xTimerCreateTimerTask+0x84>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d021      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bd2:	1d3a      	adds	r2, r7, #4
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fac5 	bl	800416c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2302      	movs	r3, #2
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	4911      	ldr	r1, [pc, #68]	; (8005c3c <xTimerCreateTimerTask+0x88>)
 8005bf6:	4812      	ldr	r0, [pc, #72]	; (8005c40 <xTimerCreateTimerTask+0x8c>)
 8005bf8:	f7ff f890 	bl	8004d1c <xTaskCreateStatic>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <xTimerCreateTimerTask+0x90>)
 8005c00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <xTimerCreateTimerTask+0x90>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10c      	bne.n	8005c2e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	b672      	cpsid	i
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	b662      	cpsie	i
 8005c28:	613b      	str	r3, [r7, #16]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005c2e:	697b      	ldr	r3, [r7, #20]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000eac 	.word	0x20000eac
 8005c3c:	08007b60 	.word	0x08007b60
 8005c40:	08005d85 	.word	0x08005d85
 8005c44:	20000eb0 	.word	0x20000eb0

08005c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10c      	bne.n	8005c7a <xTimerGenericCommand+0x32>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	b672      	cpsid	i
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	b662      	cpsie	i
 8005c74:	623b      	str	r3, [r7, #32]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <xTimerGenericCommand+0x9c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02a      	beq.n	8005cd8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	dc18      	bgt.n	8005cc6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c94:	f7ff feaa 	bl	80059ec <xTaskGetSchedulerState>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d109      	bne.n	8005cb2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xTimerGenericCommand+0x9c>)
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	f107 0110 	add.w	r1, r7, #16
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	f7fe fc3d 	bl	8004528 <xQueueGenericSend>
 8005cae:	6278      	str	r0, [r7, #36]	; 0x24
 8005cb0:	e012      	b.n	8005cd8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <xTimerGenericCommand+0x9c>)
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	f107 0110 	add.w	r1, r7, #16
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f7fe fc33 	bl	8004528 <xQueueGenericSend>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cc4:	e008      	b.n	8005cd8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <xTimerGenericCommand+0x9c>)
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f107 0110 	add.w	r1, r7, #16
 8005cce:	2300      	movs	r3, #0
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	f7fe fd2f 	bl	8004734 <xQueueGenericSendFromISR>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3728      	adds	r7, #40	; 0x28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000eac 	.word	0x20000eac

08005ce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf2:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <prvProcessExpiredTimer+0x98>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fad7 	bl	80042b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d024      	beq.n	8005d5e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	18d1      	adds	r1, r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f000 f8d3 	bl	8005ecc <prvInsertTimerInActiveList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d021      	beq.n	8005d70 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	2100      	movs	r1, #0
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f7ff ff86 	bl	8005c48 <xTimerGenericCommand>
 8005d3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d115      	bne.n	8005d70 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	4798      	blx	r3
}
 8005d78:	bf00      	nop
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000ea4 	.word	0x20000ea4

08005d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d8c:	f107 0308 	add.w	r3, r7, #8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f857 	bl	8005e44 <prvGetNextExpireTime>
 8005d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f803 	bl	8005da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005da2:	f000 f8d5 	bl	8005f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005da6:	e7f1      	b.n	8005d8c <prvTimerTask+0x8>

08005da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005db2:	f7ff fa1d 	bl	80051f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f866 	bl	8005e8c <prvSampleTimeNow>
 8005dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d130      	bne.n	8005e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d806      	bhi.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dd6:	f7ff fa19 	bl	800520c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff83 	bl	8005ce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005de2:	e024      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <prvProcessTimerOrBlockTask+0x90>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <prvProcessTimerOrBlockTask+0x50>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <prvProcessTimerOrBlockTask+0x52>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <prvProcessTimerOrBlockTask+0x94>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fe ff53 	bl	8004cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e0e:	f7ff f9fd 	bl	800520c <xTaskResumeAll>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <prvProcessTimerOrBlockTask+0x98>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
}
 8005e28:	e001      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e2a:	f7ff f9ef 	bl	800520c <xTaskResumeAll>
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000ea8 	.word	0x20000ea8
 8005e3c:	20000eac 	.word	0x20000eac
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <prvGetNextExpireTime+0x44>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <prvGetNextExpireTime+0x16>
 8005e56:	2201      	movs	r2, #1
 8005e58:	e000      	b.n	8005e5c <prvGetNextExpireTime+0x18>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e68:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <prvGetNextExpireTime+0x44>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e001      	b.n	8005e78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000ea4 	.word	0x20000ea4

08005e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e94:	f7ff fa5a 	bl	800534c <xTaskGetTickCount>
 8005e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <prvSampleTimeNow+0x3c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d205      	bcs.n	8005eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ea4:	f000 f93c 	bl	8006120 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eb6:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvSampleTimeNow+0x3c>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000eb4 	.word	0x20000eb4

08005ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d812      	bhi.n	8005f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e01b      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <prvInsertTimerInActiveList+0x7c>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe f996 	bl	8004242 <vListInsert>
 8005f16:	e012      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d206      	bcs.n	8005f2e <prvInsertTimerInActiveList+0x62>
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e007      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <prvInsertTimerInActiveList+0x80>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7fe f982 	bl	8004242 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f3e:	697b      	ldr	r3, [r7, #20]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000ea8 	.word	0x20000ea8
 8005f4c:	20000ea4 	.word	0x20000ea4

08005f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	; 0x38
 8005f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f56:	e0d0      	b.n	80060fa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da1a      	bge.n	8005f94 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	3304      	adds	r3, #4
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	b672      	cpsid	i
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	b662      	cpsie	i
 8005f7e:	61fb      	str	r3, [r7, #28]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8a:	6850      	ldr	r0, [r2, #4]
 8005f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8e:	6892      	ldr	r2, [r2, #8]
 8005f90:	4611      	mov	r1, r2
 8005f92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f2c0 80ae 	blt.w	80060f8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	3304      	adds	r3, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe f981 	bl	80042b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ff69 	bl	8005e8c <prvSampleTimeNow>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b09      	cmp	r3, #9
 8005fc0:	f200 809b 	bhi.w	80060fa <prvProcessReceivedCommands+0x1aa>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <prvProcessReceivedCommands+0x7c>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	0800606d 	.word	0x0800606d
 8005fdc:	08006081 	.word	0x08006081
 8005fe0:	080060cf 	.word	0x080060cf
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08005ff5 	.word	0x08005ff5
 8005fec:	0800606d 	.word	0x0800606d
 8005ff0:	08006081 	.word	0x08006081
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	18d1      	adds	r1, r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006014:	f7ff ff5a 	bl	8005ecc <prvInsertTimerInActiveList>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d06d      	beq.n	80060fa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006024:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d062      	beq.n	80060fa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	441a      	add	r2, r3
 800603c:	2300      	movs	r3, #0
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	2100      	movs	r1, #0
 8006044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006046:	f7ff fdff 	bl	8005c48 <xTimerGenericCommand>
 800604a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d153      	bne.n	80060fa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	b672      	cpsid	i
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	b662      	cpsie	i
 8006066:	61bb      	str	r3, [r7, #24]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800607e:	e03c      	b.n	80060fa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10c      	bne.n	80060ba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	b672      	cpsid	i
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	b662      	cpsie	i
 80060b4:	617b      	str	r3, [r7, #20]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f7ff ff00 	bl	8005ecc <prvInsertTimerInActiveList>
					break;
 80060cc:	e015      	b.n	80060fa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80060dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060de:	f000 fbcb 	bl	8006878 <vPortFree>
 80060e2:	e00a      	b.n	80060fa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060f6:	e000      	b.n	80060fa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060fa:	4b08      	ldr	r3, [pc, #32]	; (800611c <prvProcessReceivedCommands+0x1cc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1d39      	adds	r1, r7, #4
 8006100:	2200      	movs	r2, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fbb6 	bl	8004874 <xQueueReceive>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f af24 	bne.w	8005f58 <prvProcessReceivedCommands+0x8>
	}
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3730      	adds	r7, #48	; 0x30
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000eac 	.word	0x20000eac

08006120 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006126:	e04a      	b.n	80061be <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006128:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006132:	4b2c      	ldr	r3, [pc, #176]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe f8b7 	bl	80042b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d030      	beq.n	80061be <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	429a      	cmp	r2, r3
 800616c:	d90e      	bls.n	800618c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800617a:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7fe f85c 	bl	8004242 <vListInsert>
 800618a:	e018      	b.n	80061be <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800618c:	2300      	movs	r3, #0
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2300      	movs	r3, #0
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	2100      	movs	r1, #0
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff fd56 	bl	8005c48 <xTimerGenericCommand>
 800619c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <prvSwitchTimerLists+0x9e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	603b      	str	r3, [r7, #0]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1af      	bne.n	8006128 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <prvSwitchTimerLists+0xc8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <prvSwitchTimerLists+0xc4>)
 80061d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061d6:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <prvSwitchTimerLists+0xc8>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000ea4 	.word	0x20000ea4
 80061e8:	20000ea8 	.word	0x20000ea8

080061ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061f2:	f000 f94b 	bl	800648c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d120      	bne.n	8006240 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061fe:	4814      	ldr	r0, [pc, #80]	; (8006250 <prvCheckForValidListAndQueue+0x64>)
 8006200:	f7fd ffce 	bl	80041a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006204:	4813      	ldr	r0, [pc, #76]	; (8006254 <prvCheckForValidListAndQueue+0x68>)
 8006206:	f7fd ffcb 	bl	80041a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <prvCheckForValidListAndQueue+0x6c>)
 800620c:	4a10      	ldr	r2, [pc, #64]	; (8006250 <prvCheckForValidListAndQueue+0x64>)
 800620e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <prvCheckForValidListAndQueue+0x70>)
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <prvCheckForValidListAndQueue+0x68>)
 8006214:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006216:	2300      	movs	r3, #0
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <prvCheckForValidListAndQueue+0x74>)
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <prvCheckForValidListAndQueue+0x78>)
 800621e:	2110      	movs	r1, #16
 8006220:	200a      	movs	r0, #10
 8006222:	f7fe f8db 	bl	80043dc <xQueueGenericCreateStatic>
 8006226:	4603      	mov	r3, r0
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 800622a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	490b      	ldr	r1, [pc, #44]	; (8006268 <prvCheckForValidListAndQueue+0x7c>)
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fd10 	bl	8004c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f000 f958 	bl	80064f4 <vPortExitCritical>
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000eac 	.word	0x20000eac
 8006250:	20000e7c 	.word	0x20000e7c
 8006254:	20000e90 	.word	0x20000e90
 8006258:	20000ea4 	.word	0x20000ea4
 800625c:	20000ea8 	.word	0x20000ea8
 8006260:	20000f58 	.word	0x20000f58
 8006264:	20000eb8 	.word	0x20000eb8
 8006268:	08007b68 	.word	0x08007b68

0800626c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3b04      	subs	r3, #4
 800627c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3b04      	subs	r3, #4
 800628a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <pxPortInitialiseStack+0x64>)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3b14      	subs	r3, #20
 80062a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f06f 0202 	mvn.w	r2, #2
 80062ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3b20      	subs	r3, #32
 80062c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062c2:	68fb      	ldr	r3, [r7, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	080062d5 	.word	0x080062d5

080062d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <prvTaskExitError+0x5c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d00c      	beq.n	8006302 <prvTaskExitError+0x2e>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	b672      	cpsid	i
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	b662      	cpsie	i
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvTaskExitError+0x2c>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	b672      	cpsid	i
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	b662      	cpsie	i
 8006316:	60bb      	str	r3, [r7, #8]
}
 8006318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800631a:	bf00      	nop
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0fc      	beq.n	800631c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	2000000c 	.word	0x2000000c
	...

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006396:	4b37      	ldr	r3, [pc, #220]	; (8006474 <xPortStartScheduler+0xe4>)
 8006398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <xPortStartScheduler+0xe8>)
 80063bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063be:	4b2f      	ldr	r3, [pc, #188]	; (800647c <xPortStartScheduler+0xec>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	e009      	b.n	80063da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <xPortStartScheduler+0xec>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	4a2b      	ldr	r2, [pc, #172]	; (800647c <xPortStartScheduler+0xec>)
 80063ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d0ef      	beq.n	80063c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <xPortStartScheduler+0xec>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1c3 0307 	rsb	r3, r3, #7
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00c      	beq.n	800640c <xPortStartScheduler+0x7c>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	b672      	cpsid	i
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	b662      	cpsie	i
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800640c:	4b1b      	ldr	r3, [pc, #108]	; (800647c <xPortStartScheduler+0xec>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	4a1a      	ldr	r2, [pc, #104]	; (800647c <xPortStartScheduler+0xec>)
 8006414:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006416:	4b19      	ldr	r3, [pc, #100]	; (800647c <xPortStartScheduler+0xec>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641e:	4a17      	ldr	r2, [pc, #92]	; (800647c <xPortStartScheduler+0xec>)
 8006420:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <xPortStartScheduler+0xf0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a14      	ldr	r2, [pc, #80]	; (8006480 <xPortStartScheduler+0xf0>)
 8006430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006434:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <xPortStartScheduler+0xf0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a11      	ldr	r2, [pc, #68]	; (8006480 <xPortStartScheduler+0xf0>)
 800643c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006440:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006442:	f000 f8dd 	bl	8006600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006446:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <xPortStartScheduler+0xf4>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800644c:	f000 f8fc 	bl	8006648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <xPortStartScheduler+0xf8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <xPortStartScheduler+0xf8>)
 8006456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800645a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800645c:	f7ff ff84 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006460:	f7ff f840 	bl	80054e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006464:	f7ff ff36 	bl	80062d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	e000e400 	.word	0xe000e400
 8006478:	20000fa8 	.word	0x20000fa8
 800647c:	20000fac 	.word	0x20000fac
 8006480:	e000ed20 	.word	0xe000ed20
 8006484:	2000000c 	.word	0x2000000c
 8006488:	e000ef34 	.word	0xe000ef34

0800648c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	b672      	cpsid	i
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	b662      	cpsie	i
 80064a6:	607b      	str	r3, [r7, #4]
}
 80064a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <vPortEnterCritical+0x60>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	4a0e      	ldr	r2, [pc, #56]	; (80064ec <vPortEnterCritical+0x60>)
 80064b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <vPortEnterCritical+0x60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d111      	bne.n	80064e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <vPortEnterCritical+0x64>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <vPortEnterCritical+0x54>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	b672      	cpsid	i
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	b662      	cpsie	i
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vPortEnterCritical+0x52>
	}
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <vPortExitCritical+0x54>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <vPortExitCritical+0x28>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	b672      	cpsid	i
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	b662      	cpsie	i
 8006516:	607b      	str	r3, [r7, #4]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <vPortExitCritical+0x54>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3b01      	subs	r3, #1
 8006522:	4a09      	ldr	r2, [pc, #36]	; (8006548 <vPortExitCritical+0x54>)
 8006524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006526:	4b08      	ldr	r3, [pc, #32]	; (8006548 <vPortExitCritical+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <vPortExitCritical+0x46>
 800652e:	2300      	movs	r3, #0
 8006530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f383 8811 	msr	BASEPRI, r3
}
 8006538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c
 800654c:	00000000 	.word	0x00000000

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	b672      	cpsid	i
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	b662      	cpsie	i
 8006584:	f7fe ffae 	bl	80054e4 <vTaskSwitchContext>
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f380 8811 	msr	BASEPRI, r0
 8006590:	bc09      	pop	{r0, r3}
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	6808      	ldr	r0, [r1, #0]
 8006596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	f01e 0f10 	tst.w	lr, #16
 800659e:	bf08      	it	eq
 80065a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a4:	f380 8809 	msr	PSP, r0
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop

080065b0 <pxCurrentTCBConst>:
 80065b0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d6:	f7fe fec9 	bl	800536c <xTaskIncrementTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <SysTick_Handler+0x44>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f383 8811 	msr	BASEPRI, r3
}
 80065f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <vPortSetupTimerInterrupt+0x34>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <vPortSetupTimerInterrupt+0x38>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <vPortSetupTimerInterrupt+0x3c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <vPortSetupTimerInterrupt+0x40>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	099b      	lsrs	r3, r3, #6
 800661c:	4a09      	ldr	r2, [pc, #36]	; (8006644 <vPortSetupTimerInterrupt+0x44>)
 800661e:	3b01      	subs	r3, #1
 8006620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006622:	4b04      	ldr	r3, [pc, #16]	; (8006634 <vPortSetupTimerInterrupt+0x34>)
 8006624:	2207      	movs	r2, #7
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	e000e010 	.word	0xe000e010
 8006638:	e000e018 	.word	0xe000e018
 800663c:	20000000 	.word	0x20000000
 8006640:	10624dd3 	.word	0x10624dd3
 8006644:	e000e014 	.word	0xe000e014

08006648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006648:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006658 <vPortEnableVFP+0x10>
 800664c:	6801      	ldr	r1, [r0, #0]
 800664e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006652:	6001      	str	r1, [r0, #0]
 8006654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006656:	bf00      	nop
 8006658:	e000ed88 	.word	0xe000ed88

0800665c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006662:	f3ef 8305 	mrs	r3, IPSR
 8006666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d916      	bls.n	800669c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <vPortValidateInterruptPriority+0x78>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006678:	4b17      	ldr	r3, [pc, #92]	; (80066d8 <vPortValidateInterruptPriority+0x7c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	7afa      	ldrb	r2, [r7, #11]
 800667e:	429a      	cmp	r2, r3
 8006680:	d20c      	bcs.n	800669c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	b672      	cpsid	i
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	b662      	cpsie	i
 8006696:	607b      	str	r3, [r7, #4]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <vPortValidateInterruptPriority+0x80>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <vPortValidateInterruptPriority+0x84>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d90c      	bls.n	80066c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	b672      	cpsid	i
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	b662      	cpsie	i
 80066c0:	603b      	str	r3, [r7, #0]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <vPortValidateInterruptPriority+0x68>
	}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	e000e3f0 	.word	0xe000e3f0
 80066d8:	20000fa8 	.word	0x20000fa8
 80066dc:	e000ed0c 	.word	0xe000ed0c
 80066e0:	20000fac 	.word	0x20000fac

080066e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066f0:	f7fe fd7e 	bl	80051f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066f4:	4b5b      	ldr	r3, [pc, #364]	; (8006864 <pvPortMalloc+0x180>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066fc:	f000 f91a 	bl	8006934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006700:	4b59      	ldr	r3, [pc, #356]	; (8006868 <pvPortMalloc+0x184>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 8092 	bne.w	8006832 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01f      	beq.n	8006754 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006714:	2208      	movs	r2, #8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	2b00      	cmp	r3, #0
 8006724:	d016      	beq.n	8006754 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	3308      	adds	r3, #8
 800672e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00c      	beq.n	8006754 <pvPortMalloc+0x70>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	b672      	cpsid	i
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	b662      	cpsie	i
 800674e:	617b      	str	r3, [r7, #20]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d06b      	beq.n	8006832 <pvPortMalloc+0x14e>
 800675a:	4b44      	ldr	r3, [pc, #272]	; (800686c <pvPortMalloc+0x188>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d866      	bhi.n	8006832 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006764:	4b42      	ldr	r3, [pc, #264]	; (8006870 <pvPortMalloc+0x18c>)
 8006766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006768:	4b41      	ldr	r3, [pc, #260]	; (8006870 <pvPortMalloc+0x18c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676e:	e004      	b.n	800677a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <pvPortMalloc+0xa8>
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f1      	bne.n	8006770 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800678c:	4b35      	ldr	r3, [pc, #212]	; (8006864 <pvPortMalloc+0x180>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	429a      	cmp	r2, r3
 8006794:	d04d      	beq.n	8006832 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2208      	movs	r2, #8
 800679c:	4413      	add	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	2308      	movs	r3, #8
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d921      	bls.n	80067fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <pvPortMalloc+0x100>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	b672      	cpsid	i
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	b662      	cpsie	i
 80067de:	613b      	str	r3, [r7, #16]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067f6:	69b8      	ldr	r0, [r7, #24]
 80067f8:	f000 f8fe 	bl	80069f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <pvPortMalloc+0x188>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	4a19      	ldr	r2, [pc, #100]	; (800686c <pvPortMalloc+0x188>)
 8006808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800680a:	4b18      	ldr	r3, [pc, #96]	; (800686c <pvPortMalloc+0x188>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <pvPortMalloc+0x190>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d203      	bcs.n	800681e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <pvPortMalloc+0x188>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <pvPortMalloc+0x190>)
 800681c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <pvPortMalloc+0x184>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	431a      	orrs	r2, r3
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006832:	f7fe fceb 	bl	800520c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <pvPortMalloc+0x176>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	b672      	cpsid	i
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	b662      	cpsie	i
 8006854:	60fb      	str	r3, [r7, #12]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <pvPortMalloc+0x174>
	return pvReturn;
 800685a:	69fb      	ldr	r3, [r7, #28]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3728      	adds	r7, #40	; 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20004bb8 	.word	0x20004bb8
 8006868:	20004bc4 	.word	0x20004bc4
 800686c:	20004bbc 	.word	0x20004bbc
 8006870:	20004bb0 	.word	0x20004bb0
 8006874:	20004bc0 	.word	0x20004bc0

08006878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04c      	beq.n	8006924 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800688a:	2308      	movs	r3, #8
 800688c:	425b      	negs	r3, r3
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b23      	ldr	r3, [pc, #140]	; (800692c <vPortFree+0xb4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <vPortFree+0x48>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	b672      	cpsid	i
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	b662      	cpsie	i
 80068ba:	60fb      	str	r3, [r7, #12]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00c      	beq.n	80068e2 <vPortFree+0x6a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	60bb      	str	r3, [r7, #8]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <vPortFree+0xb4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d115      	bne.n	8006924 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <vPortFree+0xb4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006908:	f7fe fc72 	bl	80051f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <vPortFree+0xb8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4413      	add	r3, r2
 8006916:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vPortFree+0xb8>)
 8006918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f000 f86c 	bl	80069f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006920:	f7fe fc74 	bl	800520c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20004bc4 	.word	0x20004bc4
 8006930:	20004bbc 	.word	0x20004bbc

08006934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800693e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvHeapInit+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <prvHeapInit+0xac>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <prvHeapInit+0xb0>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <prvHeapInit+0xb0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <prvHeapInit+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvHeapInit+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvHeapInit+0xb4>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvHeapInit+0xb8>)
 80069c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvHeapInit+0xbc>)
 80069ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvHeapInit+0xc0>)
 80069ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000fb0 	.word	0x20000fb0
 80069e4:	20004bb0 	.word	0x20004bb0
 80069e8:	20004bb8 	.word	0x20004bb8
 80069ec:	20004bc0 	.word	0x20004bc0
 80069f0:	20004bbc 	.word	0x20004bbc
 80069f4:	20004bc4 	.word	0x20004bc4

080069f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <prvInsertBlockIntoFreeList+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x14>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f7      	bhi.n	8006a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d118      	bne.n	8006a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d00d      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e008      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e003      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20004bb0 	.word	0x20004bb0
 8006aa8:	20004bb8 	.word	0x20004bb8

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000010 	.word	0x20000010

08006ab8 <std>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
 8006abe:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ac6:	6083      	str	r3, [r0, #8]
 8006ac8:	8181      	strh	r1, [r0, #12]
 8006aca:	6643      	str	r3, [r0, #100]	; 0x64
 8006acc:	81c2      	strh	r2, [r0, #14]
 8006ace:	6183      	str	r3, [r0, #24]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	305c      	adds	r0, #92	; 0x5c
 8006ad6:	f000 f91a 	bl	8006d0e <memset>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <std+0x38>)
 8006adc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <std+0x3c>)
 8006ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <std+0x40>)
 8006ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <std+0x44>)
 8006ae8:	6224      	str	r4, [r4, #32]
 8006aea:	6323      	str	r3, [r4, #48]	; 0x30
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	08006f6d 	.word	0x08006f6d
 8006af4:	08006f8f 	.word	0x08006f8f
 8006af8:	08006fc7 	.word	0x08006fc7
 8006afc:	08006feb 	.word	0x08006feb

08006b00 <_cleanup_r>:
 8006b00:	4901      	ldr	r1, [pc, #4]	; (8006b08 <_cleanup_r+0x8>)
 8006b02:	f000 b8af 	b.w	8006c64 <_fwalk_reent>
 8006b06:	bf00      	nop
 8006b08:	08007145 	.word	0x08007145

08006b0c <__sfmoreglue>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2268      	movs	r2, #104	; 0x68
 8006b10:	1e4d      	subs	r5, r1, #1
 8006b12:	4355      	muls	r5, r2
 8006b14:	460e      	mov	r6, r1
 8006b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b1a:	f000 f921 	bl	8006d60 <_malloc_r>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b140      	cbz	r0, 8006b34 <__sfmoreglue+0x28>
 8006b22:	2100      	movs	r1, #0
 8006b24:	e9c0 1600 	strd	r1, r6, [r0]
 8006b28:	300c      	adds	r0, #12
 8006b2a:	60a0      	str	r0, [r4, #8]
 8006b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b30:	f000 f8ed 	bl	8006d0e <memset>
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 b8d8 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20004bc9 	.word	0x20004bc9

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 b8d3 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20004bc9 	.word	0x20004bc9

08006b50 <__sinit_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sinit_lock_acquire+0x8>)
 8006b52:	f000 b8cc 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	20004bca 	.word	0x20004bca

08006b5c <__sinit_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sinit_lock_release+0x8>)
 8006b5e:	f000 b8c7 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	20004bca 	.word	0x20004bca

08006b68 <__sinit>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7ff fff0 	bl	8006b50 <__sinit_lock_acquire>
 8006b70:	69a3      	ldr	r3, [r4, #24]
 8006b72:	b11b      	cbz	r3, 8006b7c <__sinit+0x14>
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	f7ff bff0 	b.w	8006b5c <__sinit_lock_release>
 8006b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b80:	6523      	str	r3, [r4, #80]	; 0x50
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <__sinit+0x68>)
 8006b84:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <__sinit+0x6c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	bf04      	itt	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	61a3      	streq	r3, [r4, #24]
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f820 	bl	8006bd8 <__sfp>
 8006b98:	6060      	str	r0, [r4, #4]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 f81c 	bl	8006bd8 <__sfp>
 8006ba0:	60a0      	str	r0, [r4, #8]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f818 	bl	8006bd8 <__sfp>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60e0      	str	r0, [r4, #12]
 8006bac:	2104      	movs	r1, #4
 8006bae:	6860      	ldr	r0, [r4, #4]
 8006bb0:	f7ff ff82 	bl	8006ab8 <std>
 8006bb4:	68a0      	ldr	r0, [r4, #8]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2109      	movs	r1, #9
 8006bba:	f7ff ff7d 	bl	8006ab8 <std>
 8006bbe:	68e0      	ldr	r0, [r4, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	f7ff ff78 	bl	8006ab8 <std>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	61a3      	str	r3, [r4, #24]
 8006bcc:	e7d2      	b.n	8006b74 <__sinit+0xc>
 8006bce:	bf00      	nop
 8006bd0:	08007c30 	.word	0x08007c30
 8006bd4:	08006b01 	.word	0x08006b01

08006bd8 <__sfp>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4607      	mov	r7, r0
 8006bdc:	f7ff ffac 	bl	8006b38 <__sfp_lock_acquire>
 8006be0:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <__sfp+0x84>)
 8006be2:	681e      	ldr	r6, [r3, #0]
 8006be4:	69b3      	ldr	r3, [r6, #24]
 8006be6:	b913      	cbnz	r3, 8006bee <__sfp+0x16>
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ffbd 	bl	8006b68 <__sinit>
 8006bee:	3648      	adds	r6, #72	; 0x48
 8006bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	d503      	bpl.n	8006c00 <__sfp+0x28>
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	b30b      	cbz	r3, 8006c40 <__sfp+0x68>
 8006bfc:	6836      	ldr	r6, [r6, #0]
 8006bfe:	e7f7      	b.n	8006bf0 <__sfp+0x18>
 8006c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c04:	b9d5      	cbnz	r5, 8006c3c <__sfp+0x64>
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <__sfp+0x88>)
 8006c08:	60e3      	str	r3, [r4, #12]
 8006c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c10:	f000 f86c 	bl	8006cec <__retarget_lock_init_recursive>
 8006c14:	f7ff ff96 	bl	8006b44 <__sfp_lock_release>
 8006c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c20:	6025      	str	r5, [r4, #0]
 8006c22:	61a5      	str	r5, [r4, #24]
 8006c24:	2208      	movs	r2, #8
 8006c26:	4629      	mov	r1, r5
 8006c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c2c:	f000 f86f 	bl	8006d0e <memset>
 8006c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c38:	4620      	mov	r0, r4
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c3c:	3468      	adds	r4, #104	; 0x68
 8006c3e:	e7d9      	b.n	8006bf4 <__sfp+0x1c>
 8006c40:	2104      	movs	r1, #4
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ff62 	bl	8006b0c <__sfmoreglue>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	6030      	str	r0, [r6, #0]
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1d5      	bne.n	8006bfc <__sfp+0x24>
 8006c50:	f7ff ff78 	bl	8006b44 <__sfp_lock_release>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	e7ee      	b.n	8006c38 <__sfp+0x60>
 8006c5a:	bf00      	nop
 8006c5c:	08007c30 	.word	0x08007c30
 8006c60:	ffff0001 	.word	0xffff0001

08006c64 <_fwalk_reent>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4606      	mov	r6, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c70:	2700      	movs	r7, #0
 8006c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c76:	f1b9 0901 	subs.w	r9, r9, #1
 8006c7a:	d505      	bpl.n	8006c88 <_fwalk_reent+0x24>
 8006c7c:	6824      	ldr	r4, [r4, #0]
 8006c7e:	2c00      	cmp	r4, #0
 8006c80:	d1f7      	bne.n	8006c72 <_fwalk_reent+0xe>
 8006c82:	4638      	mov	r0, r7
 8006c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c88:	89ab      	ldrh	r3, [r5, #12]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d907      	bls.n	8006c9e <_fwalk_reent+0x3a>
 8006c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c92:	3301      	adds	r3, #1
 8006c94:	d003      	beq.n	8006c9e <_fwalk_reent+0x3a>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	47c0      	blx	r8
 8006c9c:	4307      	orrs	r7, r0
 8006c9e:	3568      	adds	r5, #104	; 0x68
 8006ca0:	e7e9      	b.n	8006c76 <_fwalk_reent+0x12>
	...

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4d0d      	ldr	r5, [pc, #52]	; (8006cdc <__libc_init_array+0x38>)
 8006ca8:	4c0d      	ldr	r4, [pc, #52]	; (8006ce0 <__libc_init_array+0x3c>)
 8006caa:	1b64      	subs	r4, r4, r5
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	4d0b      	ldr	r5, [pc, #44]	; (8006ce4 <__libc_init_array+0x40>)
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	; (8006ce8 <__libc_init_array+0x44>)
 8006cb8:	f000 ff32 	bl	8007b20 <_init>
 8006cbc:	1b64      	subs	r4, r4, r5
 8006cbe:	10a4      	asrs	r4, r4, #2
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	08007c70 	.word	0x08007c70
 8006ce0:	08007c70 	.word	0x08007c70
 8006ce4:	08007c70 	.word	0x08007c70
 8006ce8:	08007c74 	.word	0x08007c74

08006cec <__retarget_lock_init_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_acquire_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_release_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <memcpy>:
 8006cf2:	440a      	add	r2, r1
 8006cf4:	4291      	cmp	r1, r2
 8006cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cfa:	d100      	bne.n	8006cfe <memcpy+0xc>
 8006cfc:	4770      	bx	lr
 8006cfe:	b510      	push	{r4, lr}
 8006d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d08:	4291      	cmp	r1, r2
 8006d0a:	d1f9      	bne.n	8006d00 <memcpy+0xe>
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <memset>:
 8006d0e:	4402      	add	r2, r0
 8006d10:	4603      	mov	r3, r0
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d100      	bne.n	8006d18 <memset+0xa>
 8006d16:	4770      	bx	lr
 8006d18:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1c:	e7f9      	b.n	8006d12 <memset+0x4>
	...

08006d20 <sbrk_aligned>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4e0e      	ldr	r6, [pc, #56]	; (8006d5c <sbrk_aligned+0x3c>)
 8006d24:	460c      	mov	r4, r1
 8006d26:	6831      	ldr	r1, [r6, #0]
 8006d28:	4605      	mov	r5, r0
 8006d2a:	b911      	cbnz	r1, 8006d32 <sbrk_aligned+0x12>
 8006d2c:	f000 f90e 	bl	8006f4c <_sbrk_r>
 8006d30:	6030      	str	r0, [r6, #0]
 8006d32:	4621      	mov	r1, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 f909 	bl	8006f4c <_sbrk_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d00a      	beq.n	8006d54 <sbrk_aligned+0x34>
 8006d3e:	1cc4      	adds	r4, r0, #3
 8006d40:	f024 0403 	bic.w	r4, r4, #3
 8006d44:	42a0      	cmp	r0, r4
 8006d46:	d007      	beq.n	8006d58 <sbrk_aligned+0x38>
 8006d48:	1a21      	subs	r1, r4, r0
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f8fe 	bl	8006f4c <_sbrk_r>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d101      	bne.n	8006d58 <sbrk_aligned+0x38>
 8006d54:	f04f 34ff 	mov.w	r4, #4294967295
 8006d58:	4620      	mov	r0, r4
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	20004bd0 	.word	0x20004bd0

08006d60 <_malloc_r>:
 8006d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	1ccd      	adds	r5, r1, #3
 8006d66:	f025 0503 	bic.w	r5, r5, #3
 8006d6a:	3508      	adds	r5, #8
 8006d6c:	2d0c      	cmp	r5, #12
 8006d6e:	bf38      	it	cc
 8006d70:	250c      	movcc	r5, #12
 8006d72:	2d00      	cmp	r5, #0
 8006d74:	4607      	mov	r7, r0
 8006d76:	db01      	blt.n	8006d7c <_malloc_r+0x1c>
 8006d78:	42a9      	cmp	r1, r5
 8006d7a:	d905      	bls.n	8006d88 <_malloc_r+0x28>
 8006d7c:	230c      	movs	r3, #12
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	2600      	movs	r6, #0
 8006d82:	4630      	mov	r0, r6
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	4e2e      	ldr	r6, [pc, #184]	; (8006e44 <_malloc_r+0xe4>)
 8006d8a:	f000 fa29 	bl	80071e0 <__malloc_lock>
 8006d8e:	6833      	ldr	r3, [r6, #0]
 8006d90:	461c      	mov	r4, r3
 8006d92:	bb34      	cbnz	r4, 8006de2 <_malloc_r+0x82>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7ff ffc2 	bl	8006d20 <sbrk_aligned>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	4604      	mov	r4, r0
 8006da0:	d14d      	bne.n	8006e3e <_malloc_r+0xde>
 8006da2:	6834      	ldr	r4, [r6, #0]
 8006da4:	4626      	mov	r6, r4
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	d140      	bne.n	8006e2c <_malloc_r+0xcc>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	4631      	mov	r1, r6
 8006dae:	4638      	mov	r0, r7
 8006db0:	eb04 0803 	add.w	r8, r4, r3
 8006db4:	f000 f8ca 	bl	8006f4c <_sbrk_r>
 8006db8:	4580      	cmp	r8, r0
 8006dba:	d13a      	bne.n	8006e32 <_malloc_r+0xd2>
 8006dbc:	6821      	ldr	r1, [r4, #0]
 8006dbe:	3503      	adds	r5, #3
 8006dc0:	1a6d      	subs	r5, r5, r1
 8006dc2:	f025 0503 	bic.w	r5, r5, #3
 8006dc6:	3508      	adds	r5, #8
 8006dc8:	2d0c      	cmp	r5, #12
 8006dca:	bf38      	it	cc
 8006dcc:	250c      	movcc	r5, #12
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f7ff ffa5 	bl	8006d20 <sbrk_aligned>
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d02b      	beq.n	8006e32 <_malloc_r+0xd2>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	442b      	add	r3, r5
 8006dde:	6023      	str	r3, [r4, #0]
 8006de0:	e00e      	b.n	8006e00 <_malloc_r+0xa0>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	1b52      	subs	r2, r2, r5
 8006de6:	d41e      	bmi.n	8006e26 <_malloc_r+0xc6>
 8006de8:	2a0b      	cmp	r2, #11
 8006dea:	d916      	bls.n	8006e1a <_malloc_r+0xba>
 8006dec:	1961      	adds	r1, r4, r5
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	6025      	str	r5, [r4, #0]
 8006df2:	bf18      	it	ne
 8006df4:	6059      	strne	r1, [r3, #4]
 8006df6:	6863      	ldr	r3, [r4, #4]
 8006df8:	bf08      	it	eq
 8006dfa:	6031      	streq	r1, [r6, #0]
 8006dfc:	5162      	str	r2, [r4, r5]
 8006dfe:	604b      	str	r3, [r1, #4]
 8006e00:	4638      	mov	r0, r7
 8006e02:	f104 060b 	add.w	r6, r4, #11
 8006e06:	f000 f9f1 	bl	80071ec <__malloc_unlock>
 8006e0a:	f026 0607 	bic.w	r6, r6, #7
 8006e0e:	1d23      	adds	r3, r4, #4
 8006e10:	1af2      	subs	r2, r6, r3
 8006e12:	d0b6      	beq.n	8006d82 <_malloc_r+0x22>
 8006e14:	1b9b      	subs	r3, r3, r6
 8006e16:	50a3      	str	r3, [r4, r2]
 8006e18:	e7b3      	b.n	8006d82 <_malloc_r+0x22>
 8006e1a:	6862      	ldr	r2, [r4, #4]
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	bf0c      	ite	eq
 8006e20:	6032      	streq	r2, [r6, #0]
 8006e22:	605a      	strne	r2, [r3, #4]
 8006e24:	e7ec      	b.n	8006e00 <_malloc_r+0xa0>
 8006e26:	4623      	mov	r3, r4
 8006e28:	6864      	ldr	r4, [r4, #4]
 8006e2a:	e7b2      	b.n	8006d92 <_malloc_r+0x32>
 8006e2c:	4634      	mov	r4, r6
 8006e2e:	6876      	ldr	r6, [r6, #4]
 8006e30:	e7b9      	b.n	8006da6 <_malloc_r+0x46>
 8006e32:	230c      	movs	r3, #12
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	4638      	mov	r0, r7
 8006e38:	f000 f9d8 	bl	80071ec <__malloc_unlock>
 8006e3c:	e7a1      	b.n	8006d82 <_malloc_r+0x22>
 8006e3e:	6025      	str	r5, [r4, #0]
 8006e40:	e7de      	b.n	8006e00 <_malloc_r+0xa0>
 8006e42:	bf00      	nop
 8006e44:	20004bcc 	.word	0x20004bcc

08006e48 <iprintf>:
 8006e48:	b40f      	push	{r0, r1, r2, r3}
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <iprintf+0x2c>)
 8006e4c:	b513      	push	{r0, r1, r4, lr}
 8006e4e:	681c      	ldr	r4, [r3, #0]
 8006e50:	b124      	cbz	r4, 8006e5c <iprintf+0x14>
 8006e52:	69a3      	ldr	r3, [r4, #24]
 8006e54:	b913      	cbnz	r3, 8006e5c <iprintf+0x14>
 8006e56:	4620      	mov	r0, r4
 8006e58:	f7ff fe86 	bl	8006b68 <__sinit>
 8006e5c:	ab05      	add	r3, sp, #20
 8006e5e:	9a04      	ldr	r2, [sp, #16]
 8006e60:	68a1      	ldr	r1, [r4, #8]
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 fa3d 	bl	80072e4 <_vfiprintf_r>
 8006e6a:	b002      	add	sp, #8
 8006e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e70:	b004      	add	sp, #16
 8006e72:	4770      	bx	lr
 8006e74:	20000010 	.word	0x20000010

08006e78 <cleanup_glue>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	6809      	ldr	r1, [r1, #0]
 8006e7e:	4605      	mov	r5, r0
 8006e80:	b109      	cbz	r1, 8006e86 <cleanup_glue+0xe>
 8006e82:	f7ff fff9 	bl	8006e78 <cleanup_glue>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4628      	mov	r0, r5
 8006e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e8e:	f000 b9b3 	b.w	80071f8 <_free_r>
	...

08006e94 <_reclaim_reent>:
 8006e94:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <_reclaim_reent+0xb4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4283      	cmp	r3, r0
 8006e9a:	b570      	push	{r4, r5, r6, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	d051      	beq.n	8006f44 <_reclaim_reent+0xb0>
 8006ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ea2:	b143      	cbz	r3, 8006eb6 <_reclaim_reent+0x22>
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d14a      	bne.n	8006f40 <_reclaim_reent+0xac>
 8006eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eac:	6819      	ldr	r1, [r3, #0]
 8006eae:	b111      	cbz	r1, 8006eb6 <_reclaim_reent+0x22>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 f9a1 	bl	80071f8 <_free_r>
 8006eb6:	6961      	ldr	r1, [r4, #20]
 8006eb8:	b111      	cbz	r1, 8006ec0 <_reclaim_reent+0x2c>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f99c 	bl	80071f8 <_free_r>
 8006ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ec2:	b111      	cbz	r1, 8006eca <_reclaim_reent+0x36>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 f997 	bl	80071f8 <_free_r>
 8006eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ecc:	b111      	cbz	r1, 8006ed4 <_reclaim_reent+0x40>
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f992 	bl	80071f8 <_free_r>
 8006ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ed6:	b111      	cbz	r1, 8006ede <_reclaim_reent+0x4a>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 f98d 	bl	80071f8 <_free_r>
 8006ede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ee0:	b111      	cbz	r1, 8006ee8 <_reclaim_reent+0x54>
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 f988 	bl	80071f8 <_free_r>
 8006ee8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006eea:	b111      	cbz	r1, 8006ef2 <_reclaim_reent+0x5e>
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f983 	bl	80071f8 <_free_r>
 8006ef2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ef4:	b111      	cbz	r1, 8006efc <_reclaim_reent+0x68>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 f97e 	bl	80071f8 <_free_r>
 8006efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006efe:	b111      	cbz	r1, 8006f06 <_reclaim_reent+0x72>
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 f979 	bl	80071f8 <_free_r>
 8006f06:	69a3      	ldr	r3, [r4, #24]
 8006f08:	b1e3      	cbz	r3, 8006f44 <_reclaim_reent+0xb0>
 8006f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4798      	blx	r3
 8006f10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f12:	b1b9      	cbz	r1, 8006f44 <_reclaim_reent+0xb0>
 8006f14:	4620      	mov	r0, r4
 8006f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f1a:	f7ff bfad 	b.w	8006e78 <cleanup_glue>
 8006f1e:	5949      	ldr	r1, [r1, r5]
 8006f20:	b941      	cbnz	r1, 8006f34 <_reclaim_reent+0xa0>
 8006f22:	3504      	adds	r5, #4
 8006f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f26:	2d80      	cmp	r5, #128	; 0x80
 8006f28:	68d9      	ldr	r1, [r3, #12]
 8006f2a:	d1f8      	bne.n	8006f1e <_reclaim_reent+0x8a>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 f963 	bl	80071f8 <_free_r>
 8006f32:	e7ba      	b.n	8006eaa <_reclaim_reent+0x16>
 8006f34:	680e      	ldr	r6, [r1, #0]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f95e 	bl	80071f8 <_free_r>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	e7ef      	b.n	8006f20 <_reclaim_reent+0x8c>
 8006f40:	2500      	movs	r5, #0
 8006f42:	e7ef      	b.n	8006f24 <_reclaim_reent+0x90>
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
 8006f46:	bf00      	nop
 8006f48:	20000010 	.word	0x20000010

08006f4c <_sbrk_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_sbrk_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7f9 ff8a 	bl	8000e70 <_sbrk>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_sbrk_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_sbrk_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20004bd4 	.word	0x20004bd4

08006f6c <__sread>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	460c      	mov	r4, r1
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	f000 fc7a 	bl	800786c <_read_r>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	bfab      	itete	ge
 8006f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f80:	181b      	addge	r3, r3, r0
 8006f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f86:	bfac      	ite	ge
 8006f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f8a:	81a3      	strhlt	r3, [r4, #12]
 8006f8c:	bd10      	pop	{r4, pc}

08006f8e <__swrite>:
 8006f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	461f      	mov	r7, r3
 8006f94:	898b      	ldrh	r3, [r1, #12]
 8006f96:	05db      	lsls	r3, r3, #23
 8006f98:	4605      	mov	r5, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	d505      	bpl.n	8006fac <__swrite+0x1e>
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f000 f908 	bl	80071bc <_lseek_r>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb6:	81a3      	strh	r3, [r4, #12]
 8006fb8:	4632      	mov	r2, r6
 8006fba:	463b      	mov	r3, r7
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	f000 b817 	b.w	8006ff4 <_write_r>

08006fc6 <__sseek>:
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	460c      	mov	r4, r1
 8006fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fce:	f000 f8f5 	bl	80071bc <_lseek_r>
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	bf15      	itete	ne
 8006fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fe2:	81a3      	strheq	r3, [r4, #12]
 8006fe4:	bf18      	it	ne
 8006fe6:	81a3      	strhne	r3, [r4, #12]
 8006fe8:	bd10      	pop	{r4, pc}

08006fea <__sclose>:
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 b813 	b.w	8007018 <_close_r>
	...

08006ff4 <_write_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	; (8007014 <_write_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7f9 fb15 	bl	8000632 <_write>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_write_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_write_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20004bd4 	.word	0x20004bd4

08007018 <_close_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_close_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7f9 feef 	bl	8000e06 <_close>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_close_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_close_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20004bd4 	.word	0x20004bd4

08007038 <__sflush_r>:
 8007038:	898a      	ldrh	r2, [r1, #12]
 800703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	4605      	mov	r5, r0
 8007040:	0710      	lsls	r0, r2, #28
 8007042:	460c      	mov	r4, r1
 8007044:	d458      	bmi.n	80070f8 <__sflush_r+0xc0>
 8007046:	684b      	ldr	r3, [r1, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc05      	bgt.n	8007058 <__sflush_r+0x20>
 800704c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	dc02      	bgt.n	8007058 <__sflush_r+0x20>
 8007052:	2000      	movs	r0, #0
 8007054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800705a:	2e00      	cmp	r6, #0
 800705c:	d0f9      	beq.n	8007052 <__sflush_r+0x1a>
 800705e:	2300      	movs	r3, #0
 8007060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007064:	682f      	ldr	r7, [r5, #0]
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	d032      	beq.n	80070d0 <__sflush_r+0x98>
 800706a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	075a      	lsls	r2, r3, #29
 8007070:	d505      	bpl.n	800707e <__sflush_r+0x46>
 8007072:	6863      	ldr	r3, [r4, #4]
 8007074:	1ac0      	subs	r0, r0, r3
 8007076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007078:	b10b      	cbz	r3, 800707e <__sflush_r+0x46>
 800707a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800707c:	1ac0      	subs	r0, r0, r3
 800707e:	2300      	movs	r3, #0
 8007080:	4602      	mov	r2, r0
 8007082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007084:	6a21      	ldr	r1, [r4, #32]
 8007086:	4628      	mov	r0, r5
 8007088:	47b0      	blx	r6
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	d106      	bne.n	800709e <__sflush_r+0x66>
 8007090:	6829      	ldr	r1, [r5, #0]
 8007092:	291d      	cmp	r1, #29
 8007094:	d82c      	bhi.n	80070f0 <__sflush_r+0xb8>
 8007096:	4a2a      	ldr	r2, [pc, #168]	; (8007140 <__sflush_r+0x108>)
 8007098:	40ca      	lsrs	r2, r1
 800709a:	07d6      	lsls	r6, r2, #31
 800709c:	d528      	bpl.n	80070f0 <__sflush_r+0xb8>
 800709e:	2200      	movs	r2, #0
 80070a0:	6062      	str	r2, [r4, #4]
 80070a2:	04d9      	lsls	r1, r3, #19
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	6022      	str	r2, [r4, #0]
 80070a8:	d504      	bpl.n	80070b4 <__sflush_r+0x7c>
 80070aa:	1c42      	adds	r2, r0, #1
 80070ac:	d101      	bne.n	80070b2 <__sflush_r+0x7a>
 80070ae:	682b      	ldr	r3, [r5, #0]
 80070b0:	b903      	cbnz	r3, 80070b4 <__sflush_r+0x7c>
 80070b2:	6560      	str	r0, [r4, #84]	; 0x54
 80070b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b6:	602f      	str	r7, [r5, #0]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d0ca      	beq.n	8007052 <__sflush_r+0x1a>
 80070bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c0:	4299      	cmp	r1, r3
 80070c2:	d002      	beq.n	80070ca <__sflush_r+0x92>
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f897 	bl	80071f8 <_free_r>
 80070ca:	2000      	movs	r0, #0
 80070cc:	6360      	str	r0, [r4, #52]	; 0x34
 80070ce:	e7c1      	b.n	8007054 <__sflush_r+0x1c>
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	2301      	movs	r3, #1
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	1c41      	adds	r1, r0, #1
 80070da:	d1c7      	bne.n	800706c <__sflush_r+0x34>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c4      	beq.n	800706c <__sflush_r+0x34>
 80070e2:	2b1d      	cmp	r3, #29
 80070e4:	d001      	beq.n	80070ea <__sflush_r+0xb2>
 80070e6:	2b16      	cmp	r3, #22
 80070e8:	d101      	bne.n	80070ee <__sflush_r+0xb6>
 80070ea:	602f      	str	r7, [r5, #0]
 80070ec:	e7b1      	b.n	8007052 <__sflush_r+0x1a>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	e7ad      	b.n	8007054 <__sflush_r+0x1c>
 80070f8:	690f      	ldr	r7, [r1, #16]
 80070fa:	2f00      	cmp	r7, #0
 80070fc:	d0a9      	beq.n	8007052 <__sflush_r+0x1a>
 80070fe:	0793      	lsls	r3, r2, #30
 8007100:	680e      	ldr	r6, [r1, #0]
 8007102:	bf08      	it	eq
 8007104:	694b      	ldreq	r3, [r1, #20]
 8007106:	600f      	str	r7, [r1, #0]
 8007108:	bf18      	it	ne
 800710a:	2300      	movne	r3, #0
 800710c:	eba6 0807 	sub.w	r8, r6, r7
 8007110:	608b      	str	r3, [r1, #8]
 8007112:	f1b8 0f00 	cmp.w	r8, #0
 8007116:	dd9c      	ble.n	8007052 <__sflush_r+0x1a>
 8007118:	6a21      	ldr	r1, [r4, #32]
 800711a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800711c:	4643      	mov	r3, r8
 800711e:	463a      	mov	r2, r7
 8007120:	4628      	mov	r0, r5
 8007122:	47b0      	blx	r6
 8007124:	2800      	cmp	r0, #0
 8007126:	dc06      	bgt.n	8007136 <__sflush_r+0xfe>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e78e      	b.n	8007054 <__sflush_r+0x1c>
 8007136:	4407      	add	r7, r0
 8007138:	eba8 0800 	sub.w	r8, r8, r0
 800713c:	e7e9      	b.n	8007112 <__sflush_r+0xda>
 800713e:	bf00      	nop
 8007140:	20400001 	.word	0x20400001

08007144 <_fflush_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	690b      	ldr	r3, [r1, #16]
 8007148:	4605      	mov	r5, r0
 800714a:	460c      	mov	r4, r1
 800714c:	b913      	cbnz	r3, 8007154 <_fflush_r+0x10>
 800714e:	2500      	movs	r5, #0
 8007150:	4628      	mov	r0, r5
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	b118      	cbz	r0, 800715e <_fflush_r+0x1a>
 8007156:	6983      	ldr	r3, [r0, #24]
 8007158:	b90b      	cbnz	r3, 800715e <_fflush_r+0x1a>
 800715a:	f7ff fd05 	bl	8006b68 <__sinit>
 800715e:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <_fflush_r+0x6c>)
 8007160:	429c      	cmp	r4, r3
 8007162:	d11b      	bne.n	800719c <_fflush_r+0x58>
 8007164:	686c      	ldr	r4, [r5, #4]
 8007166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0ef      	beq.n	800714e <_fflush_r+0xa>
 800716e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007170:	07d0      	lsls	r0, r2, #31
 8007172:	d404      	bmi.n	800717e <_fflush_r+0x3a>
 8007174:	0599      	lsls	r1, r3, #22
 8007176:	d402      	bmi.n	800717e <_fflush_r+0x3a>
 8007178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717a:	f7ff fdb8 	bl	8006cee <__retarget_lock_acquire_recursive>
 800717e:	4628      	mov	r0, r5
 8007180:	4621      	mov	r1, r4
 8007182:	f7ff ff59 	bl	8007038 <__sflush_r>
 8007186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007188:	07da      	lsls	r2, r3, #31
 800718a:	4605      	mov	r5, r0
 800718c:	d4e0      	bmi.n	8007150 <_fflush_r+0xc>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	059b      	lsls	r3, r3, #22
 8007192:	d4dd      	bmi.n	8007150 <_fflush_r+0xc>
 8007194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007196:	f7ff fdab 	bl	8006cf0 <__retarget_lock_release_recursive>
 800719a:	e7d9      	b.n	8007150 <_fflush_r+0xc>
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <_fflush_r+0x70>)
 800719e:	429c      	cmp	r4, r3
 80071a0:	d101      	bne.n	80071a6 <_fflush_r+0x62>
 80071a2:	68ac      	ldr	r4, [r5, #8]
 80071a4:	e7df      	b.n	8007166 <_fflush_r+0x22>
 80071a6:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <_fflush_r+0x74>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	bf08      	it	eq
 80071ac:	68ec      	ldreq	r4, [r5, #12]
 80071ae:	e7da      	b.n	8007166 <_fflush_r+0x22>
 80071b0:	08007bf0 	.word	0x08007bf0
 80071b4:	08007c10 	.word	0x08007c10
 80071b8:	08007bd0 	.word	0x08007bd0

080071bc <_lseek_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	; (80071dc <_lseek_r+0x20>)
 80071c0:	4604      	mov	r4, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f7f9 fe42 	bl	8000e54 <_lseek>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_lseek_r+0x1e>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_lseek_r+0x1e>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	20004bd4 	.word	0x20004bd4

080071e0 <__malloc_lock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__malloc_lock+0x8>)
 80071e2:	f7ff bd84 	b.w	8006cee <__retarget_lock_acquire_recursive>
 80071e6:	bf00      	nop
 80071e8:	20004bc8 	.word	0x20004bc8

080071ec <__malloc_unlock>:
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__malloc_unlock+0x8>)
 80071ee:	f7ff bd7f 	b.w	8006cf0 <__retarget_lock_release_recursive>
 80071f2:	bf00      	nop
 80071f4:	20004bc8 	.word	0x20004bc8

080071f8 <_free_r>:
 80071f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d044      	beq.n	8007288 <_free_r+0x90>
 80071fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007202:	9001      	str	r0, [sp, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f1a1 0404 	sub.w	r4, r1, #4
 800720a:	bfb8      	it	lt
 800720c:	18e4      	addlt	r4, r4, r3
 800720e:	f7ff ffe7 	bl	80071e0 <__malloc_lock>
 8007212:	4a1e      	ldr	r2, [pc, #120]	; (800728c <_free_r+0x94>)
 8007214:	9801      	ldr	r0, [sp, #4]
 8007216:	6813      	ldr	r3, [r2, #0]
 8007218:	b933      	cbnz	r3, 8007228 <_free_r+0x30>
 800721a:	6063      	str	r3, [r4, #4]
 800721c:	6014      	str	r4, [r2, #0]
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007224:	f7ff bfe2 	b.w	80071ec <__malloc_unlock>
 8007228:	42a3      	cmp	r3, r4
 800722a:	d908      	bls.n	800723e <_free_r+0x46>
 800722c:	6825      	ldr	r5, [r4, #0]
 800722e:	1961      	adds	r1, r4, r5
 8007230:	428b      	cmp	r3, r1
 8007232:	bf01      	itttt	eq
 8007234:	6819      	ldreq	r1, [r3, #0]
 8007236:	685b      	ldreq	r3, [r3, #4]
 8007238:	1949      	addeq	r1, r1, r5
 800723a:	6021      	streq	r1, [r4, #0]
 800723c:	e7ed      	b.n	800721a <_free_r+0x22>
 800723e:	461a      	mov	r2, r3
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	b10b      	cbz	r3, 8007248 <_free_r+0x50>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d9fa      	bls.n	800723e <_free_r+0x46>
 8007248:	6811      	ldr	r1, [r2, #0]
 800724a:	1855      	adds	r5, r2, r1
 800724c:	42a5      	cmp	r5, r4
 800724e:	d10b      	bne.n	8007268 <_free_r+0x70>
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	4421      	add	r1, r4
 8007254:	1854      	adds	r4, r2, r1
 8007256:	42a3      	cmp	r3, r4
 8007258:	6011      	str	r1, [r2, #0]
 800725a:	d1e0      	bne.n	800721e <_free_r+0x26>
 800725c:	681c      	ldr	r4, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	6053      	str	r3, [r2, #4]
 8007262:	4421      	add	r1, r4
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	e7da      	b.n	800721e <_free_r+0x26>
 8007268:	d902      	bls.n	8007270 <_free_r+0x78>
 800726a:	230c      	movs	r3, #12
 800726c:	6003      	str	r3, [r0, #0]
 800726e:	e7d6      	b.n	800721e <_free_r+0x26>
 8007270:	6825      	ldr	r5, [r4, #0]
 8007272:	1961      	adds	r1, r4, r5
 8007274:	428b      	cmp	r3, r1
 8007276:	bf04      	itt	eq
 8007278:	6819      	ldreq	r1, [r3, #0]
 800727a:	685b      	ldreq	r3, [r3, #4]
 800727c:	6063      	str	r3, [r4, #4]
 800727e:	bf04      	itt	eq
 8007280:	1949      	addeq	r1, r1, r5
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	6054      	str	r4, [r2, #4]
 8007286:	e7ca      	b.n	800721e <_free_r+0x26>
 8007288:	b003      	add	sp, #12
 800728a:	bd30      	pop	{r4, r5, pc}
 800728c:	20004bcc 	.word	0x20004bcc

08007290 <__sfputc_r>:
 8007290:	6893      	ldr	r3, [r2, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	b410      	push	{r4}
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	da08      	bge.n	80072ae <__sfputc_r+0x1e>
 800729c:	6994      	ldr	r4, [r2, #24]
 800729e:	42a3      	cmp	r3, r4
 80072a0:	db01      	blt.n	80072a6 <__sfputc_r+0x16>
 80072a2:	290a      	cmp	r1, #10
 80072a4:	d103      	bne.n	80072ae <__sfputc_r+0x1e>
 80072a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072aa:	f000 baf1 	b.w	8007890 <__swbuf_r>
 80072ae:	6813      	ldr	r3, [r2, #0]
 80072b0:	1c58      	adds	r0, r3, #1
 80072b2:	6010      	str	r0, [r2, #0]
 80072b4:	7019      	strb	r1, [r3, #0]
 80072b6:	4608      	mov	r0, r1
 80072b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072bc:	4770      	bx	lr

080072be <__sfputs_r>:
 80072be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	18d5      	adds	r5, r2, r3
 80072c8:	42ac      	cmp	r4, r5
 80072ca:	d101      	bne.n	80072d0 <__sfputs_r+0x12>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e007      	b.n	80072e0 <__sfputs_r+0x22>
 80072d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d4:	463a      	mov	r2, r7
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ffda 	bl	8007290 <__sfputc_r>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d1f3      	bne.n	80072c8 <__sfputs_r+0xa>
 80072e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072e4 <_vfiprintf_r>:
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	460d      	mov	r5, r1
 80072ea:	b09d      	sub	sp, #116	; 0x74
 80072ec:	4614      	mov	r4, r2
 80072ee:	4698      	mov	r8, r3
 80072f0:	4606      	mov	r6, r0
 80072f2:	b118      	cbz	r0, 80072fc <_vfiprintf_r+0x18>
 80072f4:	6983      	ldr	r3, [r0, #24]
 80072f6:	b90b      	cbnz	r3, 80072fc <_vfiprintf_r+0x18>
 80072f8:	f7ff fc36 	bl	8006b68 <__sinit>
 80072fc:	4b89      	ldr	r3, [pc, #548]	; (8007524 <_vfiprintf_r+0x240>)
 80072fe:	429d      	cmp	r5, r3
 8007300:	d11b      	bne.n	800733a <_vfiprintf_r+0x56>
 8007302:	6875      	ldr	r5, [r6, #4]
 8007304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	d405      	bmi.n	8007316 <_vfiprintf_r+0x32>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	059a      	lsls	r2, r3, #22
 800730e:	d402      	bmi.n	8007316 <_vfiprintf_r+0x32>
 8007310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007312:	f7ff fcec 	bl	8006cee <__retarget_lock_acquire_recursive>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	071b      	lsls	r3, r3, #28
 800731a:	d501      	bpl.n	8007320 <_vfiprintf_r+0x3c>
 800731c:	692b      	ldr	r3, [r5, #16]
 800731e:	b9eb      	cbnz	r3, 800735c <_vfiprintf_r+0x78>
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f000 fb06 	bl	8007934 <__swsetup_r>
 8007328:	b1c0      	cbz	r0, 800735c <_vfiprintf_r+0x78>
 800732a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800732c:	07dc      	lsls	r4, r3, #31
 800732e:	d50e      	bpl.n	800734e <_vfiprintf_r+0x6a>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	b01d      	add	sp, #116	; 0x74
 8007336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	4b7b      	ldr	r3, [pc, #492]	; (8007528 <_vfiprintf_r+0x244>)
 800733c:	429d      	cmp	r5, r3
 800733e:	d101      	bne.n	8007344 <_vfiprintf_r+0x60>
 8007340:	68b5      	ldr	r5, [r6, #8]
 8007342:	e7df      	b.n	8007304 <_vfiprintf_r+0x20>
 8007344:	4b79      	ldr	r3, [pc, #484]	; (800752c <_vfiprintf_r+0x248>)
 8007346:	429d      	cmp	r5, r3
 8007348:	bf08      	it	eq
 800734a:	68f5      	ldreq	r5, [r6, #12]
 800734c:	e7da      	b.n	8007304 <_vfiprintf_r+0x20>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	0598      	lsls	r0, r3, #22
 8007352:	d4ed      	bmi.n	8007330 <_vfiprintf_r+0x4c>
 8007354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007356:	f7ff fccb 	bl	8006cf0 <__retarget_lock_release_recursive>
 800735a:	e7e9      	b.n	8007330 <_vfiprintf_r+0x4c>
 800735c:	2300      	movs	r3, #0
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	2320      	movs	r3, #32
 8007362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007366:	f8cd 800c 	str.w	r8, [sp, #12]
 800736a:	2330      	movs	r3, #48	; 0x30
 800736c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007530 <_vfiprintf_r+0x24c>
 8007370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007374:	f04f 0901 	mov.w	r9, #1
 8007378:	4623      	mov	r3, r4
 800737a:	469a      	mov	sl, r3
 800737c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007380:	b10a      	cbz	r2, 8007386 <_vfiprintf_r+0xa2>
 8007382:	2a25      	cmp	r2, #37	; 0x25
 8007384:	d1f9      	bne.n	800737a <_vfiprintf_r+0x96>
 8007386:	ebba 0b04 	subs.w	fp, sl, r4
 800738a:	d00b      	beq.n	80073a4 <_vfiprintf_r+0xc0>
 800738c:	465b      	mov	r3, fp
 800738e:	4622      	mov	r2, r4
 8007390:	4629      	mov	r1, r5
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ff93 	bl	80072be <__sfputs_r>
 8007398:	3001      	adds	r0, #1
 800739a:	f000 80aa 	beq.w	80074f2 <_vfiprintf_r+0x20e>
 800739e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073a0:	445a      	add	r2, fp
 80073a2:	9209      	str	r2, [sp, #36]	; 0x24
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80a2 	beq.w	80074f2 <_vfiprintf_r+0x20e>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295
 80073b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b8:	f10a 0a01 	add.w	sl, sl, #1
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073c4:	931a      	str	r3, [sp, #104]	; 0x68
 80073c6:	4654      	mov	r4, sl
 80073c8:	2205      	movs	r2, #5
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4858      	ldr	r0, [pc, #352]	; (8007530 <_vfiprintf_r+0x24c>)
 80073d0:	f7f8 ff36 	bl	8000240 <memchr>
 80073d4:	9a04      	ldr	r2, [sp, #16]
 80073d6:	b9d8      	cbnz	r0, 8007410 <_vfiprintf_r+0x12c>
 80073d8:	06d1      	lsls	r1, r2, #27
 80073da:	bf44      	itt	mi
 80073dc:	2320      	movmi	r3, #32
 80073de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e2:	0713      	lsls	r3, r2, #28
 80073e4:	bf44      	itt	mi
 80073e6:	232b      	movmi	r3, #43	; 0x2b
 80073e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ec:	f89a 3000 	ldrb.w	r3, [sl]
 80073f0:	2b2a      	cmp	r3, #42	; 0x2a
 80073f2:	d015      	beq.n	8007420 <_vfiprintf_r+0x13c>
 80073f4:	9a07      	ldr	r2, [sp, #28]
 80073f6:	4654      	mov	r4, sl
 80073f8:	2000      	movs	r0, #0
 80073fa:	f04f 0c0a 	mov.w	ip, #10
 80073fe:	4621      	mov	r1, r4
 8007400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007404:	3b30      	subs	r3, #48	; 0x30
 8007406:	2b09      	cmp	r3, #9
 8007408:	d94e      	bls.n	80074a8 <_vfiprintf_r+0x1c4>
 800740a:	b1b0      	cbz	r0, 800743a <_vfiprintf_r+0x156>
 800740c:	9207      	str	r2, [sp, #28]
 800740e:	e014      	b.n	800743a <_vfiprintf_r+0x156>
 8007410:	eba0 0308 	sub.w	r3, r0, r8
 8007414:	fa09 f303 	lsl.w	r3, r9, r3
 8007418:	4313      	orrs	r3, r2
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	46a2      	mov	sl, r4
 800741e:	e7d2      	b.n	80073c6 <_vfiprintf_r+0xe2>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	1d19      	adds	r1, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	9103      	str	r1, [sp, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfbb      	ittet	lt
 800742c:	425b      	neglt	r3, r3
 800742e:	f042 0202 	orrlt.w	r2, r2, #2
 8007432:	9307      	strge	r3, [sp, #28]
 8007434:	9307      	strlt	r3, [sp, #28]
 8007436:	bfb8      	it	lt
 8007438:	9204      	strlt	r2, [sp, #16]
 800743a:	7823      	ldrb	r3, [r4, #0]
 800743c:	2b2e      	cmp	r3, #46	; 0x2e
 800743e:	d10c      	bne.n	800745a <_vfiprintf_r+0x176>
 8007440:	7863      	ldrb	r3, [r4, #1]
 8007442:	2b2a      	cmp	r3, #42	; 0x2a
 8007444:	d135      	bne.n	80074b2 <_vfiprintf_r+0x1ce>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfb8      	it	lt
 8007452:	f04f 33ff 	movlt.w	r3, #4294967295
 8007456:	3402      	adds	r4, #2
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007540 <_vfiprintf_r+0x25c>
 800745e:	7821      	ldrb	r1, [r4, #0]
 8007460:	2203      	movs	r2, #3
 8007462:	4650      	mov	r0, sl
 8007464:	f7f8 feec 	bl	8000240 <memchr>
 8007468:	b140      	cbz	r0, 800747c <_vfiprintf_r+0x198>
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	eba0 000a 	sub.w	r0, r0, sl
 8007470:	fa03 f000 	lsl.w	r0, r3, r0
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	4303      	orrs	r3, r0
 8007478:	3401      	adds	r4, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	482c      	ldr	r0, [pc, #176]	; (8007534 <_vfiprintf_r+0x250>)
 8007482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007486:	2206      	movs	r2, #6
 8007488:	f7f8 feda 	bl	8000240 <memchr>
 800748c:	2800      	cmp	r0, #0
 800748e:	d03f      	beq.n	8007510 <_vfiprintf_r+0x22c>
 8007490:	4b29      	ldr	r3, [pc, #164]	; (8007538 <_vfiprintf_r+0x254>)
 8007492:	bb1b      	cbnz	r3, 80074dc <_vfiprintf_r+0x1f8>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	3307      	adds	r3, #7
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	3308      	adds	r3, #8
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a2:	443b      	add	r3, r7
 80074a4:	9309      	str	r3, [sp, #36]	; 0x24
 80074a6:	e767      	b.n	8007378 <_vfiprintf_r+0x94>
 80074a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ac:	460c      	mov	r4, r1
 80074ae:	2001      	movs	r0, #1
 80074b0:	e7a5      	b.n	80073fe <_vfiprintf_r+0x11a>
 80074b2:	2300      	movs	r3, #0
 80074b4:	3401      	adds	r4, #1
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4620      	mov	r0, r4
 80074c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c4:	3a30      	subs	r2, #48	; 0x30
 80074c6:	2a09      	cmp	r2, #9
 80074c8:	d903      	bls.n	80074d2 <_vfiprintf_r+0x1ee>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c5      	beq.n	800745a <_vfiprintf_r+0x176>
 80074ce:	9105      	str	r1, [sp, #20]
 80074d0:	e7c3      	b.n	800745a <_vfiprintf_r+0x176>
 80074d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d6:	4604      	mov	r4, r0
 80074d8:	2301      	movs	r3, #1
 80074da:	e7f0      	b.n	80074be <_vfiprintf_r+0x1da>
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4b16      	ldr	r3, [pc, #88]	; (800753c <_vfiprintf_r+0x258>)
 80074e4:	a904      	add	r1, sp, #16
 80074e6:	4630      	mov	r0, r6
 80074e8:	f3af 8000 	nop.w
 80074ec:	4607      	mov	r7, r0
 80074ee:	1c78      	adds	r0, r7, #1
 80074f0:	d1d6      	bne.n	80074a0 <_vfiprintf_r+0x1bc>
 80074f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f4:	07d9      	lsls	r1, r3, #31
 80074f6:	d405      	bmi.n	8007504 <_vfiprintf_r+0x220>
 80074f8:	89ab      	ldrh	r3, [r5, #12]
 80074fa:	059a      	lsls	r2, r3, #22
 80074fc:	d402      	bmi.n	8007504 <_vfiprintf_r+0x220>
 80074fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007500:	f7ff fbf6 	bl	8006cf0 <__retarget_lock_release_recursive>
 8007504:	89ab      	ldrh	r3, [r5, #12]
 8007506:	065b      	lsls	r3, r3, #25
 8007508:	f53f af12 	bmi.w	8007330 <_vfiprintf_r+0x4c>
 800750c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800750e:	e711      	b.n	8007334 <_vfiprintf_r+0x50>
 8007510:	ab03      	add	r3, sp, #12
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	462a      	mov	r2, r5
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <_vfiprintf_r+0x258>)
 8007518:	a904      	add	r1, sp, #16
 800751a:	4630      	mov	r0, r6
 800751c:	f000 f880 	bl	8007620 <_printf_i>
 8007520:	e7e4      	b.n	80074ec <_vfiprintf_r+0x208>
 8007522:	bf00      	nop
 8007524:	08007bf0 	.word	0x08007bf0
 8007528:	08007c10 	.word	0x08007c10
 800752c:	08007bd0 	.word	0x08007bd0
 8007530:	08007c34 	.word	0x08007c34
 8007534:	08007c3e 	.word	0x08007c3e
 8007538:	00000000 	.word	0x00000000
 800753c:	080072bf 	.word	0x080072bf
 8007540:	08007c3a 	.word	0x08007c3a

08007544 <_printf_common>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	4616      	mov	r6, r2
 800754a:	4699      	mov	r9, r3
 800754c:	688a      	ldr	r2, [r1, #8]
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007554:	4293      	cmp	r3, r2
 8007556:	bfb8      	it	lt
 8007558:	4613      	movlt	r3, r2
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007560:	4607      	mov	r7, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b10a      	cbz	r2, 800756a <_printf_common+0x26>
 8007566:	3301      	adds	r3, #1
 8007568:	6033      	str	r3, [r6, #0]
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	0699      	lsls	r1, r3, #26
 800756e:	bf42      	ittt	mi
 8007570:	6833      	ldrmi	r3, [r6, #0]
 8007572:	3302      	addmi	r3, #2
 8007574:	6033      	strmi	r3, [r6, #0]
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	f015 0506 	ands.w	r5, r5, #6
 800757c:	d106      	bne.n	800758c <_printf_common+0x48>
 800757e:	f104 0a19 	add.w	sl, r4, #25
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	6832      	ldr	r2, [r6, #0]
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc26      	bgt.n	80075da <_printf_common+0x96>
 800758c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007590:	1e13      	subs	r3, r2, #0
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	bf18      	it	ne
 8007596:	2301      	movne	r3, #1
 8007598:	0692      	lsls	r2, r2, #26
 800759a:	d42b      	bmi.n	80075f4 <_printf_common+0xb0>
 800759c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a0:	4649      	mov	r1, r9
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	3001      	adds	r0, #1
 80075a8:	d01e      	beq.n	80075e8 <_printf_common+0xa4>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	68e5      	ldr	r5, [r4, #12]
 80075ae:	6832      	ldr	r2, [r6, #0]
 80075b0:	f003 0306 	and.w	r3, r3, #6
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	bf08      	it	eq
 80075b8:	1aad      	subeq	r5, r5, r2
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	6922      	ldr	r2, [r4, #16]
 80075be:	bf0c      	ite	eq
 80075c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c4:	2500      	movne	r5, #0
 80075c6:	4293      	cmp	r3, r2
 80075c8:	bfc4      	itt	gt
 80075ca:	1a9b      	subgt	r3, r3, r2
 80075cc:	18ed      	addgt	r5, r5, r3
 80075ce:	2600      	movs	r6, #0
 80075d0:	341a      	adds	r4, #26
 80075d2:	42b5      	cmp	r5, r6
 80075d4:	d11a      	bne.n	800760c <_printf_common+0xc8>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e008      	b.n	80075ec <_printf_common+0xa8>
 80075da:	2301      	movs	r3, #1
 80075dc:	4652      	mov	r2, sl
 80075de:	4649      	mov	r1, r9
 80075e0:	4638      	mov	r0, r7
 80075e2:	47c0      	blx	r8
 80075e4:	3001      	adds	r0, #1
 80075e6:	d103      	bne.n	80075f0 <_printf_common+0xac>
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f0:	3501      	adds	r5, #1
 80075f2:	e7c6      	b.n	8007582 <_printf_common+0x3e>
 80075f4:	18e1      	adds	r1, r4, r3
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	2030      	movs	r0, #48	; 0x30
 80075fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075fe:	4422      	add	r2, r4
 8007600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007608:	3302      	adds	r3, #2
 800760a:	e7c7      	b.n	800759c <_printf_common+0x58>
 800760c:	2301      	movs	r3, #1
 800760e:	4622      	mov	r2, r4
 8007610:	4649      	mov	r1, r9
 8007612:	4638      	mov	r0, r7
 8007614:	47c0      	blx	r8
 8007616:	3001      	adds	r0, #1
 8007618:	d0e6      	beq.n	80075e8 <_printf_common+0xa4>
 800761a:	3601      	adds	r6, #1
 800761c:	e7d9      	b.n	80075d2 <_printf_common+0x8e>
	...

08007620 <_printf_i>:
 8007620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	7e0f      	ldrb	r7, [r1, #24]
 8007626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007628:	2f78      	cmp	r7, #120	; 0x78
 800762a:	4691      	mov	r9, r2
 800762c:	4680      	mov	r8, r0
 800762e:	460c      	mov	r4, r1
 8007630:	469a      	mov	sl, r3
 8007632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007636:	d807      	bhi.n	8007648 <_printf_i+0x28>
 8007638:	2f62      	cmp	r7, #98	; 0x62
 800763a:	d80a      	bhi.n	8007652 <_printf_i+0x32>
 800763c:	2f00      	cmp	r7, #0
 800763e:	f000 80d8 	beq.w	80077f2 <_printf_i+0x1d2>
 8007642:	2f58      	cmp	r7, #88	; 0x58
 8007644:	f000 80a3 	beq.w	800778e <_printf_i+0x16e>
 8007648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007650:	e03a      	b.n	80076c8 <_printf_i+0xa8>
 8007652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007656:	2b15      	cmp	r3, #21
 8007658:	d8f6      	bhi.n	8007648 <_printf_i+0x28>
 800765a:	a101      	add	r1, pc, #4	; (adr r1, 8007660 <_printf_i+0x40>)
 800765c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007660:	080076b9 	.word	0x080076b9
 8007664:	080076cd 	.word	0x080076cd
 8007668:	08007649 	.word	0x08007649
 800766c:	08007649 	.word	0x08007649
 8007670:	08007649 	.word	0x08007649
 8007674:	08007649 	.word	0x08007649
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007649 	.word	0x08007649
 8007680:	08007649 	.word	0x08007649
 8007684:	08007649 	.word	0x08007649
 8007688:	08007649 	.word	0x08007649
 800768c:	080077d9 	.word	0x080077d9
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080077bb 	.word	0x080077bb
 8007698:	08007649 	.word	0x08007649
 800769c:	08007649 	.word	0x08007649
 80076a0:	080077fb 	.word	0x080077fb
 80076a4:	08007649 	.word	0x08007649
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007649 	.word	0x08007649
 80076b0:	08007649 	.word	0x08007649
 80076b4:	080077c3 	.word	0x080077c3
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0a3      	b.n	8007814 <_printf_i+0x1f4>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	6829      	ldr	r1, [r5, #0]
 80076d0:	0606      	lsls	r6, r0, #24
 80076d2:	f101 0304 	add.w	r3, r1, #4
 80076d6:	d50a      	bpl.n	80076ee <_printf_i+0xce>
 80076d8:	680e      	ldr	r6, [r1, #0]
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	2e00      	cmp	r6, #0
 80076de:	da03      	bge.n	80076e8 <_printf_i+0xc8>
 80076e0:	232d      	movs	r3, #45	; 0x2d
 80076e2:	4276      	negs	r6, r6
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	485e      	ldr	r0, [pc, #376]	; (8007864 <_printf_i+0x244>)
 80076ea:	230a      	movs	r3, #10
 80076ec:	e019      	b.n	8007722 <_printf_i+0x102>
 80076ee:	680e      	ldr	r6, [r1, #0]
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076f6:	bf18      	it	ne
 80076f8:	b236      	sxthne	r6, r6
 80076fa:	e7ef      	b.n	80076dc <_printf_i+0xbc>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	1d19      	adds	r1, r3, #4
 8007702:	6029      	str	r1, [r5, #0]
 8007704:	0601      	lsls	r1, r0, #24
 8007706:	d501      	bpl.n	800770c <_printf_i+0xec>
 8007708:	681e      	ldr	r6, [r3, #0]
 800770a:	e002      	b.n	8007712 <_printf_i+0xf2>
 800770c:	0646      	lsls	r6, r0, #25
 800770e:	d5fb      	bpl.n	8007708 <_printf_i+0xe8>
 8007710:	881e      	ldrh	r6, [r3, #0]
 8007712:	4854      	ldr	r0, [pc, #336]	; (8007864 <_printf_i+0x244>)
 8007714:	2f6f      	cmp	r7, #111	; 0x6f
 8007716:	bf0c      	ite	eq
 8007718:	2308      	moveq	r3, #8
 800771a:	230a      	movne	r3, #10
 800771c:	2100      	movs	r1, #0
 800771e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007722:	6865      	ldr	r5, [r4, #4]
 8007724:	60a5      	str	r5, [r4, #8]
 8007726:	2d00      	cmp	r5, #0
 8007728:	bfa2      	ittt	ge
 800772a:	6821      	ldrge	r1, [r4, #0]
 800772c:	f021 0104 	bicge.w	r1, r1, #4
 8007730:	6021      	strge	r1, [r4, #0]
 8007732:	b90e      	cbnz	r6, 8007738 <_printf_i+0x118>
 8007734:	2d00      	cmp	r5, #0
 8007736:	d04d      	beq.n	80077d4 <_printf_i+0x1b4>
 8007738:	4615      	mov	r5, r2
 800773a:	fbb6 f1f3 	udiv	r1, r6, r3
 800773e:	fb03 6711 	mls	r7, r3, r1, r6
 8007742:	5dc7      	ldrb	r7, [r0, r7]
 8007744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007748:	4637      	mov	r7, r6
 800774a:	42bb      	cmp	r3, r7
 800774c:	460e      	mov	r6, r1
 800774e:	d9f4      	bls.n	800773a <_printf_i+0x11a>
 8007750:	2b08      	cmp	r3, #8
 8007752:	d10b      	bne.n	800776c <_printf_i+0x14c>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	07de      	lsls	r6, r3, #31
 8007758:	d508      	bpl.n	800776c <_printf_i+0x14c>
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	bfde      	ittt	le
 8007762:	2330      	movle	r3, #48	; 0x30
 8007764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800776c:	1b52      	subs	r2, r2, r5
 800776e:	6122      	str	r2, [r4, #16]
 8007770:	f8cd a000 	str.w	sl, [sp]
 8007774:	464b      	mov	r3, r9
 8007776:	aa03      	add	r2, sp, #12
 8007778:	4621      	mov	r1, r4
 800777a:	4640      	mov	r0, r8
 800777c:	f7ff fee2 	bl	8007544 <_printf_common>
 8007780:	3001      	adds	r0, #1
 8007782:	d14c      	bne.n	800781e <_printf_i+0x1fe>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b004      	add	sp, #16
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	4835      	ldr	r0, [pc, #212]	; (8007864 <_printf_i+0x244>)
 8007790:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f851 6b04 	ldr.w	r6, [r1], #4
 800779c:	6029      	str	r1, [r5, #0]
 800779e:	061d      	lsls	r5, r3, #24
 80077a0:	d514      	bpl.n	80077cc <_printf_i+0x1ac>
 80077a2:	07df      	lsls	r7, r3, #31
 80077a4:	bf44      	itt	mi
 80077a6:	f043 0320 	orrmi.w	r3, r3, #32
 80077aa:	6023      	strmi	r3, [r4, #0]
 80077ac:	b91e      	cbnz	r6, 80077b6 <_printf_i+0x196>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f023 0320 	bic.w	r3, r3, #32
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	2310      	movs	r3, #16
 80077b8:	e7b0      	b.n	800771c <_printf_i+0xfc>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	2378      	movs	r3, #120	; 0x78
 80077c4:	4828      	ldr	r0, [pc, #160]	; (8007868 <_printf_i+0x248>)
 80077c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ca:	e7e3      	b.n	8007794 <_printf_i+0x174>
 80077cc:	0659      	lsls	r1, r3, #25
 80077ce:	bf48      	it	mi
 80077d0:	b2b6      	uxthmi	r6, r6
 80077d2:	e7e6      	b.n	80077a2 <_printf_i+0x182>
 80077d4:	4615      	mov	r5, r2
 80077d6:	e7bb      	b.n	8007750 <_printf_i+0x130>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	6961      	ldr	r1, [r4, #20]
 80077de:	1d18      	adds	r0, r3, #4
 80077e0:	6028      	str	r0, [r5, #0]
 80077e2:	0635      	lsls	r5, r6, #24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0x1cc>
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0x1d2>
 80077ec:	0670      	lsls	r0, r6, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0x1c8>
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	4615      	mov	r5, r2
 80077f8:	e7ba      	b.n	8007770 <_printf_i+0x150>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	6862      	ldr	r2, [r4, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fd1a 	bl	8000240 <memchr>
 800780c:	b108      	cbz	r0, 8007812 <_printf_i+0x1f2>
 800780e:	1b40      	subs	r0, r0, r5
 8007810:	6060      	str	r0, [r4, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	e7a8      	b.n	8007770 <_printf_i+0x150>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	462a      	mov	r2, r5
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d0ab      	beq.n	8007784 <_printf_i+0x164>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d413      	bmi.n	800785a <_printf_i+0x23a>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e7a4      	b.n	8007788 <_printf_i+0x168>
 800783e:	2301      	movs	r3, #1
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d09b      	beq.n	8007784 <_printf_i+0x164>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf2      	bgt.n	800783e <_printf_i+0x21e>
 8007858:	e7eb      	b.n	8007832 <_printf_i+0x212>
 800785a:	2500      	movs	r5, #0
 800785c:	f104 0619 	add.w	r6, r4, #25
 8007860:	e7f5      	b.n	800784e <_printf_i+0x22e>
 8007862:	bf00      	nop
 8007864:	08007c45 	.word	0x08007c45
 8007868:	08007c56 	.word	0x08007c56

0800786c <_read_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	; (800788c <_read_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f7f9 faa6 	bl	8000dcc <_read>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_read_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_read_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20004bd4 	.word	0x20004bd4

08007890 <__swbuf_r>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	460e      	mov	r6, r1
 8007894:	4614      	mov	r4, r2
 8007896:	4605      	mov	r5, r0
 8007898:	b118      	cbz	r0, 80078a2 <__swbuf_r+0x12>
 800789a:	6983      	ldr	r3, [r0, #24]
 800789c:	b90b      	cbnz	r3, 80078a2 <__swbuf_r+0x12>
 800789e:	f7ff f963 	bl	8006b68 <__sinit>
 80078a2:	4b21      	ldr	r3, [pc, #132]	; (8007928 <__swbuf_r+0x98>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d12b      	bne.n	8007900 <__swbuf_r+0x70>
 80078a8:	686c      	ldr	r4, [r5, #4]
 80078aa:	69a3      	ldr	r3, [r4, #24]
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	071a      	lsls	r2, r3, #28
 80078b2:	d52f      	bpl.n	8007914 <__swbuf_r+0x84>
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	b36b      	cbz	r3, 8007914 <__swbuf_r+0x84>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1ac0      	subs	r0, r0, r3
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	b2f6      	uxtb	r6, r6
 80078c2:	4283      	cmp	r3, r0
 80078c4:	4637      	mov	r7, r6
 80078c6:	dc04      	bgt.n	80078d2 <__swbuf_r+0x42>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7ff fc3a 	bl	8007144 <_fflush_r>
 80078d0:	bb30      	cbnz	r0, 8007920 <__swbuf_r+0x90>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	701e      	strb	r6, [r3, #0]
 80078e0:	6963      	ldr	r3, [r4, #20]
 80078e2:	3001      	adds	r0, #1
 80078e4:	4283      	cmp	r3, r0
 80078e6:	d004      	beq.n	80078f2 <__swbuf_r+0x62>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	07db      	lsls	r3, r3, #31
 80078ec:	d506      	bpl.n	80078fc <__swbuf_r+0x6c>
 80078ee:	2e0a      	cmp	r6, #10
 80078f0:	d104      	bne.n	80078fc <__swbuf_r+0x6c>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff fc25 	bl	8007144 <_fflush_r>
 80078fa:	b988      	cbnz	r0, 8007920 <__swbuf_r+0x90>
 80078fc:	4638      	mov	r0, r7
 80078fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <__swbuf_r+0x9c>)
 8007902:	429c      	cmp	r4, r3
 8007904:	d101      	bne.n	800790a <__swbuf_r+0x7a>
 8007906:	68ac      	ldr	r4, [r5, #8]
 8007908:	e7cf      	b.n	80078aa <__swbuf_r+0x1a>
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <__swbuf_r+0xa0>)
 800790c:	429c      	cmp	r4, r3
 800790e:	bf08      	it	eq
 8007910:	68ec      	ldreq	r4, [r5, #12]
 8007912:	e7ca      	b.n	80078aa <__swbuf_r+0x1a>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f80c 	bl	8007934 <__swsetup_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	d0cb      	beq.n	80078b8 <__swbuf_r+0x28>
 8007920:	f04f 37ff 	mov.w	r7, #4294967295
 8007924:	e7ea      	b.n	80078fc <__swbuf_r+0x6c>
 8007926:	bf00      	nop
 8007928:	08007bf0 	.word	0x08007bf0
 800792c:	08007c10 	.word	0x08007c10
 8007930:	08007bd0 	.word	0x08007bd0

08007934 <__swsetup_r>:
 8007934:	4b32      	ldr	r3, [pc, #200]	; (8007a00 <__swsetup_r+0xcc>)
 8007936:	b570      	push	{r4, r5, r6, lr}
 8007938:	681d      	ldr	r5, [r3, #0]
 800793a:	4606      	mov	r6, r0
 800793c:	460c      	mov	r4, r1
 800793e:	b125      	cbz	r5, 800794a <__swsetup_r+0x16>
 8007940:	69ab      	ldr	r3, [r5, #24]
 8007942:	b913      	cbnz	r3, 800794a <__swsetup_r+0x16>
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff f90f 	bl	8006b68 <__sinit>
 800794a:	4b2e      	ldr	r3, [pc, #184]	; (8007a04 <__swsetup_r+0xd0>)
 800794c:	429c      	cmp	r4, r3
 800794e:	d10f      	bne.n	8007970 <__swsetup_r+0x3c>
 8007950:	686c      	ldr	r4, [r5, #4]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007958:	0719      	lsls	r1, r3, #28
 800795a:	d42c      	bmi.n	80079b6 <__swsetup_r+0x82>
 800795c:	06dd      	lsls	r5, r3, #27
 800795e:	d411      	bmi.n	8007984 <__swsetup_r+0x50>
 8007960:	2309      	movs	r3, #9
 8007962:	6033      	str	r3, [r6, #0]
 8007964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	e03e      	b.n	80079ee <__swsetup_r+0xba>
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <__swsetup_r+0xd4>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d101      	bne.n	800797a <__swsetup_r+0x46>
 8007976:	68ac      	ldr	r4, [r5, #8]
 8007978:	e7eb      	b.n	8007952 <__swsetup_r+0x1e>
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <__swsetup_r+0xd8>)
 800797c:	429c      	cmp	r4, r3
 800797e:	bf08      	it	eq
 8007980:	68ec      	ldreq	r4, [r5, #12]
 8007982:	e7e6      	b.n	8007952 <__swsetup_r+0x1e>
 8007984:	0758      	lsls	r0, r3, #29
 8007986:	d512      	bpl.n	80079ae <__swsetup_r+0x7a>
 8007988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798a:	b141      	cbz	r1, 800799e <__swsetup_r+0x6a>
 800798c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007990:	4299      	cmp	r1, r3
 8007992:	d002      	beq.n	800799a <__swsetup_r+0x66>
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff fc2f 	bl	80071f8 <_free_r>
 800799a:	2300      	movs	r3, #0
 800799c:	6363      	str	r3, [r4, #52]	; 0x34
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	2300      	movs	r3, #0
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f043 0308 	orr.w	r3, r3, #8
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	b94b      	cbnz	r3, 80079ce <__swsetup_r+0x9a>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d003      	beq.n	80079ce <__swsetup_r+0x9a>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	f000 f847 	bl	8007a5c <__smakebuf_r>
 80079ce:	89a0      	ldrh	r0, [r4, #12]
 80079d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079d4:	f010 0301 	ands.w	r3, r0, #1
 80079d8:	d00a      	beq.n	80079f0 <__swsetup_r+0xbc>
 80079da:	2300      	movs	r3, #0
 80079dc:	60a3      	str	r3, [r4, #8]
 80079de:	6963      	ldr	r3, [r4, #20]
 80079e0:	425b      	negs	r3, r3
 80079e2:	61a3      	str	r3, [r4, #24]
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	b943      	cbnz	r3, 80079fa <__swsetup_r+0xc6>
 80079e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ec:	d1ba      	bne.n	8007964 <__swsetup_r+0x30>
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	0781      	lsls	r1, r0, #30
 80079f2:	bf58      	it	pl
 80079f4:	6963      	ldrpl	r3, [r4, #20]
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	e7f4      	b.n	80079e4 <__swsetup_r+0xb0>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e7f7      	b.n	80079ee <__swsetup_r+0xba>
 80079fe:	bf00      	nop
 8007a00:	20000010 	.word	0x20000010
 8007a04:	08007bf0 	.word	0x08007bf0
 8007a08:	08007c10 	.word	0x08007c10
 8007a0c:	08007bd0 	.word	0x08007bd0

08007a10 <__swhatbuf_r>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	460e      	mov	r6, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	b096      	sub	sp, #88	; 0x58
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	461d      	mov	r5, r3
 8007a20:	da08      	bge.n	8007a34 <__swhatbuf_r+0x24>
 8007a22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	061a      	lsls	r2, r3, #24
 8007a2c:	d410      	bmi.n	8007a50 <__swhatbuf_r+0x40>
 8007a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a32:	e00e      	b.n	8007a52 <__swhatbuf_r+0x42>
 8007a34:	466a      	mov	r2, sp
 8007a36:	f000 f851 	bl	8007adc <_fstat_r>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	dbf1      	blt.n	8007a22 <__swhatbuf_r+0x12>
 8007a3e:	9a01      	ldr	r2, [sp, #4]
 8007a40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a48:	425a      	negs	r2, r3
 8007a4a:	415a      	adcs	r2, r3
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	e7ee      	b.n	8007a2e <__swhatbuf_r+0x1e>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	2000      	movs	r0, #0
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	b016      	add	sp, #88	; 0x58
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a5c <__smakebuf_r>:
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a60:	079d      	lsls	r5, r3, #30
 8007a62:	4606      	mov	r6, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	d507      	bpl.n	8007a78 <__smakebuf_r+0x1c>
 8007a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	b002      	add	sp, #8
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	ab01      	add	r3, sp, #4
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f7ff ffc8 	bl	8007a10 <__swhatbuf_r>
 8007a80:	9900      	ldr	r1, [sp, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff f96b 	bl	8006d60 <_malloc_r>
 8007a8a:	b948      	cbnz	r0, 8007aa0 <__smakebuf_r+0x44>
 8007a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a90:	059a      	lsls	r2, r3, #22
 8007a92:	d4ef      	bmi.n	8007a74 <__smakebuf_r+0x18>
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7e3      	b.n	8007a68 <__smakebuf_r+0xc>
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <__smakebuf_r+0x7c>)
 8007aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	6163      	str	r3, [r4, #20]
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	6120      	str	r0, [r4, #16]
 8007ab6:	b15b      	cbz	r3, 8007ad0 <__smakebuf_r+0x74>
 8007ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abc:	4630      	mov	r0, r6
 8007abe:	f000 f81f 	bl	8007b00 <_isatty_r>
 8007ac2:	b128      	cbz	r0, 8007ad0 <__smakebuf_r+0x74>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	89a0      	ldrh	r0, [r4, #12]
 8007ad2:	4305      	orrs	r5, r0
 8007ad4:	81a5      	strh	r5, [r4, #12]
 8007ad6:	e7cd      	b.n	8007a74 <__smakebuf_r+0x18>
 8007ad8:	08006b01 	.word	0x08006b01

08007adc <_fstat_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	; (8007afc <_fstat_r+0x20>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	f7f9 f998 	bl	8000e1e <_fstat>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d102      	bne.n	8007af8 <_fstat_r+0x1c>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	b103      	cbz	r3, 8007af8 <_fstat_r+0x1c>
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	bf00      	nop
 8007afc:	20004bd4 	.word	0x20004bd4

08007b00 <_isatty_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_isatty_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 f997 	bl	8000e3e <_isatty>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_isatty_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_isatty_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20004bd4 	.word	0x20004bd4

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
