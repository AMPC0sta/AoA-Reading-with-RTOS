
AOA-Reader-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006870  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b60  08006b60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b68  08006b68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000074  08006be4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  08006be4  00024bcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca65  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ff  00000000  00000000  0003cb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00040108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003540  00000000  00000000  00042a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190bc  00000000  00000000  00045fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a2a8  00000000  00000000  0005f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd8  00000000  00000000  00169354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006a58 	.word	0x08006a58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006a58 	.word	0x08006a58

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC1RES = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fbde 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f827 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f917 	bl	8000788 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f8e5 	bl	8000728 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800055e:	f000 f891 	bl	8000684 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000562:	f003 fb89 	bl	8003c78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000566:	4a09      	ldr	r2, [pc, #36]	; (800058c <main+0x48>)
 8000568:	2100      	movs	r1, #0
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x4c>)
 800056c:	f003 fbee 	bl	8003d4c <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <main+0x50>)
 8000574:	6013      	str	r3, [r2, #0]

  /* creation of Read_AoA */
  Read_AoAHandle = osThreadNew(task1_read_aoa, NULL, &Read_AoA_attributes);
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0x54>)
 8000578:	2100      	movs	r1, #0
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <main+0x58>)
 800057c:	f003 fbe6 	bl	8003d4c <osThreadNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <main+0x5c>)
 8000584:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000586:	f003 fbab 	bl	8003ce0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_ADCEx_Calibration_Start(&hadc1);

  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x46>
 800058c:	08006aa0 	.word	0x08006aa0
 8000590:	08000951 	.word	0x08000951
 8000594:	20000160 	.word	0x20000160
 8000598:	08006ac4 	.word	0x08006ac4
 800059c:	08000961 	.word	0x08000961
 80005a0:	20000164 	.word	0x20000164

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 f986 	bl	80068c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <SystemClock_Config+0xd8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a2b      	ldr	r2, [pc, #172]	; (800067c <SystemClock_Config+0xd8>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xd8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xdc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a25      	ldr	r2, [pc, #148]	; (8000680 <SystemClock_Config+0xdc>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4618      	mov	r0, r3
 800062a:	f001 faa9 	bl	8001b80 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f9c8 	bl	80009c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000638:	f001 fa52 	bl	8001ae0 <HAL_PWREx_EnableOverDrive>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000642:	f000 f9c1 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2103      	movs	r1, #3
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fd3a 	bl	80020dc <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800066e:	f000 f9ab 	bl	80009c8 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC1_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_ADC1_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC1_Init+0x98>)
 800069e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC1_Init+0x98>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC1_Init+0xa0>)
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x98>)
 80006e6:	f000 fb3f 	bl	8000d68 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 f96a 	bl	80009c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006f4:	2303      	movs	r3, #3
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x98>)
 8000706:	f000 fcd9 	bl	80010bc <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000710:	f000 f95a 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000090 	.word	0x20000090
 8000720:	40012000 	.word	0x40012000
 8000724:	0f000001 	.word	0x0f000001

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART3_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART3_UART_Init+0x58>)
 800076c:	f002 fe16 	bl	800339c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f927 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000d8 	.word	0x200000d8
 8000784:	40004800 	.word	0x40004800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b67      	ldr	r3, [pc, #412]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a66      	ldr	r2, [pc, #408]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a60      	ldr	r2, [pc, #384]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b5e      	ldr	r3, [pc, #376]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b5b      	ldr	r3, [pc, #364]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a5a      	ldr	r2, [pc, #360]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b58      	ldr	r3, [pc, #352]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a54      	ldr	r2, [pc, #336]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b52      	ldr	r3, [pc, #328]	; (800093c <MX_GPIO_Init+0x1b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1b4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	; (800093c <MX_GPIO_Init+0x1b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a48      	ldr	r2, [pc, #288]	; (800093c <MX_GPIO_Init+0x1b4>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b46      	ldr	r3, [pc, #280]	; (800093c <MX_GPIO_Init+0x1b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000834:	4842      	ldr	r0, [pc, #264]	; (8000940 <MX_GPIO_Init+0x1b8>)
 8000836:	f001 f91f 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4841      	ldr	r0, [pc, #260]	; (8000944 <MX_GPIO_Init+0x1bc>)
 8000840:	f001 f91a 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	483b      	ldr	r0, [pc, #236]	; (8000948 <MX_GPIO_Init+0x1c0>)
 800085c:	f000 ff60 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4830      	ldr	r0, [pc, #192]	; (8000940 <MX_GPIO_Init+0x1b8>)
 800087e:	f000 ff4f 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000882:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4829      	ldr	r0, [pc, #164]	; (8000940 <MX_GPIO_Init+0x1b8>)
 800089c:	f000 ff40 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4823      	ldr	r0, [pc, #140]	; (8000944 <MX_GPIO_Init+0x1bc>)
 80008b8:	f000 ff32 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481d      	ldr	r0, [pc, #116]	; (8000944 <MX_GPIO_Init+0x1bc>)
 80008d0:	f000 ff26 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e6:	230a      	movs	r3, #10
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <MX_GPIO_Init+0x1c4>)
 80008f2:	f000 ff15 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <MX_GPIO_Init+0x1c4>)
 800090c:	f000 ff08 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000910:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000922:	230b      	movs	r3, #11
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_GPIO_Init+0x1bc>)
 800092e:	f000 fef7 	bl	8001720 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400
 8000944:	40021800 	.word	0x40021800
 8000948:	40020800 	.word	0x40020800
 800094c:	40020000 	.word	0x40020000

08000950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f003 fa9d 	bl	8003e98 <osDelay>
 800095e:	e7fb      	b.n	8000958 <StartDefaultTask+0x8>

08000960 <task1_read_aoa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_read_aoa */
void task1_read_aoa(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	// High Priority Task to read the aoa sensor (potentiometer)
	while(1)
		{
		  //Make LD1 Blink (could be used to mark system is online
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <task1_read_aoa+0x38>)
 800096c:	f001 f89d 	bl	8001aaa <HAL_GPIO_TogglePin>

		  // Read value from potentiometer 1 (AoA Sensor)
		  HAL_ADC_Start(&hadc1);
 8000970:	480a      	ldr	r0, [pc, #40]	; (800099c <task1_read_aoa+0x3c>)
 8000972:	f000 fa3d 	bl	8000df0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8000976:	2101      	movs	r1, #1
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <task1_read_aoa+0x3c>)
 800097a:	f000 fb07 	bl	8000f8c <HAL_ADC_PollForConversion>
		  ADC1RES = HAL_ADC_GetValue(&hadc1);
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <task1_read_aoa+0x3c>)
 8000980:	f000 fb8f 	bl	80010a2 <HAL_ADC_GetValue>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <task1_read_aoa+0x40>)
 800098a:	801a      	strh	r2, [r3, #0]

		  // do one read every seconds
		  osDelay(1000);
 800098c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000990:	f003 fa82 	bl	8003e98 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000994:	e7e8      	b.n	8000968 <task1_read_aoa+0x8>
 8000996:	bf00      	nop
 8000998:	40020400 	.word	0x40020400
 800099c:	20000090 	.word	0x20000090
 80009a0:	20000168 	.word	0x20000168

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 f9b7 	bl	8000d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40001000 	.word	0x40001000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	f06f 0001 	mvn.w	r0, #1
 8000a12:	f000 fe5b 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <HAL_ADC_MspInit+0x74>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d123      	bne.n	8000a8e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_ADC_MspInit+0x78>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a76:	2308      	movs	r3, #8
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_ADC_MspInit+0x7c>)
 8000a8a:	f000 fe49 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40012000 	.word	0x40012000
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ae      	sub	sp, #184	; 0xb8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2290      	movs	r2, #144	; 0x90
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fefd 	bl	80068c4 <memset>
  if(huart->Instance==USART3)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_UART_MspInit+0xb4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d13c      	bne.n	8000b4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fd52 	bl	800258c <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aee:	f7ff ff6b 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0xb8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0xbc>)
 8000b4a:	f000 fde9 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	37b8      	adds	r7, #184	; 0xb8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004800 	.word	0x40004800
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b74:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <HAL_InitTick+0xe0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <HAL_InitTick+0xe0>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_InitTick+0xe0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fcc6 	bl	8002528 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba6:	f001 fc97 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8000baa:	6378      	str	r0, [r7, #52]	; 0x34
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bae:	f001 fc93 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_InitTick+0xe4>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_InitTick+0xe8>)
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_InitTick+0xec>)
 8000bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_InitTick+0xe8>)
 8000bce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_InitTick+0xe8>)
 8000bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_InitTick+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_InitTick+0xe8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_InitTick+0xe8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <HAL_InitTick+0xe8>)
 8000bee:	f002 f8f5 	bl	8002ddc <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d11b      	bne.n	8000c38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <HAL_InitTick+0xe8>)
 8000c02:	f002 f94d 	bl	8002ea0 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d111      	bne.n	8000c38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f000 fd75 	bl	8001704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d808      	bhi.n	8000c32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2036      	movs	r0, #54	; 0x36
 8000c26:	f000 fd51 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0xf0>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e002      	b.n	8000c38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3738      	adds	r7, #56	; 0x38
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	2000016c 	.word	0x2000016c
 8000c50:	40001000 	.word	0x40001000
 8000c54:	20000004 	.word	0x20000004

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM6_DAC_IRQHandler+0x10>)
 8000c8a:	f002 f981 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000016c 	.word	0x2000016c

08000c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 fdb7 	bl	800685c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc29 	bl	8000544 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d00:	08006b70 	.word	0x08006b70
  ldr r2, =_sbss
 8000d04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d08:	20004bcc 	.word	0x20004bcc

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>

08000d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 fccf 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d18:	200f      	movs	r0, #15
 8000d1a:	f7ff ff23 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1e:	f7ff fe59 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200001b8 	.word	0x200001b8

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200001b8 	.word	0x200001b8

08000d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e031      	b.n	8000de2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe4c 	bl	8000a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_ADC_Init+0x84>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	f043 0202 	orr.w	r2, r3, #2
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fad6 	bl	8001368 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	f043 0201 	orr.w	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd2:	e001      	b.n	8000dd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	ffffeefd 	.word	0xffffeefd

08000df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Start+0x1a>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e0ad      	b.n	8000f66 <HAL_ADC_Start+0x176>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d018      	beq.n	8000e52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000e30:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <HAL_ADC_Start+0x184>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a50      	ldr	r2, [pc, #320]	; (8000f78 <HAL_ADC_Start+0x188>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9a      	lsrs	r2, r3, #18
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f9      	bne.n	8000e46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d175      	bne.n	8000f4c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_ADC_Start+0x18c>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9a:	d106      	bne.n	8000eaa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f023 0206 	bic.w	r2, r3, #6
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ea8:	e002      	b.n	8000eb0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_ADC_Start+0x190>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d143      	bne.n	8000f64 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e03a      	b.n	8000f64 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_ADC_Start+0x194>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d10e      	bne.n	8000f16 <HAL_ADC_Start+0x126>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d107      	bne.n	8000f16 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f14:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_ADC_Start+0x190>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d120      	bne.n	8000f64 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_ADC_Start+0x198>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d11b      	bne.n	8000f64 <HAL_ADC_Start+0x174>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d114      	bne.n	8000f64 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	e00b      	b.n	8000f64 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f043 0210 	orr.w	r2, r3, #16
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	fffff8fe 	.word	0xfffff8fe
 8000f80:	40012300 	.word	0x40012300
 8000f84:	40012000 	.word	0x40012000
 8000f88:	40012200 	.word	0x40012200

08000f8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa8:	d113      	bne.n	8000fd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f043 0220 	orr.w	r2, r3, #32
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e063      	b.n	800109a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000fd2:	f7ff febd 	bl	8000d50 <HAL_GetTick>
 8000fd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fd8:	e021      	b.n	800101e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d01d      	beq.n	800101e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_PollForConversion+0x6c>
 8000fe8:	f7ff feb2 	bl	8000d50 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d212      	bcs.n	800101e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b02      	cmp	r3, #2
 8001004:	d00b      	beq.n	800101e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f043 0204 	orr.w	r2, r3, #4
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e03d      	b.n	800109a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b02      	cmp	r3, #2
 800102a:	d1d6      	bne.n	8000fda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f06f 0212 	mvn.w	r2, #18
 8001034:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d123      	bne.n	8001098 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001054:	2b00      	cmp	r3, #0
 8001056:	d11f      	bne.n	8001098 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001070:	2b00      	cmp	r3, #0
 8001072:	d111      	bne.n	8001098 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x1c>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e136      	b.n	8001346 <HAL_ADC_ConfigChannel+0x28a>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d93a      	bls.n	800115e <HAL_ADC_ConfigChannel+0xa2>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010f0:	d035      	beq.n	800115e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68d9      	ldr	r1, [r3, #12]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	3b1e      	subs	r3, #30
 8001108:	2207      	movs	r2, #7
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	400a      	ands	r2, r1
 8001116:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a8d      	ldr	r2, [pc, #564]	; (8001354 <HAL_ADC_ConfigChannel+0x298>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10a      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68d9      	ldr	r1, [r3, #12]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	061a      	lsls	r2, r3, #24
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001136:	e035      	b.n	80011a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68d9      	ldr	r1, [r3, #12]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	4603      	mov	r3, r0
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4403      	add	r3, r0
 8001150:	3b1e      	subs	r3, #30
 8001152:	409a      	lsls	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800115c:	e022      	b.n	80011a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43da      	mvns	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6919      	ldr	r1, [r3, #16]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	4603      	mov	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4403      	add	r3, r0
 800119a:	409a      	lsls	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b06      	cmp	r3, #6
 80011aa:	d824      	bhi.n	80011f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	3b05      	subs	r3, #5
 80011be:	221f      	movs	r2, #31
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43da      	mvns	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	e04c      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d824      	bhi.n	8001248 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b23      	subs	r3, #35	; 0x23
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b23      	subs	r3, #35	; 0x23
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
 8001246:	e023      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b41      	subs	r3, #65	; 0x41
 800125a:	221f      	movs	r2, #31
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43da      	mvns	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b41      	subs	r3, #65	; 0x41
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_ADC_ConfigChannel+0x29c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1f4>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_ADC_ConfigChannel+0x29c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10f      	bne.n	80012da <HAL_ADC_ConfigChannel+0x21e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d10b      	bne.n	80012da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a25      	ldr	r2, [pc, #148]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a22      	ldr	r2, [pc, #136]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_ADC_ConfigChannel+0x29c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d12b      	bne.n	800133c <HAL_ADC_ConfigChannel+0x280>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_ADC_ConfigChannel+0x298>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x23a>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b11      	cmp	r3, #17
 80012f4:	d122      	bne.n	800133c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 80012fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001300:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_ADC_ConfigChannel+0x2a0>)
 8001308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800130c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_ADC_ConfigChannel+0x298>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d111      	bne.n	800133c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_ADC_ConfigChannel+0x2a4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_ADC_ConfigChannel+0x2a8>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9a      	lsrs	r2, r3, #18
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800132e:	e002      	b.n	8001336 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	10000012 	.word	0x10000012
 8001358:	40012000 	.word	0x40012000
 800135c:	40012300 	.word	0x40012300
 8001360:	20000000 	.word	0x20000000
 8001364:	431bde83 	.word	0x431bde83

08001368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001370:	4b78      	ldr	r3, [pc, #480]	; (8001554 <ADC_Init+0x1ec>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a77      	ldr	r2, [pc, #476]	; (8001554 <ADC_Init+0x1ec>)
 8001376:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800137a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <ADC_Init+0x1ec>)
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4973      	ldr	r1, [pc, #460]	; (8001554 <ADC_Init+0x1ec>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	021a      	lsls	r2, r3, #8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	4a58      	ldr	r2, [pc, #352]	; (8001558 <ADC_Init+0x1f0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d022      	beq.n	8001442 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800140a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6899      	ldr	r1, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800142c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6899      	ldr	r1, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e00f      	b.n	8001462 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0202 	bic.w	r2, r2, #2
 8001470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6899      	ldr	r1, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	005a      	lsls	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01b      	beq.n	80014c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800149e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6859      	ldr	r1, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	3b01      	subs	r3, #1
 80014bc:	035a      	lsls	r2, r3, #13
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	e007      	b.n	80014d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	051a      	lsls	r2, r3, #20
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800150c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800151a:	025a      	lsls	r2, r3, #9
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	029a      	lsls	r2, r3, #10
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40012300 	.word	0x40012300
 8001558:	0f000001 	.word	0x0f000001

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	05fa0000 	.word	0x05fa0000

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e175      	b.n	8001a2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8164 	bne.w	8001a26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x56>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80be 	beq.w	8001a26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_GPIO_Init+0x324>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a65      	ldr	r2, [pc, #404]	; (8001a44 <HAL_GPIO_Init+0x324>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_GPIO_Init+0x324>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018c2:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_GPIO_Init+0x328>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_GPIO_Init+0x32c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d037      	beq.n	800195e <HAL_GPIO_Init+0x23e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_GPIO_Init+0x23a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d02b      	beq.n	8001956 <HAL_GPIO_Init+0x236>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <HAL_GPIO_Init+0x338>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d025      	beq.n	8001952 <HAL_GPIO_Init+0x232>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a54      	ldr	r2, [pc, #336]	; (8001a5c <HAL_GPIO_Init+0x33c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01f      	beq.n	800194e <HAL_GPIO_Init+0x22e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a53      	ldr	r2, [pc, #332]	; (8001a60 <HAL_GPIO_Init+0x340>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x22a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x344>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x226>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x348>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x222>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_GPIO_Init+0x34c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x21e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x21a>
 8001936:	2309      	movs	r3, #9
 8001938:	e012      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800193a:	230a      	movs	r3, #10
 800193c:	e010      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800193e:	2308      	movs	r3, #8
 8001940:	e00e      	b.n	8001960 <HAL_GPIO_Init+0x240>
 8001942:	2307      	movs	r3, #7
 8001944:	e00c      	b.n	8001960 <HAL_GPIO_Init+0x240>
 8001946:	2306      	movs	r3, #6
 8001948:	e00a      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800194a:	2305      	movs	r3, #5
 800194c:	e008      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800194e:	2304      	movs	r3, #4
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x240>
 8001952:	2303      	movs	r3, #3
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x240>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x240>
 800195e:	2300      	movs	r3, #0
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	f002 0203 	and.w	r2, r2, #3
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4093      	lsls	r3, r2
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <HAL_GPIO_Init+0x328>)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_GPIO_Init+0x354>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a2:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_GPIO_Init+0x354>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_GPIO_Init+0x354>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b0f      	cmp	r3, #15
 8001a30:	f67f ae86 	bls.w	8001740 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40021400 	.word	0x40021400
 8001a64:	40021800 	.word	0x40021800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40022400 	.word	0x40022400
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	400b      	ands	r3, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0e:	f7ff f91f 	bl	8000d50 <HAL_GetTick>
 8001b12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b14:	e009      	b.n	8001b2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b16:	f7ff f91b 	bl	8000d50 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b24:	d901      	bls.n	8001b2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e022      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d1ee      	bne.n	8001b16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b44:	f7ff f904 	bl	8000d50 <HAL_GetTick>
 8001b48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b4a:	e009      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b4c:	f7ff f900 	bl	8000d50 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b5a:	d901      	bls.n	8001b60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e007      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e29b      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba4:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00c      	beq.n	8001bca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d112      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62>
 8001bbc:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b8d      	ldr	r3, [pc, #564]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d06c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x130>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d168      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e275      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x7a>
 8001bec:	4b84      	ldr	r3, [pc, #528]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a83      	ldr	r2, [pc, #524]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e02e      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x9c>
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7b      	ldr	r2, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e01d      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0xc0>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001c40:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6b      	ldr	r2, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f876 	bl	8000d50 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f872 	bl	8000d50 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e229      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe8>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f862 	bl	8000d50 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f85e 	bl	8000d50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e215      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x110>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d069      	beq.n	8001d92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x190>
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1e9      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	493d      	ldr	r1, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e040      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f814 	bl	8000d50 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f810 	bl	8000d50 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1c7      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4929      	ldr	r1, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fff0 	bl	8000d50 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7fe ffec 	bl	8000d50 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1a3      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d038      	beq.n	8001e10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe ffcd 	bl	8000d50 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dba:	f7fe ffc9 	bl	8000d50 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e180      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x23a>
 8001dd8:	e01a      	b.n	8001e10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7fe ffb3 	bl	8000d50 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7fe ffaf 	bl	8000d50 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d903      	bls.n	8001e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e166      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
 8001e00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a4 	beq.w	8001f66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a88      	ldr	r2, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b86      	ldr	r3, [pc, #536]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	4b83      	ldr	r3, [pc, #524]	; (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e52:	4b80      	ldr	r3, [pc, #512]	; (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7f      	ldr	r2, [pc, #508]	; (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe ff77 	bl	8000d50 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7fe ff73 	bl	8000d50 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	; 0x64
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e12a      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x31a>
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a6f      	ldr	r2, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	e02d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x33c>
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	e01c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCC_OscConfig+0x35e>
 8001ec4:	4b62      	ldr	r3, [pc, #392]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a5e      	ldr	r2, [pc, #376]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	e00b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a5b      	ldr	r2, [pc, #364]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d015      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7fe ff27 	bl	8000d50 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe ff23 	bl	8000d50 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0d8      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ee      	beq.n	8001f06 <HAL_RCC_OscConfig+0x386>
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7fe ff11 	bl	8000d50 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe ff0d 	bl	8000d50 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0c2      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80ae 	beq.w	80020cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d06d      	beq.n	8002058 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d14b      	bne.n	800201c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe fede 	bl	8000d50 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe feda 	bl	8000d50 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e091      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	071b      	lsls	r3, r3, #28
 8001fe2:	491b      	ldr	r1, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe feac 	bl	8000d50 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fea8 	bl	8000d50 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e05f      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x47c>
 800201a:	e057      	b.n	80020cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe fe92 	bl	8000d50 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fe8e 	bl	8000d50 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e045      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x4b0>
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x54c>
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCC_OscConfig+0x558>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d030      	beq.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d129      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d122      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800208e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002090:	4293      	cmp	r3, r2
 8002092:	d119      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10f      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0d0      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4965      	ldr	r1, [pc, #404]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b8      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800215a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	494d      	ldr	r1, [pc, #308]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d040      	beq.n	8002200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d115      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e073      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4936      	ldr	r1, [pc, #216]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fdbe 	bl	8000d50 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fdba 	bl	8000d50 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e053      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d210      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 020f 	bic.w	r2, r3, #15
 8002216:	4922      	ldr	r1, [pc, #136]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e032      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4916      	ldr	r1, [pc, #88]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226e:	f000 f821 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	490a      	ldr	r1, [pc, #40]	; (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1d4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fc68 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08006ae8 	.word	0x08006ae8
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b8:	b094      	sub	sp, #80	; 0x50
 80022ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
 80022c0:	2300      	movs	r3, #0
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c4:	2300      	movs	r3, #0
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022cc:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d00d      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x40>
 80022d8:	2b08      	cmp	r3, #8
 80022da:	f200 80e1 	bhi.w	80024a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x34>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x3a>
 80022e6:	e0db      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ec:	e0db      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <HAL_RCC_GetSysClockFreq+0x208>)
 80022f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022f2:	e0d8      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022fe:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
 8002314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
 8002322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002326:	4622      	mov	r2, r4
 8002328:	462b      	mov	r3, r5
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4621      	mov	r1, r4
 8002340:	1a51      	subs	r1, r2, r1
 8002342:	6139      	str	r1, [r7, #16]
 8002344:	4629      	mov	r1, r5
 8002346:	eb63 0301 	sbc.w	r3, r3, r1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002358:	4659      	mov	r1, fp
 800235a:	018b      	lsls	r3, r1, #6
 800235c:	4651      	mov	r1, sl
 800235e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002362:	4651      	mov	r1, sl
 8002364:	018a      	lsls	r2, r1, #6
 8002366:	4651      	mov	r1, sl
 8002368:	ebb2 0801 	subs.w	r8, r2, r1
 800236c:	4659      	mov	r1, fp
 800236e:	eb63 0901 	sbc.w	r9, r3, r1
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800237e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002386:	4690      	mov	r8, r2
 8002388:	4699      	mov	r9, r3
 800238a:	4623      	mov	r3, r4
 800238c:	eb18 0303 	adds.w	r3, r8, r3
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	462b      	mov	r3, r5
 8002394:	eb49 0303 	adc.w	r3, r9, r3
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023a6:	4629      	mov	r1, r5
 80023a8:	024b      	lsls	r3, r1, #9
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023b0:	4621      	mov	r1, r4
 80023b2:	024a      	lsls	r2, r1, #9
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ba:	2200      	movs	r2, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023c4:	f7fd ff3c 	bl	8000240 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4613      	mov	r3, r2
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d0:	e058      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	2200      	movs	r2, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	4611      	mov	r1, r2
 80023de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023ec:	4642      	mov	r2, r8
 80023ee:	464b      	mov	r3, r9
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	0159      	lsls	r1, r3, #5
 80023fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fe:	0150      	lsls	r0, r2, #5
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4641      	mov	r1, r8
 8002406:	ebb2 0a01 	subs.w	sl, r2, r1
 800240a:	4649      	mov	r1, r9
 800240c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800241c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002424:	ebb2 040a 	subs.w	r4, r2, sl
 8002428:	eb63 050b 	sbc.w	r5, r3, fp
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	00eb      	lsls	r3, r5, #3
 8002436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800243a:	00e2      	lsls	r2, r4, #3
 800243c:	4614      	mov	r4, r2
 800243e:	461d      	mov	r5, r3
 8002440:	4643      	mov	r3, r8
 8002442:	18e3      	adds	r3, r4, r3
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	464b      	mov	r3, r9
 8002448:	eb45 0303 	adc.w	r3, r5, r3
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800245a:	4629      	mov	r1, r5
 800245c:	028b      	lsls	r3, r1, #10
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002464:	4621      	mov	r1, r4
 8002466:	028a      	lsls	r2, r1, #10
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246e:	2200      	movs	r2, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	61fa      	str	r2, [r7, #28]
 8002474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002478:	f7fd fee2 	bl	8000240 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4613      	mov	r3, r2
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3750      	adds	r7, #80	; 0x50
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	00f42400 	.word	0x00f42400
 80024bc:	007a1200 	.word	0x007a1200

080024c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000000 	.word	0x20000000

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0a9b      	lsrs	r3, r3, #10
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08006af8 	.word	0x08006af8

08002500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002504:	f7ff ffdc 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0b5b      	lsrs	r3, r3, #13
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	4903      	ldr	r1, [pc, #12]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40023800 	.word	0x40023800
 8002524:	08006af8 	.word	0x08006af8

08002528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	220f      	movs	r2, #15
 8002536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_RCC_GetClockConfig+0x60>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40023c00 	.word	0x40023c00

0800258c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b4:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a68      	ldr	r2, [pc, #416]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	4964      	ldr	r1, [pc, #400]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d017      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e6:	4b5d      	ldr	r3, [pc, #372]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	4959      	ldr	r1, [pc, #356]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d017      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002622:	4b4e      	ldr	r3, [pc, #312]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	494a      	ldr	r1, [pc, #296]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002640:	d101      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 808b 	beq.w	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4a39      	ldr	r2, [pc, #228]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	; 0x40
 800267c:	4b37      	ldr	r3, [pc, #220]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a34      	ldr	r2, [pc, #208]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002694:	f7fe fb5c 	bl	8000d50 <HAL_GetTick>
 8002698:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fb58 	bl	8000d50 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e38f      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d035      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d02e      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d114      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fb20 	bl	8000d50 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fb1c 	bl	8000d50 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e351      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002742:	d111      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002752:	400b      	ands	r3, r1
 8002754:	4901      	ldr	r1, [pc, #4]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
 800275a:	e00b      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	0ffffcff 	.word	0x0ffffcff
 8002768:	4bac      	ldr	r3, [pc, #688]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4aab      	ldr	r2, [pc, #684]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002772:	6093      	str	r3, [r2, #8]
 8002774:	4ba9      	ldr	r3, [pc, #676]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	49a6      	ldr	r1, [pc, #664]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002782:	4313      	orrs	r3, r2
 8002784:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	d010      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002792:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	4aa0      	ldr	r2, [pc, #640]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027a2:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	499b      	ldr	r1, [pc, #620]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ce:	4993      	ldr	r1, [pc, #588]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e2:	4b8e      	ldr	r3, [pc, #568]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f0:	498a      	ldr	r1, [pc, #552]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002804:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	4982      	ldr	r1, [pc, #520]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4979      	ldr	r1, [pc, #484]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002848:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4971      	ldr	r1, [pc, #452]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	f023 020c 	bic.w	r2, r3, #12
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	4968      	ldr	r1, [pc, #416]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	4960      	ldr	r1, [pc, #384]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	4957      	ldr	r1, [pc, #348]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	494f      	ldr	r1, [pc, #316]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	4946      	ldr	r1, [pc, #280]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	493e      	ldr	r1, [pc, #248]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002944:	4935      	ldr	r1, [pc, #212]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002966:	492d      	ldr	r1, [pc, #180]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002988:	4924      	ldr	r1, [pc, #144]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002998:	d101      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	4914      	ldr	r1, [pc, #80]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ec:	490b      	ldr	r1, [pc, #44]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a10:	4902      	ldr	r1, [pc, #8]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a2c:	4b8a      	ldr	r3, [pc, #552]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	4986      	ldr	r1, [pc, #536]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a50:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a60:	497d      	ldr	r1, [pc, #500]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d006      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80d6 	beq.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a7c:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fe f962 	bl	8000d50 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a90:	f7fe f95e 	bl	8000d50 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e195      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d021      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11d      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	0e1b      	lsrs	r3, r3, #24
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	019a      	lsls	r2, r3, #6
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	4958      	ldr	r1, [pc, #352]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02e      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b28:	d129      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b38:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3e:	0f1b      	lsrs	r3, r3, #28
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	019a      	lsls	r2, r3, #6
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	493e      	ldr	r1, [pc, #248]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6c:	f023 021f 	bic.w	r2, r3, #31
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	3b01      	subs	r3, #1
 8002b76:	4938      	ldr	r1, [pc, #224]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01d      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	0e1b      	lsrs	r3, r3, #24
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	0f1b      	lsrs	r3, r3, #28
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	4926      	ldr	r1, [pc, #152]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d011      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	019a      	lsls	r2, r3, #6
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	491a      	ldr	r1, [pc, #104]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c02:	f7fe f8a5 	bl	8000d50 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c0a:	f7fe f8a1 	bl	8000d50 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	f040 80ce 	bne.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe f888 	bl	8000d50 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c42:	e00b      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c44:	f7fe f884 	bl	8000d50 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d904      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0bb      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c68:	d0ec      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02e      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12a      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	0f1b      	lsrs	r3, r3, #28
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	019a      	lsls	r2, r3, #6
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	4944      	ldr	r1, [pc, #272]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cce:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	493d      	ldr	r1, [pc, #244]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d022      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfc:	d11d      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	0e1b      	lsrs	r3, r3, #24
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	0f1b      	lsrs	r3, r3, #28
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	019a      	lsls	r2, r3, #6
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	4929      	ldr	r1, [pc, #164]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	0c1b      	lsrs	r3, r3, #16
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	019a      	lsls	r2, r3, #6
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fd ffd4 	bl	8000d50 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dac:	f7fd ffd0 	bl	8000d50 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e007      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dca:	d1ef      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f841 	bl	8002e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fa00 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e054      	b.n	8002f62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d01d      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x80>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d115      	bne.n	8002f4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_TIM_Base_Start_IT+0xec>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d015      	beq.n	8002f5e <HAL_TIM_Base_Start_IT+0xbe>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d011      	beq.n	8002f5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	e008      	b.n	8002f5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e000      	b.n	8002f60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40010400 	.word	0x40010400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40001800 	.word	0x40001800
 8002f8c:	00010007 	.word	0x00010007

08002f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0202 	mvn.w	r2, #2
 8002fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f905 	bl	80031e2 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8f7 	bl	80031ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f908 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0204 	mvn.w	r2, #4
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8db 	bl	80031e2 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8cd 	bl	80031ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8de 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8b1 	bl	80031e2 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8a3 	bl	80031ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8b4 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2208      	movs	r2, #8
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f887 	bl	80031e2 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f879 	bl	80031ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f88a 	bl	80031f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0201 	mvn.w	r2, #1
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fc48 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f91a 	bl	8003374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b80      	cmp	r3, #128	; 0x80
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f90d 	bl	8003388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d10e      	bne.n	800319a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d107      	bne.n	800319a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f838 	bl	800320a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d10e      	bne.n	80031c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d107      	bne.n	80031c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0220 	mvn.w	r2, #32
 80031be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8cd 	bl	8003360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a40      	ldr	r2, [pc, #256]	; (8003334 <TIM_Base_SetConfig+0x114>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3d      	ldr	r2, [pc, #244]	; (8003338 <TIM_Base_SetConfig+0x118>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3c      	ldr	r2, [pc, #240]	; (800333c <TIM_Base_SetConfig+0x11c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <TIM_Base_SetConfig+0x120>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <TIM_Base_SetConfig+0x124>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <TIM_Base_SetConfig+0x114>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d027      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2c      	ldr	r2, [pc, #176]	; (8003338 <TIM_Base_SetConfig+0x118>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d023      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2b      	ldr	r2, [pc, #172]	; (800333c <TIM_Base_SetConfig+0x11c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <TIM_Base_SetConfig+0x120>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0x124>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d017      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a28      	ldr	r2, [pc, #160]	; (8003348 <TIM_Base_SetConfig+0x128>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <TIM_Base_SetConfig+0x12c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a26      	ldr	r2, [pc, #152]	; (8003350 <TIM_Base_SetConfig+0x130>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0x134>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a24      	ldr	r2, [pc, #144]	; (8003358 <TIM_Base_SetConfig+0x138>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a23      	ldr	r2, [pc, #140]	; (800335c <TIM_Base_SetConfig+0x13c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <TIM_Base_SetConfig+0x114>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xf8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <TIM_Base_SetConfig+0x124>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40010400 	.word	0x40010400
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800
 8003354:	40001800 	.word	0x40001800
 8003358:	40001c00 	.word	0x40001c00
 800335c:	40002000 	.word	0x40002000

08003360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e040      	b.n	8003430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fb70 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f82c 	bl	8003438 <UART_SetConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e022      	b.n	8003430 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa84 	bl	8003900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb0b 	bl	8003a44 <UART_CheckIdleState>
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4ba6      	ldr	r3, [pc, #664]	; (80036fc <UART_SetConfig+0x2c4>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	6979      	ldr	r1, [r7, #20]
 800346c:	430b      	orrs	r3, r1
 800346e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a94      	ldr	r2, [pc, #592]	; (8003700 <UART_SetConfig+0x2c8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d120      	bne.n	80034f6 <UART_SetConfig+0xbe>
 80034b4:	4b93      	ldr	r3, [pc, #588]	; (8003704 <UART_SetConfig+0x2cc>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d816      	bhi.n	80034f0 <UART_SetConfig+0xb8>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x90>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034d9 	.word	0x080034d9
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080034df 	.word	0x080034df
 80034d4:	080034eb 	.word	0x080034eb
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e150      	b.n	8003780 <UART_SetConfig+0x348>
 80034de:	2302      	movs	r3, #2
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e14d      	b.n	8003780 <UART_SetConfig+0x348>
 80034e4:	2304      	movs	r3, #4
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e14a      	b.n	8003780 <UART_SetConfig+0x348>
 80034ea:	2308      	movs	r3, #8
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e147      	b.n	8003780 <UART_SetConfig+0x348>
 80034f0:	2310      	movs	r3, #16
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e144      	b.n	8003780 <UART_SetConfig+0x348>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a83      	ldr	r2, [pc, #524]	; (8003708 <UART_SetConfig+0x2d0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d132      	bne.n	8003566 <UART_SetConfig+0x12e>
 8003500:	4b80      	ldr	r3, [pc, #512]	; (8003704 <UART_SetConfig+0x2cc>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d828      	bhi.n	8003560 <UART_SetConfig+0x128>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0xdc>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003549 	.word	0x08003549
 8003518:	08003561 	.word	0x08003561
 800351c:	08003561 	.word	0x08003561
 8003520:	08003561 	.word	0x08003561
 8003524:	08003555 	.word	0x08003555
 8003528:	08003561 	.word	0x08003561
 800352c:	08003561 	.word	0x08003561
 8003530:	08003561 	.word	0x08003561
 8003534:	0800354f 	.word	0x0800354f
 8003538:	08003561 	.word	0x08003561
 800353c:	08003561 	.word	0x08003561
 8003540:	08003561 	.word	0x08003561
 8003544:	0800355b 	.word	0x0800355b
 8003548:	2300      	movs	r3, #0
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e118      	b.n	8003780 <UART_SetConfig+0x348>
 800354e:	2302      	movs	r3, #2
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e115      	b.n	8003780 <UART_SetConfig+0x348>
 8003554:	2304      	movs	r3, #4
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e112      	b.n	8003780 <UART_SetConfig+0x348>
 800355a:	2308      	movs	r3, #8
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e10f      	b.n	8003780 <UART_SetConfig+0x348>
 8003560:	2310      	movs	r3, #16
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e10c      	b.n	8003780 <UART_SetConfig+0x348>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a68      	ldr	r2, [pc, #416]	; (800370c <UART_SetConfig+0x2d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d120      	bne.n	80035b2 <UART_SetConfig+0x17a>
 8003570:	4b64      	ldr	r3, [pc, #400]	; (8003704 <UART_SetConfig+0x2cc>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800357a:	2b30      	cmp	r3, #48	; 0x30
 800357c:	d013      	beq.n	80035a6 <UART_SetConfig+0x16e>
 800357e:	2b30      	cmp	r3, #48	; 0x30
 8003580:	d814      	bhi.n	80035ac <UART_SetConfig+0x174>
 8003582:	2b20      	cmp	r3, #32
 8003584:	d009      	beq.n	800359a <UART_SetConfig+0x162>
 8003586:	2b20      	cmp	r3, #32
 8003588:	d810      	bhi.n	80035ac <UART_SetConfig+0x174>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <UART_SetConfig+0x15c>
 800358e:	2b10      	cmp	r3, #16
 8003590:	d006      	beq.n	80035a0 <UART_SetConfig+0x168>
 8003592:	e00b      	b.n	80035ac <UART_SetConfig+0x174>
 8003594:	2300      	movs	r3, #0
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e0f2      	b.n	8003780 <UART_SetConfig+0x348>
 800359a:	2302      	movs	r3, #2
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e0ef      	b.n	8003780 <UART_SetConfig+0x348>
 80035a0:	2304      	movs	r3, #4
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e0ec      	b.n	8003780 <UART_SetConfig+0x348>
 80035a6:	2308      	movs	r3, #8
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e0e9      	b.n	8003780 <UART_SetConfig+0x348>
 80035ac:	2310      	movs	r3, #16
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e0e6      	b.n	8003780 <UART_SetConfig+0x348>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a56      	ldr	r2, [pc, #344]	; (8003710 <UART_SetConfig+0x2d8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d120      	bne.n	80035fe <UART_SetConfig+0x1c6>
 80035bc:	4b51      	ldr	r3, [pc, #324]	; (8003704 <UART_SetConfig+0x2cc>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035c6:	2bc0      	cmp	r3, #192	; 0xc0
 80035c8:	d013      	beq.n	80035f2 <UART_SetConfig+0x1ba>
 80035ca:	2bc0      	cmp	r3, #192	; 0xc0
 80035cc:	d814      	bhi.n	80035f8 <UART_SetConfig+0x1c0>
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d009      	beq.n	80035e6 <UART_SetConfig+0x1ae>
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d810      	bhi.n	80035f8 <UART_SetConfig+0x1c0>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <UART_SetConfig+0x1a8>
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d006      	beq.n	80035ec <UART_SetConfig+0x1b4>
 80035de:	e00b      	b.n	80035f8 <UART_SetConfig+0x1c0>
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e0cc      	b.n	8003780 <UART_SetConfig+0x348>
 80035e6:	2302      	movs	r3, #2
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e0c9      	b.n	8003780 <UART_SetConfig+0x348>
 80035ec:	2304      	movs	r3, #4
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e0c6      	b.n	8003780 <UART_SetConfig+0x348>
 80035f2:	2308      	movs	r3, #8
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e0c3      	b.n	8003780 <UART_SetConfig+0x348>
 80035f8:	2310      	movs	r3, #16
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e0c0      	b.n	8003780 <UART_SetConfig+0x348>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a44      	ldr	r2, [pc, #272]	; (8003714 <UART_SetConfig+0x2dc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <UART_SetConfig+0x21c>
 8003608:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <UART_SetConfig+0x2cc>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003616:	d017      	beq.n	8003648 <UART_SetConfig+0x210>
 8003618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800361c:	d817      	bhi.n	800364e <UART_SetConfig+0x216>
 800361e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003622:	d00b      	beq.n	800363c <UART_SetConfig+0x204>
 8003624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003628:	d811      	bhi.n	800364e <UART_SetConfig+0x216>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <UART_SetConfig+0x1fe>
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d006      	beq.n	8003642 <UART_SetConfig+0x20a>
 8003634:	e00b      	b.n	800364e <UART_SetConfig+0x216>
 8003636:	2300      	movs	r3, #0
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e0a1      	b.n	8003780 <UART_SetConfig+0x348>
 800363c:	2302      	movs	r3, #2
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e09e      	b.n	8003780 <UART_SetConfig+0x348>
 8003642:	2304      	movs	r3, #4
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e09b      	b.n	8003780 <UART_SetConfig+0x348>
 8003648:	2308      	movs	r3, #8
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e098      	b.n	8003780 <UART_SetConfig+0x348>
 800364e:	2310      	movs	r3, #16
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e095      	b.n	8003780 <UART_SetConfig+0x348>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2f      	ldr	r2, [pc, #188]	; (8003718 <UART_SetConfig+0x2e0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d125      	bne.n	80036aa <UART_SetConfig+0x272>
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <UART_SetConfig+0x2cc>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800366c:	d017      	beq.n	800369e <UART_SetConfig+0x266>
 800366e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003672:	d817      	bhi.n	80036a4 <UART_SetConfig+0x26c>
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003678:	d00b      	beq.n	8003692 <UART_SetConfig+0x25a>
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367e:	d811      	bhi.n	80036a4 <UART_SetConfig+0x26c>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <UART_SetConfig+0x254>
 8003684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003688:	d006      	beq.n	8003698 <UART_SetConfig+0x260>
 800368a:	e00b      	b.n	80036a4 <UART_SetConfig+0x26c>
 800368c:	2301      	movs	r3, #1
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e076      	b.n	8003780 <UART_SetConfig+0x348>
 8003692:	2302      	movs	r3, #2
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e073      	b.n	8003780 <UART_SetConfig+0x348>
 8003698:	2304      	movs	r3, #4
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e070      	b.n	8003780 <UART_SetConfig+0x348>
 800369e:	2308      	movs	r3, #8
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e06d      	b.n	8003780 <UART_SetConfig+0x348>
 80036a4:	2310      	movs	r3, #16
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e06a      	b.n	8003780 <UART_SetConfig+0x348>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <UART_SetConfig+0x2e4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d138      	bne.n	8003726 <UART_SetConfig+0x2ee>
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <UART_SetConfig+0x2cc>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036c2:	d017      	beq.n	80036f4 <UART_SetConfig+0x2bc>
 80036c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036c8:	d82a      	bhi.n	8003720 <UART_SetConfig+0x2e8>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	d00b      	beq.n	80036e8 <UART_SetConfig+0x2b0>
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d824      	bhi.n	8003720 <UART_SetConfig+0x2e8>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <UART_SetConfig+0x2aa>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d006      	beq.n	80036ee <UART_SetConfig+0x2b6>
 80036e0:	e01e      	b.n	8003720 <UART_SetConfig+0x2e8>
 80036e2:	2300      	movs	r3, #0
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e04b      	b.n	8003780 <UART_SetConfig+0x348>
 80036e8:	2302      	movs	r3, #2
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e048      	b.n	8003780 <UART_SetConfig+0x348>
 80036ee:	2304      	movs	r3, #4
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e045      	b.n	8003780 <UART_SetConfig+0x348>
 80036f4:	2308      	movs	r3, #8
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e042      	b.n	8003780 <UART_SetConfig+0x348>
 80036fa:	bf00      	nop
 80036fc:	efff69f3 	.word	0xefff69f3
 8003700:	40011000 	.word	0x40011000
 8003704:	40023800 	.word	0x40023800
 8003708:	40004400 	.word	0x40004400
 800370c:	40004800 	.word	0x40004800
 8003710:	40004c00 	.word	0x40004c00
 8003714:	40005000 	.word	0x40005000
 8003718:	40011400 	.word	0x40011400
 800371c:	40007800 	.word	0x40007800
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e02c      	b.n	8003780 <UART_SetConfig+0x348>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a72      	ldr	r2, [pc, #456]	; (80038f4 <UART_SetConfig+0x4bc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d125      	bne.n	800377c <UART_SetConfig+0x344>
 8003730:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <UART_SetConfig+0x4c0>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800373a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800373e:	d017      	beq.n	8003770 <UART_SetConfig+0x338>
 8003740:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003744:	d817      	bhi.n	8003776 <UART_SetConfig+0x33e>
 8003746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374a:	d00b      	beq.n	8003764 <UART_SetConfig+0x32c>
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	d811      	bhi.n	8003776 <UART_SetConfig+0x33e>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <UART_SetConfig+0x326>
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800375a:	d006      	beq.n	800376a <UART_SetConfig+0x332>
 800375c:	e00b      	b.n	8003776 <UART_SetConfig+0x33e>
 800375e:	2300      	movs	r3, #0
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e00d      	b.n	8003780 <UART_SetConfig+0x348>
 8003764:	2302      	movs	r3, #2
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e00a      	b.n	8003780 <UART_SetConfig+0x348>
 800376a:	2304      	movs	r3, #4
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e007      	b.n	8003780 <UART_SetConfig+0x348>
 8003770:	2308      	movs	r3, #8
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e004      	b.n	8003780 <UART_SetConfig+0x348>
 8003776:	2310      	movs	r3, #16
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e001      	b.n	8003780 <UART_SetConfig+0x348>
 800377c:	2310      	movs	r3, #16
 800377e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	d15b      	bne.n	8003842 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d828      	bhi.n	80037e2 <UART_SetConfig+0x3aa>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x360>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	080037e3 	.word	0x080037e3
 80037a8:	080037d3 	.word	0x080037d3
 80037ac:	080037e3 	.word	0x080037e3
 80037b0:	080037e3 	.word	0x080037e3
 80037b4:	080037e3 	.word	0x080037e3
 80037b8:	080037db 	.word	0x080037db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fe fe8c 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80037c0:	61b8      	str	r0, [r7, #24]
        break;
 80037c2:	e013      	b.n	80037ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe fe9c 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 80037c8:	61b8      	str	r0, [r7, #24]
        break;
 80037ca:	e00f      	b.n	80037ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <UART_SetConfig+0x4c4>)
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e00c      	b.n	80037ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d2:	f7fe fd6f 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 80037d6:	61b8      	str	r0, [r7, #24]
        break;
 80037d8:	e008      	b.n	80037ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e004      	b.n	80037ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d074      	beq.n	80038dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	005a      	lsls	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	d916      	bls.n	800383c <UART_SetConfig+0x404>
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003814:	d212      	bcs.n	800383c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f023 030f 	bic.w	r3, r3, #15
 800381e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	b29b      	uxth	r3, r3
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	b29a      	uxth	r2, r3
 800382c:	89fb      	ldrh	r3, [r7, #14]
 800382e:	4313      	orrs	r3, r2
 8003830:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	89fa      	ldrh	r2, [r7, #14]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	e04f      	b.n	80038dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	77bb      	strb	r3, [r7, #30]
 8003840:	e04c      	b.n	80038dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003842:	7ffb      	ldrb	r3, [r7, #31]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d828      	bhi.n	800389a <UART_SetConfig+0x462>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <UART_SetConfig+0x418>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003875 	.word	0x08003875
 8003854:	0800387d 	.word	0x0800387d
 8003858:	08003885 	.word	0x08003885
 800385c:	0800389b 	.word	0x0800389b
 8003860:	0800388b 	.word	0x0800388b
 8003864:	0800389b 	.word	0x0800389b
 8003868:	0800389b 	.word	0x0800389b
 800386c:	0800389b 	.word	0x0800389b
 8003870:	08003893 	.word	0x08003893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7fe fe30 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003878:	61b8      	str	r0, [r7, #24]
        break;
 800387a:	e013      	b.n	80038a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7fe fe40 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 8003880:	61b8      	str	r0, [r7, #24]
        break;
 8003882:	e00f      	b.n	80038a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <UART_SetConfig+0x4c4>)
 8003886:	61bb      	str	r3, [r7, #24]
        break;
 8003888:	e00c      	b.n	80038a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388a:	f7fe fd13 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 800388e:	61b8      	str	r0, [r7, #24]
        break;
 8003890:	e008      	b.n	80038a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e004      	b.n	80038a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	77bb      	strb	r3, [r7, #30]
        break;
 80038a2:	bf00      	nop
    }

    if (pclk != 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d018      	beq.n	80038dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	085a      	lsrs	r2, r3, #1
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	441a      	add	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b0f      	cmp	r3, #15
 80038c2:	d909      	bls.n	80038d8 <UART_SetConfig+0x4a0>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d205      	bcs.n	80038d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e001      	b.n	80038dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40007c00 	.word	0x40007c00
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400

08003900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d10a      	bne.n	8003a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a54:	f7fd f97c 	bl	8000d50 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d10e      	bne.n	8003a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f831 	bl	8003ade <UART_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e027      	b.n	8003ad6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d10e      	bne.n	8003ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f81b 	bl	8003ade <UART_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e011      	b.n	8003ad6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b09c      	sub	sp, #112	; 0x70
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aee:	e0a7      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	f000 80a3 	beq.w	8003c40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fd f929 	bl	8000d50 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13f      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b24:	667b      	str	r3, [r7, #100]	; 0x64
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e068      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d050      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bac:	d148      	bne.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c0a:	623a      	str	r2, [r7, #32]
 8003c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	69f9      	ldr	r1, [r7, #28]
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e010      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	f43f af48 	beq.w	8003af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3770      	adds	r7, #112	; 0x70
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7e:	f3ef 8305 	mrs	r3, IPSR
 8003c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d105      	bne.n	8003ca2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c96:	f3ef 8311 	mrs	r3, BASEPRI
 8003c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <osKernelInitialize+0x3a>
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <osKernelInitialize+0x64>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d103      	bne.n	8003cb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003caa:	f06f 0305 	mvn.w	r3, #5
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e00c      	b.n	8003ccc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <osKernelInitialize+0x64>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <osKernelInitialize+0x64>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e002      	b.n	8003ccc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200001bc 	.word	0x200001bc

08003ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce6:	f3ef 8305 	mrs	r3, IPSR
 8003cea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf6:	607b      	str	r3, [r7, #4]
  return(result);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8003d02:	603b      	str	r3, [r7, #0]
  return(result);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <osKernelStart+0x3a>
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <osKernelStart+0x68>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d103      	bne.n	8003d1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d12:	f06f 0305 	mvn.w	r3, #5
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e010      	b.n	8003d3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <osKernelStart+0x68>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d109      	bne.n	8003d36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d22:	f7ff ffa2 	bl	8003c6a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <osKernelStart+0x68>)
 8003d28:	2202      	movs	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d2c:	f001 f8ca 	bl	8004ec4 <vTaskStartScheduler>
      stat = osOK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e002      	b.n	8003d3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200001bc 	.word	0x200001bc

08003d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af04      	add	r7, sp, #16
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d5c:	f3ef 8305 	mrs	r3, IPSR
 8003d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 808f 	bne.w	8003e88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d76:	f3ef 8311 	mrs	r3, BASEPRI
 8003d7a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <osThreadNew+0x3e>
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <osThreadNew+0x148>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d07e      	beq.n	8003e88 <osThreadNew+0x13c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d07b      	beq.n	8003e88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d94:	2318      	movs	r3, #24
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d045      	beq.n	8003e34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <osThreadNew+0x6a>
        name = attr->name;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <osThreadNew+0x90>
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2b38      	cmp	r3, #56	; 0x38
 8003dce:	d805      	bhi.n	8003ddc <osThreadNew+0x90>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <osThreadNew+0x94>
        return (NULL);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e054      	b.n	8003e8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <osThreadNew+0xca>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2bbb      	cmp	r3, #187	; 0xbb
 8003dfe:	d90a      	bls.n	8003e16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <osThreadNew+0xca>
        mem = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	e010      	b.n	8003e38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <osThreadNew+0xec>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <osThreadNew+0xec>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <osThreadNew+0xec>
          mem = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	e001      	b.n	8003e38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d110      	bne.n	8003e60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fe3f 	bl	8004ad8 <xTaskCreateStatic>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e013      	b.n	8003e88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d110      	bne.n	8003e88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f107 0310 	add.w	r3, r7, #16
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fe90 	bl	8004b9e <xTaskCreate>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <osThreadNew+0x13c>
          hTask = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e88:	693b      	ldr	r3, [r7, #16]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3730      	adds	r7, #48	; 0x30
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200001bc 	.word	0x200001bc

08003e98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea0:	f3ef 8305 	mrs	r3, IPSR
 8003ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ea6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eac:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <osDelay+0x3c>
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <osDelay+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d103      	bne.n	8003ed4 <osDelay+0x3c>
    stat = osErrorISR;
 8003ecc:	f06f 0305 	mvn.w	r3, #5
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e007      	b.n	8003ee4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 ffba 	bl	8004e58 <vTaskDelay>
    }
  }

  return (stat);
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200001bc 	.word	0x200001bc

08003ef4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a07      	ldr	r2, [pc, #28]	; (8003f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <vApplicationGetIdleTaskMemory+0x30>)
 8003f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200001c0 	.word	0x200001c0
 8003f24:	2000027c 	.word	0x2000027c

08003f28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <vApplicationGetTimerTaskMemory+0x30>)
 8003f3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	2000047c 	.word	0x2000047c
 8003f58:	20000538 	.word	0x20000538

08003f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f103 0208 	add.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f103 0208 	add.w	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0208 	add.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d103      	bne.n	800401e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e00c      	b.n	8004038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3308      	adds	r3, #8
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e002      	b.n	800402c <vListInsert+0x2e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d2f6      	bcs.n	8004026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6852      	ldr	r2, [r2, #4]
 8004090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d103      	bne.n	80040a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10c      	bne.n	80040f2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	b672      	cpsid	i
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	b662      	cpsie	i
 80040ec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80040f2:	f002 f8a3 	bl	800623c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	3b01      	subs	r3, #1
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d114      	bne.n	8004172 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01a      	beq.n	8004186 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3310      	adds	r3, #16
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f95d 	bl	8005414 <xTaskRemoveFromEventList>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <xQueueGenericReset+0xd0>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	e009      	b.n	8004186 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3310      	adds	r3, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fef0 	bl	8003f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff feeb 	bl	8003f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004186:	f002 f88d 	bl	80062a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	b672      	cpsid	i
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	b662      	cpsie	i
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10c      	bne.n	80041e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	b672      	cpsid	i
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	b662      	cpsie	i
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <xQueueGenericCreateStatic+0x5a>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <xQueueGenericCreateStatic+0x5e>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueGenericCreateStatic+0x60>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	b672      	cpsid	i
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	b662      	cpsie	i
 8004210:	623b      	str	r3, [r7, #32]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <xQueueGenericCreateStatic+0x8a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueGenericCreateStatic+0x8e>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericCreateStatic+0x90>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10c      	bne.n	8004246 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	b672      	cpsid	i
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	b662      	cpsie	i
 8004240:	61fb      	str	r3, [r7, #28]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004246:	2350      	movs	r3, #80	; 0x50
 8004248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d00c      	beq.n	800426a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	b672      	cpsid	i
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	b662      	cpsie	i
 8004264:	61bb      	str	r3, [r7, #24]
}
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800426a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800427e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f805 	bl	800429c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004294:	4618      	mov	r0, r3
 8004296:	3730      	adds	r7, #48	; 0x30
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e002      	b.n	80042be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ca:	2101      	movs	r1, #1
 80042cc:	69b8      	ldr	r0, [r7, #24]
 80042ce:	f7ff fef9 	bl	80040c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042f2:	2300      	movs	r3, #0
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10c      	bne.n	800431a <xQueueGenericSend+0x36>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <xQueueGenericSend+0x44>
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueGenericSend+0x48>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueGenericSend+0x4a>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <xQueueGenericSend+0x68>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	b672      	cpsid	i
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	b662      	cpsie	i
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d103      	bne.n	800435a <xQueueGenericSend+0x76>
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <xQueueGenericSend+0x7a>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueGenericSend+0x7c>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <xQueueGenericSend+0x9a>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	b672      	cpsid	i
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	b662      	cpsie	i
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800437e:	f001 fa13 	bl	80057a8 <xTaskGetSchedulerState>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <xQueueGenericSend+0xaa>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <xQueueGenericSend+0xae>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSend+0xb0>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10c      	bne.n	80043b2 <xQueueGenericSend+0xce>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	b672      	cpsid	i
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	b662      	cpsie	i
 80043ac:	61fb      	str	r3, [r7, #28]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043b2:	f001 ff43 	bl	800623c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <xQueueGenericSend+0xe4>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d129      	bne.n	800441c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ce:	f000 fa15 	bl	80047fc <prvCopyDataToQueue>
 80043d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	3324      	adds	r3, #36	; 0x24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 f817 	bl	8005414 <xTaskRemoveFromEventList>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <xQueueGenericSend+0x208>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	e00a      	b.n	8004414 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004404:	4b39      	ldr	r3, [pc, #228]	; (80044ec <xQueueGenericSend+0x208>)
 8004406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004414:	f001 ff46 	bl	80062a4 <vPortExitCritical>
				return pdPASS;
 8004418:	2301      	movs	r3, #1
 800441a:	e063      	b.n	80044e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004422:	f001 ff3f 	bl	80062a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004426:	2300      	movs	r3, #0
 8004428:	e05c      	b.n	80044e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800442a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4618      	mov	r0, r3
 8004436:	f001 f853 	bl	80054e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800443e:	f001 ff31 	bl	80062a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004442:	f000 fdb3 	bl	8004fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004446:	f001 fef9 	bl	800623c <vPortEnterCritical>
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004450:	b25b      	sxtb	r3, r3
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d103      	bne.n	8004460 <xQueueGenericSend+0x17c>
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004466:	b25b      	sxtb	r3, r3
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d103      	bne.n	8004476 <xQueueGenericSend+0x192>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004476:	f001 ff15 	bl	80062a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800447a:	1d3a      	adds	r2, r7, #4
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f842 	bl	800550c <xTaskCheckForTimeOut>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d124      	bne.n	80044d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800448e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004490:	f000 faac 	bl	80049ec <prvIsQueueFull>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	3310      	adds	r3, #16
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 ff62 	bl	800536c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 fa37 	bl	800491c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044ae:	f000 fd8b 	bl	8004fc8 <xTaskResumeAll>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f af7c 	bne.w	80043b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <xQueueGenericSend+0x208>)
 80044bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	e772      	b.n	80043b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ce:	f000 fa25 	bl	800491c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d2:	f000 fd79 	bl	8004fc8 <xTaskResumeAll>
 80044d6:	e76c      	b.n	80043b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044da:	f000 fa1f 	bl	800491c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044de:	f000 fd73 	bl	8004fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3738      	adds	r7, #56	; 0x38
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	; 0x38
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	b672      	cpsid	i
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	b662      	cpsie	i
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <xQueueGenericSendFromISR+0x40>
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <xQueueGenericSendFromISR+0x44>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <xQueueGenericSendFromISR+0x46>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	b672      	cpsid	i
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	b662      	cpsie	i
 800454e:	623b      	str	r3, [r7, #32]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d103      	bne.n	8004562 <xQueueGenericSendFromISR+0x72>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <xQueueGenericSendFromISR+0x76>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSendFromISR+0x78>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10c      	bne.n	8004586 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	b672      	cpsid	i
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	b662      	cpsie	i
 8004580:	61fb      	str	r3, [r7, #28]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004586:	f001 ff41 	bl	800640c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800458a:	f3ef 8211 	mrs	r2, BASEPRI
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	61ba      	str	r2, [r7, #24]
 80045a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <xQueueGenericSendFromISR+0xcc>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d12c      	bne.n	8004616 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045cc:	f000 f916 	bl	80047fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d112      	bne.n	8004600 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 ff14 	bl	8005414 <xTaskRemoveFromEventList>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e007      	b.n	8004610 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004604:	3301      	adds	r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	b25a      	sxtb	r2, r3
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004610:	2301      	movs	r3, #1
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004614:	e001      	b.n	800461a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004628:	4618      	mov	r0, r3
 800462a:	3738      	adds	r7, #56	; 0x38
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800463c:	2300      	movs	r3, #0
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10c      	bne.n	8004664 <xQueueReceive+0x34>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	b672      	cpsid	i
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	b662      	cpsie	i
 800465e:	623b      	str	r3, [r7, #32]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <xQueueReceive+0x42>
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueReceive+0x46>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueReceive+0x48>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <xQueueReceive+0x66>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	b672      	cpsid	i
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	b662      	cpsie	i
 8004690:	61fb      	str	r3, [r7, #28]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004696:	f001 f887 	bl	80057a8 <xTaskGetSchedulerState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <xQueueReceive+0x76>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <xQueueReceive+0x7a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueReceive+0x7c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10c      	bne.n	80046ca <xQueueReceive+0x9a>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	b672      	cpsid	i
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	b662      	cpsie	i
 80046c4:	61bb      	str	r3, [r7, #24]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f001 fdb7 	bl	800623c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01f      	beq.n	800471a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f000 f8f7 	bl	80048d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	3310      	adds	r3, #16
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fe8c 	bl	8005414 <xTaskRemoveFromEventList>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <xQueueReceive+0x1c8>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004712:	f001 fdc7 	bl	80062a4 <vPortExitCritical>
				return pdPASS;
 8004716:	2301      	movs	r3, #1
 8004718:	e069      	b.n	80047ee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004720:	f001 fdc0 	bl	80062a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004724:	2300      	movs	r3, #0
 8004726:	e062      	b.n	80047ee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fed4 	bl	80054e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004738:	2301      	movs	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473c:	f001 fdb2 	bl	80062a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004740:	f000 fc34 	bl	8004fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004744:	f001 fd7a 	bl	800623c <vPortEnterCritical>
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474e:	b25b      	sxtb	r3, r3
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d103      	bne.n	800475e <xQueueReceive+0x12e>
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004764:	b25b      	sxtb	r3, r3
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d103      	bne.n	8004774 <xQueueReceive+0x144>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004774:	f001 fd96 	bl	80062a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004778:	1d3a      	adds	r2, r7, #4
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fec3 	bl	800550c <xTaskCheckForTimeOut>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d123      	bne.n	80047d4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800478c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478e:	f000 f917 	bl	80049c0 <prvIsQueueEmpty>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fde3 	bl	800536c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a8:	f000 f8b8 	bl	800491c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047ac:	f000 fc0c 	bl	8004fc8 <xTaskResumeAll>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d189      	bne.n	80046ca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <xQueueReceive+0x1c8>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	e780      	b.n	80046ca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ca:	f000 f8a7 	bl	800491c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ce:	f000 fbfb 	bl	8004fc8 <xTaskResumeAll>
 80047d2:	e77a      	b.n	80046ca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d6:	f000 f8a1 	bl	800491c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047da:	f000 fbf5 	bl	8004fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f000 f8ee 	bl	80049c0 <prvIsQueueEmpty>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f43f af6f 	beq.w	80046ca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d14d      	bne.n	80048be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 ffdc 	bl	80057e4 <xTaskPriorityDisinherit>
 800482c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	e043      	b.n	80048be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d119      	bne.n	8004870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6858      	ldr	r0, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	461a      	mov	r2, r3
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	f002 f82e 	bl	80068a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d32b      	bcc.n	80048be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e026      	b.n	80048be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68d8      	ldr	r0, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	461a      	mov	r2, r3
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	f002 f814 	bl	80068a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	425b      	negs	r3, r3
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d207      	bcs.n	80048ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	425b      	negs	r3, r3
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d105      	bne.n	80048be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d303      	bcc.n	8004904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68d9      	ldr	r1, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	461a      	mov	r2, r3
 800490e:	6838      	ldr	r0, [r7, #0]
 8004910:	f001 ffca 	bl	80068a8 <memcpy>
	}
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004924:	f001 fc8a 	bl	800623c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004930:	e011      	b.n	8004956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3324      	adds	r3, #36	; 0x24
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fd68 	bl	8005414 <xTaskRemoveFromEventList>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800494a:	f000 fe45 	bl	80055d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	3b01      	subs	r3, #1
 8004952:	b2db      	uxtb	r3, r3
 8004954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	dce9      	bgt.n	8004932 <prvUnlockQueue+0x16>
 800495e:	e000      	b.n	8004962 <prvUnlockQueue+0x46>
					break;
 8004960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800496a:	f001 fc9b 	bl	80062a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800496e:	f001 fc65 	bl	800623c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800497a:	e011      	b.n	80049a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3310      	adds	r3, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fd43 	bl	8005414 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004994:	f000 fe20 	bl	80055d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	3b01      	subs	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dce9      	bgt.n	800497c <prvUnlockQueue+0x60>
 80049a8:	e000      	b.n	80049ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049b4:	f001 fc76 	bl	80062a4 <vPortExitCritical>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c8:	f001 fc38 	bl	800623c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e001      	b.n	80049de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f001 fc61 	bl	80062a4 <vPortExitCritical>

	return xReturn;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f4:	f001 fc22 	bl	800623c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d102      	bne.n	8004a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e001      	b.n	8004a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fc49 	bl	80062a4 <vPortExitCritical>

	return xReturn;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e014      	b.n	8004a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a38:	490c      	ldr	r1, [pc, #48]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a4e:	e006      	b.n	8004a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d9e7      	bls.n	8004a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000938 	.word	0x20000938

08004a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a80:	f001 fbdc 	bl	800623c <vPortEnterCritical>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d103      	bne.n	8004a9a <vQueueWaitForMessageRestricted+0x2a>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <vQueueWaitForMessageRestricted+0x40>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab0:	f001 fbf8 	bl	80062a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fc77 	bl	80053b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f7ff ff26 	bl	800491c <prvUnlockQueue>
	}
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af04      	add	r7, sp, #16
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	b672      	cpsid	i
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	b662      	cpsie	i
 8004b00:	623b      	str	r3, [r7, #32]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10c      	bne.n	8004b26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b26:	23bc      	movs	r3, #188	; 0xbc
 8004b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2bbc      	cmp	r3, #188	; 0xbc
 8004b2e:	d00c      	beq.n	8004b4a <xTaskCreateStatic+0x72>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	61bb      	str	r3, [r7, #24]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <xTaskCreateStatic+0xb8>
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	9302      	str	r3, [sp, #8]
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f850 	bl	8004c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b8a:	f000 f8f5 	bl	8004d78 <prvAddNewTaskToReadyList>
 8004b8e:	e001      	b.n	8004b94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b94:	697b      	ldr	r3, [r7, #20]
	}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3728      	adds	r7, #40	; 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08c      	sub	sp, #48	; 0x30
 8004ba2:	af04      	add	r7, sp, #16
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fc6e 	bl	8006494 <pvPortMalloc>
 8004bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bc0:	20bc      	movs	r0, #188	; 0xbc
 8004bc2:	f001 fc67 	bl	8006494 <pvPortMalloc>
 8004bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd4:	e005      	b.n	8004be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f001 fd26 	bl	8006628 <vPortFree>
 8004bdc:	e001      	b.n	8004be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9303      	str	r3, [sp, #12]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9302      	str	r3, [sp, #8]
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f80e 	bl	8004c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c0c:	69f8      	ldr	r0, [r7, #28]
 8004c0e:	f000 f8b3 	bl	8004d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c12:	2301      	movs	r3, #1
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e002      	b.n	8004c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	21a5      	movs	r1, #165	; 0xa5
 8004c42:	f001 fe3f 	bl	80068c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004c50:	440b      	add	r3, r1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	b672      	cpsid	i
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	b662      	cpsie	i
 8004c7e:	617b      	str	r3, [r7, #20]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01f      	beq.n	8004cca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e012      	b.n	8004cb6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	7819      	ldrb	r1, [r3, #0]
 8004c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3334      	adds	r3, #52	; 0x34
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b0f      	cmp	r3, #15
 8004cba:	d9e9      	bls.n	8004c90 <prvInitialiseNewTask+0x68>
 8004cbc:	e000      	b.n	8004cc0 <prvInitialiseNewTask+0x98>
			{
				break;
 8004cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc8:	e003      	b.n	8004cd2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	2b37      	cmp	r3, #55	; 0x37
 8004cd6:	d901      	bls.n	8004cdc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cd8:	2337      	movs	r3, #55	; 0x37
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2200      	movs	r2, #0
 8004cec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff f952 	bl	8003f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff f94d 	bl	8003f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	3354      	adds	r3, #84	; 0x54
 8004d2c:	2260      	movs	r2, #96	; 0x60
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fdc7 	bl	80068c4 <memset>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <prvInitialiseNewTask+0x144>)
 8004d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <prvInitialiseNewTask+0x148>)
 8004d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <prvInitialiseNewTask+0x14c>)
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	69b8      	ldr	r0, [r7, #24]
 8004d4e:	f001 f96b 	bl	8006028 <pxPortInitialiseStack>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	08006b20 	.word	0x08006b20
 8004d70:	08006b40 	.word	0x08006b40
 8004d74:	08006b00 	.word	0x08006b00

08004d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d80:	f001 fa5c 	bl	800623c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <prvAddNewTaskToReadyList+0xc4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <prvAddNewTaskToReadyList+0xc4>)
 8004d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d8e:	4b2c      	ldr	r3, [pc, #176]	; (8004e40 <prvAddNewTaskToReadyList+0xc8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d96:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <prvAddNewTaskToReadyList+0xc8>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <prvAddNewTaskToReadyList+0xc4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d110      	bne.n	8004dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004da4:	f000 fc3c 	bl	8005620 <prvInitialiseTaskLists>
 8004da8:	e00d      	b.n	8004dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004daa:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <prvAddNewTaskToReadyList+0xcc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004db2:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <prvAddNewTaskToReadyList+0xc8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d802      	bhi.n	8004dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <prvAddNewTaskToReadyList+0xc8>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <prvAddNewTaskToReadyList+0xd0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a1e      	ldr	r2, [pc, #120]	; (8004e48 <prvAddNewTaskToReadyList+0xd0>)
 8004dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dd0:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <prvAddNewTaskToReadyList+0xd0>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <prvAddNewTaskToReadyList+0xd4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d903      	bls.n	8004dec <prvAddNewTaskToReadyList+0x74>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <prvAddNewTaskToReadyList+0xd4>)
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <prvAddNewTaskToReadyList+0xd8>)
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7ff f8d7 	bl	8003fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e08:	f001 fa4c 	bl	80062a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <prvAddNewTaskToReadyList+0xcc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvAddNewTaskToReadyList+0xc8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d207      	bcs.n	8004e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <prvAddNewTaskToReadyList+0xdc>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000e4c 	.word	0x20000e4c
 8004e40:	20000978 	.word	0x20000978
 8004e44:	20000e58 	.word	0x20000e58
 8004e48:	20000e68 	.word	0x20000e68
 8004e4c:	20000e54 	.word	0x20000e54
 8004e50:	2000097c 	.word	0x2000097c
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d019      	beq.n	8004e9e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <vTaskDelay+0x64>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <vTaskDelay+0x34>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004e8c:	f000 f88e 	bl	8004fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e90:	2100      	movs	r1, #0
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fd18 	bl	80058c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e98:	f000 f896 	bl	8004fc8 <xTaskResumeAll>
 8004e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <vTaskDelay+0x68>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000e74 	.word	0x20000e74
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	1d39      	adds	r1, r7, #4
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f80a 	bl	8003ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	9202      	str	r2, [sp, #8]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	2300      	movs	r3, #0
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	4926      	ldr	r1, [pc, #152]	; (8004f8c <vTaskStartScheduler+0xc8>)
 8004ef4:	4826      	ldr	r0, [pc, #152]	; (8004f90 <vTaskStartScheduler+0xcc>)
 8004ef6:	f7ff fdef 	bl	8004ad8 <xTaskCreateStatic>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <vTaskStartScheduler+0xd0>)
 8004efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <vTaskStartScheduler+0xd0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e001      	b.n	8004f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f18:	f000 fd2a 	bl	8005970 <xTimerCreateTimerTask>
 8004f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d11d      	bne.n	8004f60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	b672      	cpsid	i
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	b662      	cpsie	i
 8004f38:	613b      	str	r3, [r7, #16]
}
 8004f3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <vTaskStartScheduler+0xd4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3354      	adds	r3, #84	; 0x54
 8004f42:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <vTaskStartScheduler+0xd8>)
 8004f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f46:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <vTaskStartScheduler+0xdc>)
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <vTaskStartScheduler+0xe0>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <vTaskStartScheduler+0xe4>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f5a:	f001 f8f1 	bl	8006140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f5e:	e010      	b.n	8004f82 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d10c      	bne.n	8004f82 <vTaskStartScheduler+0xbe>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	b672      	cpsid	i
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	b662      	cpsie	i
 8004f7c:	60fb      	str	r3, [r7, #12]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <vTaskStartScheduler+0xbc>
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08006a88 	.word	0x08006a88
 8004f90:	080055f1 	.word	0x080055f1
 8004f94:	20000e70 	.word	0x20000e70
 8004f98:	20000978 	.word	0x20000978
 8004f9c:	20000010 	.word	0x20000010
 8004fa0:	20000e6c 	.word	0x20000e6c
 8004fa4:	20000e58 	.word	0x20000e58
 8004fa8:	20000e50 	.word	0x20000e50

08004fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <vTaskSuspendAll+0x18>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <vTaskSuspendAll+0x18>)
 8004fb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20000e74 	.word	0x20000e74

08004fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fd6:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <xTaskResumeAll+0x11c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10c      	bne.n	8004ff8 <xTaskResumeAll+0x30>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	b672      	cpsid	i
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	b662      	cpsie	i
 8004ff2:	603b      	str	r3, [r7, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ff8:	f001 f920 	bl	800623c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ffc:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <xTaskResumeAll+0x11c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3b01      	subs	r3, #1
 8005002:	4a38      	ldr	r2, [pc, #224]	; (80050e4 <xTaskResumeAll+0x11c>)
 8005004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <xTaskResumeAll+0x11c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d162      	bne.n	80050d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800500e:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <xTaskResumeAll+0x120>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d05e      	beq.n	80050d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005016:	e02f      	b.n	8005078 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005018:	4b34      	ldr	r3, [pc, #208]	; (80050ec <xTaskResumeAll+0x124>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3318      	adds	r3, #24
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f823 	bl	8004070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff f81e 	bl	8004070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <xTaskResumeAll+0x128>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d903      	bls.n	8005048 <xTaskResumeAll+0x80>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <xTaskResumeAll+0x128>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <xTaskResumeAll+0x12c>)
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fe ffa9 	bl	8003fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <xTaskResumeAll+0x130>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	429a      	cmp	r2, r3
 8005070:	d302      	bcc.n	8005078 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005072:	4b22      	ldr	r3, [pc, #136]	; (80050fc <xTaskResumeAll+0x134>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005078:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <xTaskResumeAll+0x124>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1cb      	bne.n	8005018 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005086:	f000 fb6f 	bl	8005768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <xTaskResumeAll+0x138>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005096:	f000 f847 	bl	8005128 <xTaskIncrementTick>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <xTaskResumeAll+0x134>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f1      	bne.n	8005096 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <xTaskResumeAll+0x138>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <xTaskResumeAll+0x134>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xTaskResumeAll+0x13c>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d4:	f001 f8e6 	bl	80062a4 <vPortExitCritical>

	return xAlreadyYielded;
 80050d8:	68bb      	ldr	r3, [r7, #8]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000e74 	.word	0x20000e74
 80050e8:	20000e4c 	.word	0x20000e4c
 80050ec:	20000e0c 	.word	0x20000e0c
 80050f0:	20000e54 	.word	0x20000e54
 80050f4:	2000097c 	.word	0x2000097c
 80050f8:	20000978 	.word	0x20000978
 80050fc:	20000e60 	.word	0x20000e60
 8005100:	20000e5c 	.word	0x20000e5c
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <xTaskGetTickCount+0x1c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000e50 	.word	0x20000e50

08005128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b50      	ldr	r3, [pc, #320]	; (8005274 <xTaskIncrementTick+0x14c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 808b 	bne.w	8005252 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800513c:	4b4e      	ldr	r3, [pc, #312]	; (8005278 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005144:	4a4c      	ldr	r2, [pc, #304]	; (8005278 <xTaskIncrementTick+0x150>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d122      	bne.n	8005196 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005150:	4b4a      	ldr	r3, [pc, #296]	; (800527c <xTaskIncrementTick+0x154>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <xTaskIncrementTick+0x4c>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	b672      	cpsid	i
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	b662      	cpsie	i
 800516e:	603b      	str	r3, [r7, #0]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xTaskIncrementTick+0x4a>
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <xTaskIncrementTick+0x154>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <xTaskIncrementTick+0x158>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3f      	ldr	r2, [pc, #252]	; (800527c <xTaskIncrementTick+0x154>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4a3f      	ldr	r2, [pc, #252]	; (8005280 <xTaskIncrementTick+0x158>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <xTaskIncrementTick+0x15c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <xTaskIncrementTick+0x15c>)
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	f000 fae9 	bl	8005768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005196:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <xTaskIncrementTick+0x160>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d349      	bcc.n	8005234 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a0:	4b36      	ldr	r3, [pc, #216]	; (800527c <xTaskIncrementTick+0x154>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051aa:	4b37      	ldr	r3, [pc, #220]	; (8005288 <xTaskIncrementTick+0x160>)
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	601a      	str	r2, [r3, #0]
					break;
 80051b2:	e03f      	b.n	8005234 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <xTaskIncrementTick+0x154>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d203      	bcs.n	80051d4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051cc:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <xTaskIncrementTick+0x160>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051d2:	e02f      	b.n	8005234 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe ff49 	bl	8004070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3318      	adds	r3, #24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe ff40 	bl	8004070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <xTaskIncrementTick+0x164>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d903      	bls.n	8005204 <xTaskIncrementTick+0xdc>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <xTaskIncrementTick+0x164>)
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <xTaskIncrementTick+0x168>)
 8005212:	441a      	add	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7fe fecb 	bl	8003fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <xTaskIncrementTick+0x16c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d3b8      	bcc.n	80051a0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005232:	e7b5      	b.n	80051a0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005234:	4b17      	ldr	r3, [pc, #92]	; (8005294 <xTaskIncrementTick+0x16c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523a:	4915      	ldr	r1, [pc, #84]	; (8005290 <xTaskIncrementTick+0x168>)
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d907      	bls.n	800525c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e004      	b.n	800525c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <xTaskIncrementTick+0x170>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <xTaskIncrementTick+0x170>)
 800525a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xTaskIncrementTick+0x174>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005268:	697b      	ldr	r3, [r7, #20]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000e74 	.word	0x20000e74
 8005278:	20000e50 	.word	0x20000e50
 800527c:	20000e04 	.word	0x20000e04
 8005280:	20000e08 	.word	0x20000e08
 8005284:	20000e64 	.word	0x20000e64
 8005288:	20000e6c 	.word	0x20000e6c
 800528c:	20000e54 	.word	0x20000e54
 8005290:	2000097c 	.word	0x2000097c
 8005294:	20000978 	.word	0x20000978
 8005298:	20000e5c 	.word	0x20000e5c
 800529c:	20000e60 	.word	0x20000e60

080052a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052a6:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <vTaskSwitchContext+0xb4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <vTaskSwitchContext+0xb8>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052b4:	e048      	b.n	8005348 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80052b6:	4b28      	ldr	r3, [pc, #160]	; (8005358 <vTaskSwitchContext+0xb8>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <vTaskSwitchContext+0xbc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e012      	b.n	80052ea <vTaskSwitchContext+0x4a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <vTaskSwitchContext+0x44>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	b672      	cpsid	i
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	b662      	cpsie	i
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vTaskSwitchContext+0x42>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	491d      	ldr	r1, [pc, #116]	; (8005360 <vTaskSwitchContext+0xc0>)
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0e2      	beq.n	80052c4 <vTaskSwitchContext+0x24>
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <vTaskSwitchContext+0xc0>)
 800530a:	4413      	add	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	3308      	adds	r3, #8
 8005320:	429a      	cmp	r2, r3
 8005322:	d104      	bne.n	800532e <vTaskSwitchContext+0x8e>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a0b      	ldr	r2, [pc, #44]	; (8005364 <vTaskSwitchContext+0xc4>)
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <vTaskSwitchContext+0xbc>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <vTaskSwitchContext+0xc4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3354      	adds	r3, #84	; 0x54
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <vTaskSwitchContext+0xc8>)
 8005346:	6013      	str	r3, [r2, #0]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	20000e74 	.word	0x20000e74
 8005358:	20000e60 	.word	0x20000e60
 800535c:	20000e54 	.word	0x20000e54
 8005360:	2000097c 	.word	0x2000097c
 8005364:	20000978 	.word	0x20000978
 8005368:	20000010 	.word	0x20000010

0800536c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10c      	bne.n	8005396 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	b672      	cpsid	i
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	b662      	cpsie	i
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <vTaskPlaceOnEventList+0x48>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3318      	adds	r3, #24
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe fe2d 	bl	8003ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053a4:	2101      	movs	r1, #1
 80053a6:	6838      	ldr	r0, [r7, #0]
 80053a8:	f000 fa8e 	bl	80058c8 <prvAddCurrentTaskToDelayedList>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000978 	.word	0x20000978

080053b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10c      	bne.n	80053e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	617b      	str	r3, [r7, #20]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <vTaskPlaceOnEventListRestricted+0x58>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3318      	adds	r3, #24
 80053ea:	4619      	mov	r1, r3
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7fe fde2 	bl	8003fb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80053f8:	f04f 33ff 	mov.w	r3, #4294967295
 80053fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f000 fa61 	bl	80058c8 <prvAddCurrentTaskToDelayedList>
	}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000978 	.word	0x20000978

08005414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10c      	bne.n	8005444 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	b672      	cpsid	i
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	b662      	cpsie	i
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3318      	adds	r3, #24
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe fe11 	bl	8004070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544e:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <xTaskRemoveFromEventList+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11d      	bne.n	8005492 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3304      	adds	r3, #4
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe fe08 	bl	8004070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <xTaskRemoveFromEventList+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d903      	bls.n	8005474 <xTaskRemoveFromEventList+0x60>
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <xTaskRemoveFromEventList+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <xTaskRemoveFromEventList+0xbc>)
 8005482:	441a      	add	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fe fd93 	bl	8003fb6 <vListInsertEnd>
 8005490:	e005      	b.n	800549e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3318      	adds	r3, #24
 8005496:	4619      	mov	r1, r3
 8005498:	480e      	ldr	r0, [pc, #56]	; (80054d4 <xTaskRemoveFromEventList+0xc0>)
 800549a:	f7fe fd8c 	bl	8003fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <xTaskRemoveFromEventList+0xc4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d905      	bls.n	80054b8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <xTaskRemoveFromEventList+0xc8>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e001      	b.n	80054bc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054bc:	697b      	ldr	r3, [r7, #20]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000e74 	.word	0x20000e74
 80054cc:	20000e54 	.word	0x20000e54
 80054d0:	2000097c 	.word	0x2000097c
 80054d4:	20000e0c 	.word	0x20000e0c
 80054d8:	20000978 	.word	0x20000978
 80054dc:	20000e60 	.word	0x20000e60

080054e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <vTaskInternalSetTimeOutState+0x24>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <vTaskInternalSetTimeOutState+0x28>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000e64 	.word	0x20000e64
 8005508:	20000e50 	.word	0x20000e50

0800550c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	613b      	str	r3, [r7, #16]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	b672      	cpsid	i
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	b662      	cpsie	i
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005556:	f000 fe71 	bl	800623c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <xTaskCheckForTimeOut+0xc4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d102      	bne.n	800557a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e023      	b.n	80055c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <xTaskCheckForTimeOut+0xc8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d007      	beq.n	8005596 <xTaskCheckForTimeOut+0x8a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	d302      	bcc.n	8005596 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e015      	b.n	80055c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d20b      	bcs.n	80055b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff97 	bl	80054e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e004      	b.n	80055c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055be:	2301      	movs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f000 fe6f 	bl	80062a4 <vPortExitCritical>

	return xReturn;
 80055c6:	69fb      	ldr	r3, [r7, #28]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000e50 	.word	0x20000e50
 80055d4:	20000e64 	.word	0x20000e64

080055d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <vTaskMissedYield+0x14>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20000e60 	.word	0x20000e60

080055f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055f8:	f000 f852 	bl	80056a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <prvIdleTask+0x28>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d9f9      	bls.n	80055f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <prvIdleTask+0x2c>)
 8005606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005614:	e7f0      	b.n	80055f8 <prvIdleTask+0x8>
 8005616:	bf00      	nop
 8005618:	2000097c 	.word	0x2000097c
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	e00c      	b.n	8005646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <prvInitialiseTaskLists+0x60>)
 8005638:	4413      	add	r3, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fc8e 	bl	8003f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3301      	adds	r3, #1
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b37      	cmp	r3, #55	; 0x37
 800564a:	d9ef      	bls.n	800562c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800564c:	480d      	ldr	r0, [pc, #52]	; (8005684 <prvInitialiseTaskLists+0x64>)
 800564e:	f7fe fc85 	bl	8003f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005652:	480d      	ldr	r0, [pc, #52]	; (8005688 <prvInitialiseTaskLists+0x68>)
 8005654:	f7fe fc82 	bl	8003f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005658:	480c      	ldr	r0, [pc, #48]	; (800568c <prvInitialiseTaskLists+0x6c>)
 800565a:	f7fe fc7f 	bl	8003f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800565e:	480c      	ldr	r0, [pc, #48]	; (8005690 <prvInitialiseTaskLists+0x70>)
 8005660:	f7fe fc7c 	bl	8003f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005664:	480b      	ldr	r0, [pc, #44]	; (8005694 <prvInitialiseTaskLists+0x74>)
 8005666:	f7fe fc79 	bl	8003f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <prvInitialiseTaskLists+0x78>)
 800566c:	4a05      	ldr	r2, [pc, #20]	; (8005684 <prvInitialiseTaskLists+0x64>)
 800566e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvInitialiseTaskLists+0x7c>)
 8005672:	4a05      	ldr	r2, [pc, #20]	; (8005688 <prvInitialiseTaskLists+0x68>)
 8005674:	601a      	str	r2, [r3, #0]
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000097c 	.word	0x2000097c
 8005684:	20000ddc 	.word	0x20000ddc
 8005688:	20000df0 	.word	0x20000df0
 800568c:	20000e0c 	.word	0x20000e0c
 8005690:	20000e20 	.word	0x20000e20
 8005694:	20000e38 	.word	0x20000e38
 8005698:	20000e04 	.word	0x20000e04
 800569c:	20000e08 	.word	0x20000e08

080056a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a6:	e019      	b.n	80056dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056a8:	f000 fdc8 	bl	800623c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <prvCheckTasksWaitingTermination+0x50>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fcd9 	bl	8004070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <prvCheckTasksWaitingTermination+0x54>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <prvCheckTasksWaitingTermination+0x54>)
 80056c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <prvCheckTasksWaitingTermination+0x58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <prvCheckTasksWaitingTermination+0x58>)
 80056d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056d2:	f000 fde7 	bl	80062a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f810 	bl	80056fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <prvCheckTasksWaitingTermination+0x58>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e1      	bne.n	80056a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000e20 	.word	0x20000e20
 80056f4:	20000e4c 	.word	0x20000e4c
 80056f8:	20000e34 	.word	0x20000e34

080056fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3354      	adds	r3, #84	; 0x54
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f8f1 	bl	80068f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005714:	2b00      	cmp	r3, #0
 8005716:	d108      	bne.n	800572a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	4618      	mov	r0, r3
 800571e:	f000 ff83 	bl	8006628 <vPortFree>
				vPortFree( pxTCB );
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 ff80 	bl	8006628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005728:	e01a      	b.n	8005760 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005730:	2b01      	cmp	r3, #1
 8005732:	d103      	bne.n	800573c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 ff77 	bl	8006628 <vPortFree>
	}
 800573a:	e011      	b.n	8005760 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005742:	2b02      	cmp	r3, #2
 8005744:	d00c      	beq.n	8005760 <prvDeleteTCB+0x64>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	b672      	cpsid	i
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	b662      	cpsie	i
 800575a:	60fb      	str	r3, [r7, #12]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <prvDeleteTCB+0x62>
	}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <prvResetNextTaskUnblockTime+0x38>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <prvResetNextTaskUnblockTime+0x3c>)
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005780:	e008      	b.n	8005794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <prvResetNextTaskUnblockTime+0x38>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <prvResetNextTaskUnblockTime+0x3c>)
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000e04 	.word	0x20000e04
 80057a4:	20000e6c 	.word	0x20000e6c

080057a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <xTaskGetSchedulerState+0x34>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057b6:	2301      	movs	r3, #1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	e008      	b.n	80057ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057bc:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <xTaskGetSchedulerState+0x38>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057c4:	2302      	movs	r3, #2
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	e001      	b.n	80057ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057ce:	687b      	ldr	r3, [r7, #4]
	}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000e58 	.word	0x20000e58
 80057e0:	20000e74 	.word	0x20000e74

080057e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d05a      	beq.n	80058b0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <xTaskPriorityDisinherit+0xd8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d00c      	beq.n	800581e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	60fb      	str	r3, [r7, #12]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	b672      	cpsid	i
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	b662      	cpsie	i
 800583a:	60bb      	str	r3, [r7, #8]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	429a      	cmp	r2, r3
 8005854:	d02c      	beq.n	80058b0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d128      	bne.n	80058b0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fc04 	bl	8004070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskPriorityDisinherit+0xdc>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d903      	bls.n	8005890 <xTaskPriorityDisinherit+0xac>
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a0c      	ldr	r2, [pc, #48]	; (80058c0 <xTaskPriorityDisinherit+0xdc>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <xTaskPriorityDisinherit+0xe0>)
 800589e:	441a      	add	r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe fb85 	bl	8003fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
	}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000978 	.word	0x20000978
 80058c0:	20000e54 	.word	0x20000e54
 80058c4:	2000097c 	.word	0x2000097c

080058c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058d2:	4b21      	ldr	r3, [pc, #132]	; (8005958 <prvAddCurrentTaskToDelayedList+0x90>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d8:	4b20      	ldr	r3, [pc, #128]	; (800595c <prvAddCurrentTaskToDelayedList+0x94>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3304      	adds	r3, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fbc6 	bl	8004070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d10a      	bne.n	8005902 <prvAddCurrentTaskToDelayedList+0x3a>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <prvAddCurrentTaskToDelayedList+0x94>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4819      	ldr	r0, [pc, #100]	; (8005960 <prvAddCurrentTaskToDelayedList+0x98>)
 80058fc:	f7fe fb5b 	bl	8003fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005900:	e026      	b.n	8005950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4413      	add	r3, r2
 8005908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <prvAddCurrentTaskToDelayedList+0x94>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	429a      	cmp	r2, r3
 8005918:	d209      	bcs.n	800592e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <prvAddCurrentTaskToDelayedList+0x94>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f7fe fb69 	bl	8003ffe <vListInsert>
}
 800592c:	e010      	b.n	8005950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <prvAddCurrentTaskToDelayedList+0x94>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7fe fb5f 	bl	8003ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d202      	bcs.n	8005950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800594a:	4a08      	ldr	r2, [pc, #32]	; (800596c <prvAddCurrentTaskToDelayedList+0xa4>)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000e50 	.word	0x20000e50
 800595c:	20000978 	.word	0x20000978
 8005960:	20000e38 	.word	0x20000e38
 8005964:	20000e08 	.word	0x20000e08
 8005968:	20000e04 	.word	0x20000e04
 800596c:	20000e6c 	.word	0x20000e6c

08005970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800597a:	f000 fb15 	bl	8005fa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <xTimerCreateTimerTask+0x84>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800598e:	1d3a      	adds	r2, r7, #4
 8005990:	f107 0108 	add.w	r1, r7, #8
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fac5 	bl	8003f28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	9202      	str	r2, [sp, #8]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	2302      	movs	r3, #2
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	460a      	mov	r2, r1
 80059b0:	4911      	ldr	r1, [pc, #68]	; (80059f8 <xTimerCreateTimerTask+0x88>)
 80059b2:	4812      	ldr	r0, [pc, #72]	; (80059fc <xTimerCreateTimerTask+0x8c>)
 80059b4:	f7ff f890 	bl	8004ad8 <xTaskCreateStatic>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4a11      	ldr	r2, [pc, #68]	; (8005a00 <xTimerCreateTimerTask+0x90>)
 80059bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <xTimerCreateTimerTask+0x90>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10c      	bne.n	80059ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	b672      	cpsid	i
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	b662      	cpsie	i
 80059e4:	613b      	str	r3, [r7, #16]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80059ea:	697b      	ldr	r3, [r7, #20]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20000ea8 	.word	0x20000ea8
 80059f8:	08006a90 	.word	0x08006a90
 80059fc:	08005b41 	.word	0x08005b41
 8005a00:	20000eac 	.word	0x20000eac

08005a04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10c      	bne.n	8005a36 <xTimerGenericCommand+0x32>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	b672      	cpsid	i
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	b662      	cpsie	i
 8005a30:	623b      	str	r3, [r7, #32]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <xTimerGenericCommand+0x9c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02a      	beq.n	8005a94 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	dc18      	bgt.n	8005a82 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a50:	f7ff feaa 	bl	80057a8 <xTaskGetSchedulerState>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d109      	bne.n	8005a6e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <xTimerGenericCommand+0x9c>)
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	f107 0110 	add.w	r1, r7, #16
 8005a62:	2300      	movs	r3, #0
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	f7fe fc3d 	bl	80042e4 <xQueueGenericSend>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a6c:	e012      	b.n	8005a94 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <xTimerGenericCommand+0x9c>)
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f107 0110 	add.w	r1, r7, #16
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f7fe fc33 	bl	80042e4 <xQueueGenericSend>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a80:	e008      	b.n	8005a94 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <xTimerGenericCommand+0x9c>)
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f107 0110 	add.w	r1, r7, #16
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	f7fe fd2f 	bl	80044f0 <xQueueGenericSendFromISR>
 8005a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3728      	adds	r7, #40	; 0x28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000ea8 	.word	0x20000ea8

08005aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <prvProcessExpiredTimer+0x98>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fad7 	bl	8004070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d024      	beq.n	8005b1a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	18d1      	adds	r1, r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	6978      	ldr	r0, [r7, #20]
 8005ade:	f000 f8d3 	bl	8005c88 <prvInsertTimerInActiveList>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d021      	beq.n	8005b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff86 	bl	8005a04 <xTimerGenericCommand>
 8005af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d115      	bne.n	8005b2c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	b672      	cpsid	i
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	b662      	cpsie	i
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	6978      	ldr	r0, [r7, #20]
 8005b32:	4798      	blx	r3
}
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000ea0 	.word	0x20000ea0

08005b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b48:	f107 0308 	add.w	r3, r7, #8
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f857 	bl	8005c00 <prvGetNextExpireTime>
 8005b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f803 	bl	8005b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b5e:	f000 f8d5 	bl	8005d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b62:	e7f1      	b.n	8005b48 <prvTimerTask+0x8>

08005b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b6e:	f7ff fa1d 	bl	8004fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f866 	bl	8005c48 <prvSampleTimeNow>
 8005b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d130      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d806      	bhi.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b92:	f7ff fa19 	bl	8004fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff83 	bl	8005aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b9e:	e024      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <prvProcessTimerOrBlockTask+0x90>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <prvProcessTimerOrBlockTask+0x50>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <prvProcessTimerOrBlockTask+0x52>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <prvProcessTimerOrBlockTask+0x94>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f7fe ff53 	bl	8004a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bca:	f7ff f9fd 	bl	8004fc8 <xTaskResumeAll>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <prvProcessTimerOrBlockTask+0x98>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
}
 8005be4:	e001      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005be6:	f7ff f9ef 	bl	8004fc8 <xTaskResumeAll>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000ea4 	.word	0x20000ea4
 8005bf8:	20000ea8 	.word	0x20000ea8
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <prvGetNextExpireTime+0x16>
 8005c12:	2201      	movs	r2, #1
 8005c14:	e000      	b.n	8005c18 <prvGetNextExpireTime+0x18>
 8005c16:	2200      	movs	r2, #0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e001      	b.n	8005c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000ea0 	.word	0x20000ea0

08005c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c50:	f7ff fa5a 	bl	8005108 <xTaskGetTickCount>
 8005c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d205      	bcs.n	8005c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c60:	f000 f93c 	bl	8005edc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000eb0 	.word	0x20000eb0

08005c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d812      	bhi.n	8005cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e01b      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <prvInsertTimerInActiveList+0x7c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe f996 	bl	8003ffe <vListInsert>
 8005cd2:	e012      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d206      	bcs.n	8005cea <prvInsertTimerInActiveList+0x62>
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e007      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <prvInsertTimerInActiveList+0x80>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7fe f982 	bl	8003ffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cfa:	697b      	ldr	r3, [r7, #20]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000ea4 	.word	0x20000ea4
 8005d08:	20000ea0 	.word	0x20000ea0

08005d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d12:	e0d0      	b.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da1a      	bge.n	8005d50 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10c      	bne.n	8005d40 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	b672      	cpsid	i
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	b662      	cpsie	i
 8005d3a:	61fb      	str	r3, [r7, #28]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d46:	6850      	ldr	r0, [r2, #4]
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	6892      	ldr	r2, [r2, #8]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f2c0 80ae 	blt.w	8005eb4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	3304      	adds	r3, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe f981 	bl	8004070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff69 	bl	8005c48 <prvSampleTimeNow>
 8005d76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	f200 809b 	bhi.w	8005eb6 <prvProcessReceivedCommands+0x1aa>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <prvProcessReceivedCommands+0x7c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005e29 	.word	0x08005e29
 8005d98:	08005e3d 	.word	0x08005e3d
 8005d9c:	08005e8b 	.word	0x08005e8b
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005db1 	.word	0x08005db1
 8005da8:	08005e29 	.word	0x08005e29
 8005dac:	08005e3d 	.word	0x08005e3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	18d1      	adds	r1, r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd0:	f7ff ff5a 	bl	8005c88 <prvInsertTimerInActiveList>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d06d      	beq.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d062      	beq.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	441a      	add	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e02:	f7ff fdff 	bl	8005a04 <xTimerGenericCommand>
 8005e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d153      	bne.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	b672      	cpsid	i
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	b662      	cpsie	i
 8005e22:	61bb      	str	r3, [r7, #24]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e3a:	e03c      	b.n	8005eb6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10c      	bne.n	8005e76 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	b672      	cpsid	i
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	b662      	cpsie	i
 8005e70:	617b      	str	r3, [r7, #20]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	18d1      	adds	r1, r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e84:	f7ff ff00 	bl	8005c88 <prvInsertTimerInActiveList>
					break;
 8005e88:	e015      	b.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9a:	f000 fbc5 	bl	8006628 <vPortFree>
 8005e9e:	e00a      	b.n	8005eb6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005eb2:	e000      	b.n	8005eb6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005eb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <prvProcessReceivedCommands+0x1cc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1d39      	adds	r1, r7, #4
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fbb6 	bl	8004630 <xQueueReceive>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f47f af24 	bne.w	8005d14 <prvProcessReceivedCommands+0x8>
	}
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3730      	adds	r7, #48	; 0x30
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000ea8 	.word	0x20000ea8

08005edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ee2:	e04a      	b.n	8005f7a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b2c      	ldr	r3, [pc, #176]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe f8b7 	bl	8004070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d030      	beq.n	8005f7a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d90e      	bls.n	8005f48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fe f85c 	bl	8003ffe <vListInsert>
 8005f46:	e018      	b.n	8005f7a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	2100      	movs	r1, #0
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fd56 	bl	8005a04 <xTimerGenericCommand>
 8005f58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10c      	bne.n	8005f7a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	b672      	cpsid	i
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	b662      	cpsie	i
 8005f74:	603b      	str	r3, [r7, #0]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1af      	bne.n	8005ee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <prvSwitchTimerLists+0xc8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <prvSwitchTimerLists+0xc4>)
 8005f90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f92:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <prvSwitchTimerLists+0xc8>)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20000ea0 	.word	0x20000ea0
 8005fa4:	20000ea4 	.word	0x20000ea4

08005fa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fae:	f000 f945 	bl	800623c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvCheckForValidListAndQueue+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d120      	bne.n	8005ffc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fba:	4814      	ldr	r0, [pc, #80]	; (800600c <prvCheckForValidListAndQueue+0x64>)
 8005fbc:	f7fd ffce 	bl	8003f5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fc0:	4813      	ldr	r0, [pc, #76]	; (8006010 <prvCheckForValidListAndQueue+0x68>)
 8005fc2:	f7fd ffcb 	bl	8003f5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fc6:	4b13      	ldr	r3, [pc, #76]	; (8006014 <prvCheckForValidListAndQueue+0x6c>)
 8005fc8:	4a10      	ldr	r2, [pc, #64]	; (800600c <prvCheckForValidListAndQueue+0x64>)
 8005fca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fcc:	4b12      	ldr	r3, [pc, #72]	; (8006018 <prvCheckForValidListAndQueue+0x70>)
 8005fce:	4a10      	ldr	r2, [pc, #64]	; (8006010 <prvCheckForValidListAndQueue+0x68>)
 8005fd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <prvCheckForValidListAndQueue+0x74>)
 8005fd8:	4a11      	ldr	r2, [pc, #68]	; (8006020 <prvCheckForValidListAndQueue+0x78>)
 8005fda:	2110      	movs	r1, #16
 8005fdc:	200a      	movs	r0, #10
 8005fde:	f7fe f8db 	bl	8004198 <xQueueGenericCreateStatic>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4a08      	ldr	r2, [pc, #32]	; (8006008 <prvCheckForValidListAndQueue+0x60>)
 8005fe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fe8:	4b07      	ldr	r3, [pc, #28]	; (8006008 <prvCheckForValidListAndQueue+0x60>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <prvCheckForValidListAndQueue+0x60>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	490b      	ldr	r1, [pc, #44]	; (8006024 <prvCheckForValidListAndQueue+0x7c>)
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fd10 	bl	8004a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ffc:	f000 f952 	bl	80062a4 <vPortExitCritical>
}
 8006000:	bf00      	nop
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000ea8 	.word	0x20000ea8
 800600c:	20000e78 	.word	0x20000e78
 8006010:	20000e8c 	.word	0x20000e8c
 8006014:	20000ea0 	.word	0x20000ea0
 8006018:	20000ea4 	.word	0x20000ea4
 800601c:	20000f54 	.word	0x20000f54
 8006020:	20000eb4 	.word	0x20000eb4
 8006024:	08006a98 	.word	0x08006a98

08006028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3b04      	subs	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b04      	subs	r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b04      	subs	r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006058:	4a0c      	ldr	r2, [pc, #48]	; (800608c <pxPortInitialiseStack+0x64>)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b14      	subs	r3, #20
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b04      	subs	r3, #4
 800606e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f06f 0202 	mvn.w	r2, #2
 8006076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3b20      	subs	r3, #32
 800607c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	08006091 	.word	0x08006091

08006090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <prvTaskExitError+0x5c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d00c      	beq.n	80060be <prvTaskExitError+0x2e>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	60fb      	str	r3, [r7, #12]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <prvTaskExitError+0x2c>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	b672      	cpsid	i
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	b662      	cpsie	i
 80060d2:	60bb      	str	r3, [r7, #8]
}
 80060d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060d6:	bf00      	nop
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0fc      	beq.n	80060d8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <pxCurrentTCBConst2>)
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	6808      	ldr	r0, [r1, #0]
 80060f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	f380 8809 	msr	PSP, r0
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f380 8811 	msr	BASEPRI, r0
 800610a:	4770      	bx	lr
 800610c:	f3af 8000 	nop.w

08006110 <pxCurrentTCBConst2>:
 8006110:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006118:	4808      	ldr	r0, [pc, #32]	; (800613c <prvPortStartFirstTask+0x24>)
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f380 8808 	msr	MSP, r0
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f380 8814 	msr	CONTROL, r0
 800612a:	b662      	cpsie	i
 800612c:	b661      	cpsie	f
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	df00      	svc	0
 8006138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800613a:	bf00      	nop
 800613c:	e000ed08 	.word	0xe000ed08

08006140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006146:	4b37      	ldr	r3, [pc, #220]	; (8006224 <xPortStartScheduler+0xe4>)
 8006148:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006168:	b2da      	uxtb	r2, r3
 800616a:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <xPortStartScheduler+0xe8>)
 800616c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <xPortStartScheduler+0xec>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006174:	e009      	b.n	800618a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006176:	4b2d      	ldr	r3, [pc, #180]	; (800622c <xPortStartScheduler+0xec>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3b01      	subs	r3, #1
 800617c:	4a2b      	ldr	r2, [pc, #172]	; (800622c <xPortStartScheduler+0xec>)
 800617e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d0ef      	beq.n	8006176 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006196:	4b25      	ldr	r3, [pc, #148]	; (800622c <xPortStartScheduler+0xec>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f1c3 0307 	rsb	r3, r3, #7
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d00c      	beq.n	80061bc <xPortStartScheduler+0x7c>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	b672      	cpsid	i
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	b662      	cpsie	i
 80061b6:	60bb      	str	r3, [r7, #8]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <xPortStartScheduler+0xec>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	4a1a      	ldr	r2, [pc, #104]	; (800622c <xPortStartScheduler+0xec>)
 80061c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061c6:	4b19      	ldr	r3, [pc, #100]	; (800622c <xPortStartScheduler+0xec>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <xPortStartScheduler+0xec>)
 80061d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <xPortStartScheduler+0xf0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a14      	ldr	r2, [pc, #80]	; (8006230 <xPortStartScheduler+0xf0>)
 80061e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <xPortStartScheduler+0xf0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a11      	ldr	r2, [pc, #68]	; (8006230 <xPortStartScheduler+0xf0>)
 80061ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061f2:	f000 f8dd 	bl	80063b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061f6:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <xPortStartScheduler+0xf4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061fc:	f000 f8fc 	bl	80063f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <xPortStartScheduler+0xf8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <xPortStartScheduler+0xf8>)
 8006206:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800620a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800620c:	f7ff ff84 	bl	8006118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006210:	f7ff f846 	bl	80052a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006214:	f7ff ff3c 	bl	8006090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000e400 	.word	0xe000e400
 8006228:	20000fa4 	.word	0x20000fa4
 800622c:	20000fa8 	.word	0x20000fa8
 8006230:	e000ed20 	.word	0xe000ed20
 8006234:	2000000c 	.word	0x2000000c
 8006238:	e000ef34 	.word	0xe000ef34

0800623c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	b672      	cpsid	i
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	b662      	cpsie	i
 8006256:	607b      	str	r3, [r7, #4]
}
 8006258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <vPortEnterCritical+0x60>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	4a0e      	ldr	r2, [pc, #56]	; (800629c <vPortEnterCritical+0x60>)
 8006262:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <vPortEnterCritical+0x60>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d111      	bne.n	8006290 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <vPortEnterCritical+0x64>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <vPortEnterCritical+0x54>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	b672      	cpsid	i
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	b662      	cpsie	i
 800628a:	603b      	str	r3, [r7, #0]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <vPortEnterCritical+0x52>
	}
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	2000000c 	.word	0x2000000c
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <vPortExitCritical+0x54>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10c      	bne.n	80062cc <vPortExitCritical+0x28>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	b672      	cpsid	i
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	b662      	cpsie	i
 80062c6:	607b      	str	r3, [r7, #4]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <vPortExitCritical+0x54>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <vPortExitCritical+0x54>)
 80062d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <vPortExitCritical+0x54>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <vPortExitCritical+0x46>
 80062de:	2300      	movs	r3, #0
 80062e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f383 8811 	msr	BASEPRI, r3
}
 80062e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	2000000c 	.word	0x2000000c
 80062fc:	00000000 	.word	0x00000000

08006300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006300:	f3ef 8009 	mrs	r0, PSP
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <pxCurrentTCBConst>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	f01e 0f10 	tst.w	lr, #16
 8006310:	bf08      	it	eq
 8006312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	6010      	str	r0, [r2, #0]
 800631c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006324:	b672      	cpsid	i
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	b662      	cpsie	i
 8006334:	f7fe ffb4 	bl	80052a0 <vTaskSwitchContext>
 8006338:	f04f 0000 	mov.w	r0, #0
 800633c:	f380 8811 	msr	BASEPRI, r0
 8006340:	bc09      	pop	{r0, r3}
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f01e 0f10 	tst.w	lr, #16
 800634e:	bf08      	it	eq
 8006350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006354:	f380 8809 	msr	PSP, r0
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <pxCurrentTCBConst>:
 8006360:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	b672      	cpsid	i
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	b662      	cpsie	i
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006386:	f7fe fecf 	bl	8005128 <xTaskIncrementTick>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <SysTick_Handler+0x44>)
 8006392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f383 8811 	msr	BASEPRI, r3
}
 80063a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <vPortSetupTimerInterrupt+0x34>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <vPortSetupTimerInterrupt+0x38>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <vPortSetupTimerInterrupt+0x3c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <vPortSetupTimerInterrupt+0x40>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	099b      	lsrs	r3, r3, #6
 80063cc:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <vPortSetupTimerInterrupt+0x44>)
 80063ce:	3b01      	subs	r3, #1
 80063d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063d2:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <vPortSetupTimerInterrupt+0x34>)
 80063d4:	2207      	movs	r2, #7
 80063d6:	601a      	str	r2, [r3, #0]
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	e000e010 	.word	0xe000e010
 80063e8:	e000e018 	.word	0xe000e018
 80063ec:	20000000 	.word	0x20000000
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	e000e014 	.word	0xe000e014

080063f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006408 <vPortEnableVFP+0x10>
 80063fc:	6801      	ldr	r1, [r0, #0]
 80063fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006402:	6001      	str	r1, [r0, #0]
 8006404:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006406:	bf00      	nop
 8006408:	e000ed88 	.word	0xe000ed88

0800640c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006412:	f3ef 8305 	mrs	r3, IPSR
 8006416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d916      	bls.n	800644c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800641e:	4a19      	ldr	r2, [pc, #100]	; (8006484 <vPortValidateInterruptPriority+0x78>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <vPortValidateInterruptPriority+0x7c>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	7afa      	ldrb	r2, [r7, #11]
 800642e:	429a      	cmp	r2, r3
 8006430:	d20c      	bcs.n	800644c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	b672      	cpsid	i
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	b662      	cpsie	i
 8006446:	607b      	str	r3, [r7, #4]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <vPortValidateInterruptPriority+0x80>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <vPortValidateInterruptPriority+0x84>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d90c      	bls.n	8006476 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	b672      	cpsid	i
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	b662      	cpsie	i
 8006470:	603b      	str	r3, [r7, #0]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <vPortValidateInterruptPriority+0x68>
	}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	e000e3f0 	.word	0xe000e3f0
 8006488:	20000fa4 	.word	0x20000fa4
 800648c:	e000ed0c 	.word	0xe000ed0c
 8006490:	20000fa8 	.word	0x20000fa8

08006494 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064a0:	f7fe fd84 	bl	8004fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064a4:	4b5b      	ldr	r3, [pc, #364]	; (8006614 <pvPortMalloc+0x180>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064ac:	f000 f91a 	bl	80066e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064b0:	4b59      	ldr	r3, [pc, #356]	; (8006618 <pvPortMalloc+0x184>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8092 	bne.w	80065e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01f      	beq.n	8006504 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80064c4:	2208      	movs	r2, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	3308      	adds	r3, #8
 80064de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00c      	beq.n	8006504 <pvPortMalloc+0x70>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	b672      	cpsid	i
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	b662      	cpsie	i
 80064fe:	617b      	str	r3, [r7, #20]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d06b      	beq.n	80065e2 <pvPortMalloc+0x14e>
 800650a:	4b44      	ldr	r3, [pc, #272]	; (800661c <pvPortMalloc+0x188>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d866      	bhi.n	80065e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006514:	4b42      	ldr	r3, [pc, #264]	; (8006620 <pvPortMalloc+0x18c>)
 8006516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006518:	4b41      	ldr	r3, [pc, #260]	; (8006620 <pvPortMalloc+0x18c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800651e:	e004      	b.n	800652a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d903      	bls.n	800653c <pvPortMalloc+0xa8>
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f1      	bne.n	8006520 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <pvPortMalloc+0x180>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	429a      	cmp	r2, r3
 8006544:	d04d      	beq.n	80065e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2208      	movs	r2, #8
 800654c:	4413      	add	r3, r2
 800654e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	2308      	movs	r3, #8
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	429a      	cmp	r2, r3
 8006566:	d921      	bls.n	80065ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <pvPortMalloc+0x100>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	b672      	cpsid	i
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	b662      	cpsie	i
 800658e:	613b      	str	r3, [r7, #16]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	1ad2      	subs	r2, r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065a6:	69b8      	ldr	r0, [r7, #24]
 80065a8:	f000 f8fe 	bl	80067a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <pvPortMalloc+0x188>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	4a19      	ldr	r2, [pc, #100]	; (800661c <pvPortMalloc+0x188>)
 80065b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ba:	4b18      	ldr	r3, [pc, #96]	; (800661c <pvPortMalloc+0x188>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b19      	ldr	r3, [pc, #100]	; (8006624 <pvPortMalloc+0x190>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d203      	bcs.n	80065ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065c6:	4b15      	ldr	r3, [pc, #84]	; (800661c <pvPortMalloc+0x188>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a16      	ldr	r2, [pc, #88]	; (8006624 <pvPortMalloc+0x190>)
 80065cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <pvPortMalloc+0x184>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065e2:	f7fe fcf1 	bl	8004fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <pvPortMalloc+0x176>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	b672      	cpsid	i
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	b662      	cpsie	i
 8006604:	60fb      	str	r3, [r7, #12]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <pvPortMalloc+0x174>
	return pvReturn;
 800660a:	69fb      	ldr	r3, [r7, #28]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20004bb4 	.word	0x20004bb4
 8006618:	20004bc0 	.word	0x20004bc0
 800661c:	20004bb8 	.word	0x20004bb8
 8006620:	20004bac 	.word	0x20004bac
 8006624:	20004bbc 	.word	0x20004bbc

08006628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d04c      	beq.n	80066d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800663a:	2308      	movs	r3, #8
 800663c:	425b      	negs	r3, r3
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <vPortFree+0xb4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <vPortFree+0x48>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	b672      	cpsid	i
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	b662      	cpsie	i
 800666a:	60fb      	str	r3, [r7, #12]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00c      	beq.n	8006692 <vPortFree+0x6a>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	b672      	cpsid	i
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	b662      	cpsie	i
 800668c:	60bb      	str	r3, [r7, #8]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <vPortFree+0xb4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d019      	beq.n	80066d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d115      	bne.n	80066d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <vPortFree+0xb4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	401a      	ands	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066b8:	f7fe fc78 	bl	8004fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <vPortFree+0xb8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	4a06      	ldr	r2, [pc, #24]	; (80066e0 <vPortFree+0xb8>)
 80066c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ca:	6938      	ldr	r0, [r7, #16]
 80066cc:	f000 f86c 	bl	80067a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066d0:	f7fe fc7a 	bl	8004fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066d4:	bf00      	nop
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20004bc0 	.word	0x20004bc0
 80066e0:	20004bb8 	.word	0x20004bb8

080066e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066f0:	4b27      	ldr	r3, [pc, #156]	; (8006790 <prvHeapInit+0xac>)
 80066f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <prvHeapInit+0xac>)
 8006714:	4413      	add	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <prvHeapInit+0xb0>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006722:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <prvHeapInit+0xb0>)
 8006724:	2200      	movs	r2, #0
 8006726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006730:	2208      	movs	r2, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <prvHeapInit+0xb4>)
 8006744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <prvHeapInit+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <prvHeapInit+0xb4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <prvHeapInit+0xb4>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <prvHeapInit+0xb8>)
 8006772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <prvHeapInit+0xbc>)
 800677a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <prvHeapInit+0xc0>)
 800677e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20000fac 	.word	0x20000fac
 8006794:	20004bac 	.word	0x20004bac
 8006798:	20004bb4 	.word	0x20004bb4
 800679c:	20004bbc 	.word	0x20004bbc
 80067a0:	20004bb8 	.word	0x20004bb8
 80067a4:	20004bc0 	.word	0x20004bc0

080067a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <prvInsertBlockIntoFreeList+0xac>)
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e002      	b.n	80067bc <prvInsertBlockIntoFreeList+0x14>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d8f7      	bhi.n	80067b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d108      	bne.n	80067ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	441a      	add	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d118      	bne.n	8006830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <prvInsertBlockIntoFreeList+0xb0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d00d      	beq.n	8006826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	441a      	add	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e008      	b.n	8006838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <prvInsertBlockIntoFreeList+0xb0>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e003      	b.n	8006838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d002      	beq.n	8006846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20004bac 	.word	0x20004bac
 8006858:	20004bb4 	.word	0x20004bb4

0800685c <__libc_init_array>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4d0d      	ldr	r5, [pc, #52]	; (8006894 <__libc_init_array+0x38>)
 8006860:	4c0d      	ldr	r4, [pc, #52]	; (8006898 <__libc_init_array+0x3c>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	2600      	movs	r6, #0
 8006868:	42a6      	cmp	r6, r4
 800686a:	d109      	bne.n	8006880 <__libc_init_array+0x24>
 800686c:	4d0b      	ldr	r5, [pc, #44]	; (800689c <__libc_init_array+0x40>)
 800686e:	4c0c      	ldr	r4, [pc, #48]	; (80068a0 <__libc_init_array+0x44>)
 8006870:	f000 f8f2 	bl	8006a58 <_init>
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	2600      	movs	r6, #0
 800687a:	42a6      	cmp	r6, r4
 800687c:	d105      	bne.n	800688a <__libc_init_array+0x2e>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f855 3b04 	ldr.w	r3, [r5], #4
 8006884:	4798      	blx	r3
 8006886:	3601      	adds	r6, #1
 8006888:	e7ee      	b.n	8006868 <__libc_init_array+0xc>
 800688a:	f855 3b04 	ldr.w	r3, [r5], #4
 800688e:	4798      	blx	r3
 8006890:	3601      	adds	r6, #1
 8006892:	e7f2      	b.n	800687a <__libc_init_array+0x1e>
 8006894:	08006b68 	.word	0x08006b68
 8006898:	08006b68 	.word	0x08006b68
 800689c:	08006b68 	.word	0x08006b68
 80068a0:	08006b6c 	.word	0x08006b6c

080068a4 <__retarget_lock_acquire_recursive>:
 80068a4:	4770      	bx	lr

080068a6 <__retarget_lock_release_recursive>:
 80068a6:	4770      	bx	lr

080068a8 <memcpy>:
 80068a8:	440a      	add	r2, r1
 80068aa:	4291      	cmp	r1, r2
 80068ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80068b0:	d100      	bne.n	80068b4 <memcpy+0xc>
 80068b2:	4770      	bx	lr
 80068b4:	b510      	push	{r4, lr}
 80068b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068be:	4291      	cmp	r1, r2
 80068c0:	d1f9      	bne.n	80068b6 <memcpy+0xe>
 80068c2:	bd10      	pop	{r4, pc}

080068c4 <memset>:
 80068c4:	4402      	add	r2, r0
 80068c6:	4603      	mov	r3, r0
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d100      	bne.n	80068ce <memset+0xa>
 80068cc:	4770      	bx	lr
 80068ce:	f803 1b01 	strb.w	r1, [r3], #1
 80068d2:	e7f9      	b.n	80068c8 <memset+0x4>

080068d4 <cleanup_glue>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	6809      	ldr	r1, [r1, #0]
 80068da:	4605      	mov	r5, r0
 80068dc:	b109      	cbz	r1, 80068e2 <cleanup_glue+0xe>
 80068de:	f7ff fff9 	bl	80068d4 <cleanup_glue>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ea:	f000 b869 	b.w	80069c0 <_free_r>
	...

080068f0 <_reclaim_reent>:
 80068f0:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <_reclaim_reent+0xb4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4283      	cmp	r3, r0
 80068f6:	b570      	push	{r4, r5, r6, lr}
 80068f8:	4604      	mov	r4, r0
 80068fa:	d051      	beq.n	80069a0 <_reclaim_reent+0xb0>
 80068fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068fe:	b143      	cbz	r3, 8006912 <_reclaim_reent+0x22>
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d14a      	bne.n	800699c <_reclaim_reent+0xac>
 8006906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	b111      	cbz	r1, 8006912 <_reclaim_reent+0x22>
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f857 	bl	80069c0 <_free_r>
 8006912:	6961      	ldr	r1, [r4, #20]
 8006914:	b111      	cbz	r1, 800691c <_reclaim_reent+0x2c>
 8006916:	4620      	mov	r0, r4
 8006918:	f000 f852 	bl	80069c0 <_free_r>
 800691c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800691e:	b111      	cbz	r1, 8006926 <_reclaim_reent+0x36>
 8006920:	4620      	mov	r0, r4
 8006922:	f000 f84d 	bl	80069c0 <_free_r>
 8006926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006928:	b111      	cbz	r1, 8006930 <_reclaim_reent+0x40>
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f848 	bl	80069c0 <_free_r>
 8006930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006932:	b111      	cbz	r1, 800693a <_reclaim_reent+0x4a>
 8006934:	4620      	mov	r0, r4
 8006936:	f000 f843 	bl	80069c0 <_free_r>
 800693a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800693c:	b111      	cbz	r1, 8006944 <_reclaim_reent+0x54>
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f83e 	bl	80069c0 <_free_r>
 8006944:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006946:	b111      	cbz	r1, 800694e <_reclaim_reent+0x5e>
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f839 	bl	80069c0 <_free_r>
 800694e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006950:	b111      	cbz	r1, 8006958 <_reclaim_reent+0x68>
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f834 	bl	80069c0 <_free_r>
 8006958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695a:	b111      	cbz	r1, 8006962 <_reclaim_reent+0x72>
 800695c:	4620      	mov	r0, r4
 800695e:	f000 f82f 	bl	80069c0 <_free_r>
 8006962:	69a3      	ldr	r3, [r4, #24]
 8006964:	b1e3      	cbz	r3, 80069a0 <_reclaim_reent+0xb0>
 8006966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006968:	4620      	mov	r0, r4
 800696a:	4798      	blx	r3
 800696c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800696e:	b1b9      	cbz	r1, 80069a0 <_reclaim_reent+0xb0>
 8006970:	4620      	mov	r0, r4
 8006972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006976:	f7ff bfad 	b.w	80068d4 <cleanup_glue>
 800697a:	5949      	ldr	r1, [r1, r5]
 800697c:	b941      	cbnz	r1, 8006990 <_reclaim_reent+0xa0>
 800697e:	3504      	adds	r5, #4
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	2d80      	cmp	r5, #128	; 0x80
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	d1f8      	bne.n	800697a <_reclaim_reent+0x8a>
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f819 	bl	80069c0 <_free_r>
 800698e:	e7ba      	b.n	8006906 <_reclaim_reent+0x16>
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f814 	bl	80069c0 <_free_r>
 8006998:	4631      	mov	r1, r6
 800699a:	e7ef      	b.n	800697c <_reclaim_reent+0x8c>
 800699c:	2500      	movs	r5, #0
 800699e:	e7ef      	b.n	8006980 <_reclaim_reent+0x90>
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	bf00      	nop
 80069a4:	20000010 	.word	0x20000010

080069a8 <__malloc_lock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__malloc_lock+0x8>)
 80069aa:	f7ff bf7b 	b.w	80068a4 <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	20004bc4 	.word	0x20004bc4

080069b4 <__malloc_unlock>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__malloc_unlock+0x8>)
 80069b6:	f7ff bf76 	b.w	80068a6 <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	20004bc4 	.word	0x20004bc4

080069c0 <_free_r>:
 80069c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d044      	beq.n	8006a50 <_free_r+0x90>
 80069c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ca:	9001      	str	r0, [sp, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f1a1 0404 	sub.w	r4, r1, #4
 80069d2:	bfb8      	it	lt
 80069d4:	18e4      	addlt	r4, r4, r3
 80069d6:	f7ff ffe7 	bl	80069a8 <__malloc_lock>
 80069da:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <_free_r+0x94>)
 80069dc:	9801      	ldr	r0, [sp, #4]
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	b933      	cbnz	r3, 80069f0 <_free_r+0x30>
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	6014      	str	r4, [r2, #0]
 80069e6:	b003      	add	sp, #12
 80069e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069ec:	f7ff bfe2 	b.w	80069b4 <__malloc_unlock>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d908      	bls.n	8006a06 <_free_r+0x46>
 80069f4:	6825      	ldr	r5, [r4, #0]
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	428b      	cmp	r3, r1
 80069fa:	bf01      	itttt	eq
 80069fc:	6819      	ldreq	r1, [r3, #0]
 80069fe:	685b      	ldreq	r3, [r3, #4]
 8006a00:	1949      	addeq	r1, r1, r5
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	e7ed      	b.n	80069e2 <_free_r+0x22>
 8006a06:	461a      	mov	r2, r3
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b10b      	cbz	r3, 8006a10 <_free_r+0x50>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d9fa      	bls.n	8006a06 <_free_r+0x46>
 8006a10:	6811      	ldr	r1, [r2, #0]
 8006a12:	1855      	adds	r5, r2, r1
 8006a14:	42a5      	cmp	r5, r4
 8006a16:	d10b      	bne.n	8006a30 <_free_r+0x70>
 8006a18:	6824      	ldr	r4, [r4, #0]
 8006a1a:	4421      	add	r1, r4
 8006a1c:	1854      	adds	r4, r2, r1
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	6011      	str	r1, [r2, #0]
 8006a22:	d1e0      	bne.n	80069e6 <_free_r+0x26>
 8006a24:	681c      	ldr	r4, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	6053      	str	r3, [r2, #4]
 8006a2a:	4421      	add	r1, r4
 8006a2c:	6011      	str	r1, [r2, #0]
 8006a2e:	e7da      	b.n	80069e6 <_free_r+0x26>
 8006a30:	d902      	bls.n	8006a38 <_free_r+0x78>
 8006a32:	230c      	movs	r3, #12
 8006a34:	6003      	str	r3, [r0, #0]
 8006a36:	e7d6      	b.n	80069e6 <_free_r+0x26>
 8006a38:	6825      	ldr	r5, [r4, #0]
 8006a3a:	1961      	adds	r1, r4, r5
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	bf04      	itt	eq
 8006a40:	6819      	ldreq	r1, [r3, #0]
 8006a42:	685b      	ldreq	r3, [r3, #4]
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	bf04      	itt	eq
 8006a48:	1949      	addeq	r1, r1, r5
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	6054      	str	r4, [r2, #4]
 8006a4e:	e7ca      	b.n	80069e6 <_free_r+0x26>
 8006a50:	b003      	add	sp, #12
 8006a52:	bd30      	pop	{r4, r5, pc}
 8006a54:	20004bc8 	.word	0x20004bc8

08006a58 <_init>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr

08006a64 <_fini>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr
